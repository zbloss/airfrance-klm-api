{
  "openapi": "3.0.1",
  "info": {
    "title": "Offers API",
    "description": "The Offers API provides flight schedules, fares and transfer information for KLM and Air France for\nany bookable date in the future. This API enables you to find out all the options related to a passenger\njourney including information on schedule, prices, taxes and surcharges, route information, alternative choices,\nconditions, etc.",
    "contact": {
      "name": "Product Team Offers API",
      "url": "https://developer.airfranceklm.com/",
      "email": "mail.developer@airfranceklm.com"
    },
    "license": {
      "name": "AFKLM API terms of use",
      "url": "https://developer.airfranceklm.com/terms-of-use"
    },
    "version": "4.124.1"
  },
  "servers": [
    {
      "url": "https://{environment}.airfranceklm.com/travel/offers",
      "variables": {
        "environment": {
          "default": "api",
          "enum": [
            "api",
            "api-ute1",
            "api-ute2",
            "api-ute3",
            "api-ite1",
            "api-ite2"
          ]
        }
      }
    }
  ],
  "paths": {
    "/{version}/shopping-cart/from-quotation": {
      "post": {
        "tags": [
          "shopping-cart"
        ],
        "summary": "Create a shopping cart for a quotation",
        "description": "Creates a shopping cart for a specific quotation to be able to proceed to checkout.",
        "operationId": "createShoppingCartFromQuotation",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "d",
            "in": "query",
            "description": "The shopping cart request for a quotation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShoppingCartFromQuotationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferIdentifiers"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/lowest-fares-by-destination": {
      "post": {
        "tags": [
          "lowest-fares-by-destination"
        ],
        "summary": "Provides the lowest fares by destinations",
        "description": "Provides the lowest fares by destinations on the next 12 months for a given origin.",
        "operationId": "getLowestFaresByDestination",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The lowest fares per destination request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowestFaresByDestinationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFaresByDestinationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/search-context": {
      "get": {
        "tags": [
          "search-context"
        ],
        "summary": "Get a search context to retrieve an already stored profile",
        "description": "Provides the possibility to initialize a search context linked to the mashery context (authorization and login mode) and the input parameters. Only useful for corporate flow for the moment. Use case flow can then be followed by the consumer by requesting POST methods on availableOffers/lowestOffers with adding the profiled in the service URL.",
        "operationId": "createSearchContext_1",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "The id of the profile to retrieve.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "The id of the reservation, in case of rebooking.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractNumber",
            "in": "query",
            "description": "The subscriber contract number, in case the user is logged with his contract.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "search-context"
        ],
        "summary": "Get a search context to retrieve an already stored profile",
        "description": "Provides the possibility to initialize a search context linked to the mashery context (authorization and login mode) and the input parameters. Only useful for corporate flow for the moment. Use case flow can then be followed by the consumer by requesting POST methods on availableOffers/lowestOffers with adding the profiled in the service URL.",
        "operationId": "createSearchContext",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search-context request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchContextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/search-context/passengers": {
      "post": {
        "tags": [
          "search-context-passengers"
        ],
        "summary": "Get the search context for the given passengers",
        "description": "Validate the passengers and provide the search context for each given passenger.",
        "operationId": "createSearchContextPassenger",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search-context passengers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchContextPassengersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextPassengersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/mail-my-search": {
      "post": {
        "tags": [
          "mail-my-search"
        ],
        "summary": "Provides the details of the customer and flight to be sent by mail",
        "description": "Provides the information of the customer mail, name, and the details of the flight to be sent by mail. Use case flow can be followed by the consumer by requesting the POST method supplied as HATEOAS link in the response body of Upsell Offers.",
        "operationId": "mailMySearch",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "d",
            "in": "query",
            "description": "The details of the search made by the customer.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MailMySearchSearchCriteria"
            }
          }
        ],
        "requestBody": {
          "description": "The information about the user sending the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flights-availability": {
      "post": {
        "tags": [
          "flights-availability"
        ],
        "summary": "Provides the availability on flights",
        "description": "Used to start a search for flights availability. Provides the availability on flights by sellingClass that can be provided for a (set of) date(s)/OnD.",
        "operationId": "getFlightsAvailability",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The flights availability request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlightsAvailabilityRequest_FlightsAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightAvailabilityResponse_FlightsAvailability"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-products/{id}/shopping-cart": {
      "post": {
        "tags": [
          "shopping-cart"
        ],
        "summary": "Create a shopping cart for a flight product",
        "description": "Creates a shopping cart for a specific flight product to be able to proceed to checkout. Use case flow can be followed by the consumer by requesting the POST method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "createShoppingCart",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The encoded id that contains both the flightProduct id and the search criteria to replay the request when the flight product is not found in the cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferIdentifiers"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-products/{id}/related-products/time-to-think-product/shopping-cart": {
      "post": {
        "tags": [
          "shopping-cart"
        ],
        "summary": "Create a shopping cart for a time to think flight product",
        "description": "Creates a shopping cart for a specific flight product to be able to proceed to checkout. Use case flow can be followed by the consumer by requesting the POST method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "createTTTOfferIdentifiers",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The shopping cart request for a Time To Think",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ShoppingCartRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferIdentifiers"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/best-fare-offers": {
      "post": {
        "tags": [
          "best-fare-offers"
        ],
        "summary": "Get best available fare offers",
        "description": "Provides the best available fare offers in a specific date interval. Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getBestFareOffers",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The best-fare-offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BestFareOffersRequest_BestFareOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/BestFareOffersResponse_BestFareOffer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/best-fare-offers/top-deals": {
      "post": {
        "tags": [
          "best-fare-offers-top-deals"
        ],
        "summary": "Get the top deals for the requested market",
        "description": "Provides the top deals for the requested market and based on the different filters available.",
        "operationId": "getBestFareOffersTopDeals",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The best-fare-offers top deals request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopDealsRequest_BestFareOfferTopDeals"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TopDealsResponse_BestFareOfferTopDeals"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/best-fare-offers/feed": {
      "post": {
        "tags": [
          "best-fare-offers-feed"
        ],
        "summary": "Get best available fare offers feed",
        "description": "Provides the best available fare offers in a specific date interval. This endpoint should be used in a 'batch' context. The best fare offer could be the lowest available fare, the lowest promotional fare or a dedicated promotional fare in the requested date interval.",
        "operationId": "getBestFareOffersFeed",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The best-fare-offers feed request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BestFareOffersFeedRequest_BestFareOfferFeed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/BestFareOffersFeedResponse_BestFareOfferFeed"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/best-fare-offers/deals-number": {
      "post": {
        "tags": [
          "best-fare-offers-deals-number"
        ],
        "summary": "Get total number of deals for the requested origin for each zone",
        "description": "Provides the number of available deals for a requested origin.",
        "operationId": "getBestFareOffersDealsNumber",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The best-fare-offers deal number request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DealsNumberRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/DealsNumberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/best-fare-offers/all-deals": {
      "get": {
        "tags": [
          "best-fare-offers-all-deals"
        ],
        "summary": "Get the list of deals per origin from hateoas link",
        "description": "Used to find the list of deals per origin. Provides the complete list of deals proposed by AF/KL (the most attractive offers).",
        "operationId": "getBestFareOffersAllDealsFromHAL",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "d",
            "in": "query",
            "description": "The request to retrieve the all deals.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AllDealsRequest_BestFareOfferAllDeals"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AllDealsResponse_BestFareOfferAllDeals"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "best-fare-offers-all-deals"
        ],
        "summary": "Get the list of deals per origin",
        "description": "Used to find the list of deals per origin. Provides the complete list of deals proposed by AF/KL (the most attractive offers).",
        "operationId": "getBestFareOffersAllDeals",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The best-fare-offers all-deals request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllDealsRequest_BestFareOfferAllDeals"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AllDealsResponse_BestFareOfferAllDeals"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/upsell-offers": {
      "post": {
        "tags": [
          "upsell-v3"
        ],
        "summary": "Get upsell offers for a flight product",
        "description": "Provide the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffers",
        "parameters": [
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The upsell offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/upgrade-offers/miles": {
      "get": {
        "tags": [
          "upgrade-v3"
        ],
        "summary": "Get upgrade offers in miles for a booked flight product from hateoas link",
        "description": "Provides the upgrade offers for a booked flight product.Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body.",
        "operationId": "getUpgradeOffersInMilesFromHAL",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The upgrade in miles offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpgradeOffersWithMilesRequest_UpgradeOffersWithMilesV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeOfferResponse_UpgradeOffersWithMilesV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "upgrade-v3"
        ],
        "summary": "Get upgrade offers in miles for a booked flight product",
        "description": "Provides the upgrade offers for a booked flight product.Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body.",
        "operationId": "getUpgradeOffersInMiles",
        "requestBody": {
          "description": "The upgrade offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeOffersWithMilesRequest_UpgradeOffersWithMilesV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeOfferResponse_UpgradeOffersWithMilesV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/upgrade-offers/cash": {
      "get": {
        "tags": [
          "upgrade-v3"
        ],
        "summary": "Get upgrade offers in cash for a booked flight product from hateoas link",
        "description": "Provides the upgrade offers for a booked flight product.Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body.",
        "operationId": "getUpgradeOffersInCashFromHAL",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The upgrade in cash offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpgradeOffersWithCashRequest_UpgradeOffersWithCashV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeOfferResponse_UpgradeOffersWithCashV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "upgrade-v3"
        ],
        "summary": "Get upgrade offers in cash for a booked flight product",
        "description": "Provides the upgrade offers for a booked flight product.Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body.",
        "operationId": "getUpgradeOffersInCash",
        "requestBody": {
          "description": "The upgrade in cash offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeOffersWithCashRequest_UpgradeOffersWithCashV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeOfferResponse_UpgradeOffersWithCashV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/search-context/itinerary": {
      "post": {
        "tags": [
          "search-context-itinerary-v3"
        ],
        "summary": "Get the list of Cabins to be proposed",
        "description": "Provide the list of Cabins to be proposed. Validate the O&D, and provide the list of Cabins to be proposed.",
        "operationId": "createSearchContextItinerary",
        "requestBody": {
          "description": "The search-context itinerary request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchContextItineraryRequest_SearchContextItineraryV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextItineraryResponse_SearchContextItineraryV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/lowest-fare-offers": {
      "get": {
        "tags": [
          "lowest-fare-offers-v3"
        ],
        "summary": "Get lowest fare offers from hateoas link",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffersFromHAL",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The lowest fare offers request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LowestFareRequest_FareV3"
            }
          },
          {
            "name": "dateInterval",
            "in": "query",
            "description": "The expected date interval (overriding the one in the request)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The expected period of time to be considered when requesting lowest fares)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different periods of time that can be considered when requesting lowest fares.",
              "enum": [
                "DAY",
                "MONTH",
                "OVERALL"
              ]
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "negotiatedFareOnly",
            "in": "query",
            "description": "The expected type of fare (negotiated only, or all) (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "lowest-fare-offers-v3"
        ],
        "summary": "Get lowest fare offers",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffers",
        "requestBody": {
          "description": "The lowest fare offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowestFareRequest_FareV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-products/{id}/repriced-offer": {
      "post": {
        "tags": [
          "repriced-offer"
        ],
        "summary": "Reprices the offer by the flight product",
        "description": "Reprices a formerly returned offer.",
        "operationId": "getRepricedOffer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The cache key of the offer to reprice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The repriced offer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepricedOfferRequest_UpsellOfferV3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/calendar": {
      "get": {
        "tags": [
          "calendar-v3"
        ],
        "summary": "Provides the lowest price offers for a date from hateoas link",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendarFromHAL",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The calendar request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CalendarRequest_FareV3"
            }
          },
          {
            "name": "centralDateInterval",
            "in": "query",
            "description": "The expected central date interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dayInterval",
            "in": "query",
            "description": "The expected day interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar-v3"
        ],
        "summary": "Provides the lowest price offers for a date",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendar",
        "requestBody": {
          "description": "The calendar request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarRequest_FareV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/available-offers": {
      "get": {
        "tags": [
          "available-offers-v3"
        ],
        "summary": "Get available offers for bound from hateoas link",
        "description": "Provides the available flights with the lowest price based on certain (set of) date(s). Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffersFromHAL_1_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV3"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "withUpsellCabins",
            "in": "query",
            "description": "A flag to indicate if the upsell cabins should be included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "negotiatedFareOnly",
            "in": "query",
            "description": "The expected type of fare (negotiated only, or all) (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "departureDate",
            "in": "query",
            "description": "The expected departure date (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-v3"
        ],
        "summary": "Get available offers",
        "description": "Used to start a search for available offers. Provides the available flights with the lowest price based on certain (set of) date(s). Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffers",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/available-offers/self-connect": {
      "get": {
        "tags": [
          "available-offers-self-connect-v3"
        ],
        "summary": "Get available offers with Self-Connect from hateoas link",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnectFromHAL",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The Self-Connect available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV3"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin type (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-self-connect-v3"
        ],
        "summary": "Get available offers with Self-Connect",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnect",
        "requestBody": {
          "description": "The available-offers self-connect request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/available-offers/all": {
      "post": {
        "tags": [
          "available-offers-v3"
        ],
        "summary": "Get available offers with full bounds researching",
        "description": "Used to start a search for available offers. Provides the available flights with the lowest price based on requested dates : outbound + inbound flights (in contrary of available-Offers where only outbound or inbound flights are returned)",
        "operationId": "getAvailableOffers_1",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/upsell-offers": {
      "post": {
        "tags": [
          "upsell-v2"
        ],
        "summary": "Get upsell offers for a flight product",
        "description": "Provide the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffers_1",
        "parameters": [
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The upsell offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/search-context/itinerary": {
      "post": {
        "tags": [
          "search-context-itinerary-v2"
        ],
        "summary": "Get the list of Cabins to be proposed",
        "description": "Provide the list of Cabins to be proposed. Validate the O&D, and provide the list of Cabins to be proposed.",
        "operationId": "createSearchContextItinerary_1",
        "requestBody": {
          "description": "The search-context itinerary request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchContextItineraryRequest_SearchContextItineraryV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextItineraryResponse_SearchContextItineraryV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/lowest-fare-offers": {
      "get": {
        "tags": [
          "lowest-fare-offers-v2"
        ],
        "summary": "Get lowest fare offers from hateoas link",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffersFromHAL_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The lowest fare offers request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LowestFareRequest_FareV2"
            }
          },
          {
            "name": "dateInterval",
            "in": "query",
            "description": "The expected date interval (overriding the one in the request)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The expected period of time to be considered when requesting lowest fares)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different periods of time that can be considered when requesting lowest fares.",
              "enum": [
                "DAY",
                "MONTH",
                "OVERALL"
              ]
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "negotiatedFareOnly",
            "in": "query",
            "description": "The expected type of fare (negotiated only, or all) (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "lowest-fare-offers-v2"
        ],
        "summary": "Get lowest fare offers",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffers_1",
        "requestBody": {
          "description": "The lowest fare offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowestFareRequest_FareV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/calendar": {
      "get": {
        "tags": [
          "calendar-v2"
        ],
        "summary": "Provides lowest price offers for a date from hateoas link",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendarFromHAL_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The calendar request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CalendarRequest_FareV2"
            }
          },
          {
            "name": "centralDateInterval",
            "in": "query",
            "description": "The expected central date interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dayInterval",
            "in": "query",
            "description": "The expected day interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar-v2"
        ],
        "summary": "Provides the lowest price offers for a date",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendar_1",
        "requestBody": {
          "description": "The calendar request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarRequest_FareV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/available-offers": {
      "get": {
        "tags": [
          "available-offers-v2"
        ],
        "summary": "Get available offers for bound from hateoas link",
        "description": "Provides the available flights with the lowest price based on certain (set of) date(s). Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffersFromHAL_1_2",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV2"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "withUpsellCabins",
            "in": "query",
            "description": "A flag to indicate if the upsell cabins should be included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "negotiatedFareOnly",
            "in": "query",
            "description": "The expected type of fare (negotiated only, or all) (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "departureDate",
            "in": "query",
            "description": "The expected departure date (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-v2"
        ],
        "summary": "Get available offers",
        "description": "Used to start a search for available offers. Provides the available flights with the lowest price based on certain (set of) date(s). Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffers_2",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/available-offers/self-connect": {
      "get": {
        "tags": [
          "available-offers-self-connect-v2"
        ],
        "summary": "Get available offers with Self-Connect from hateoas link",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnectFromHAL_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The Self-Connect available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV2"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin type (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-self-connect-v2"
        ],
        "summary": "Get available offers with Self-Connect",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnect_1",
        "requestBody": {
          "description": "The available-offers Self-Connect request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/available-offers/all": {
      "post": {
        "tags": [
          "available-offers-v2"
        ],
        "summary": "Get available offers with full bounds researching",
        "description": "Used to start a search for available offers. Provides the available flights with the lowest price based on requested dates : outbound + inbound flights (in contrary of available-Offers where only outbound or inbound flights are returned)",
        "operationId": "getAvailableOffers_3",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/upsell-offers": {
      "post": {
        "tags": [
          "upsell-v1"
        ],
        "summary": "Get upsell offers for a flight product",
        "description": "Provide the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffers_2",
        "parameters": [
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The upsell offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/search-context/itinerary": {
      "post": {
        "tags": [
          "search-context-itinerary-v1"
        ],
        "summary": "Get the list of Cabins to be proposed",
        "description": "Provide the list of Cabins to be proposed. Validate the O&D, and provide the list of Cabins to be proposed.",
        "operationId": "createSearchContextItinerary_2",
        "requestBody": {
          "description": "The search-context itinerary request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchContextItineraryRequest_SearchContextItineraryV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchContextItineraryResponse_SearchContextItineraryV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/lowest-fare-offers": {
      "get": {
        "tags": [
          "lowest-fare-offers-v1"
        ],
        "summary": "Get lowest fare offers from hateoas link",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffersFromHAL_2",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The lowest fare offers request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LowestFareRequest_FareV1"
            }
          },
          {
            "name": "dateInterval",
            "in": "query",
            "description": "The expected date interval (overriding the one in the request)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The expected period of time to be considered when requesting lowest fares)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different periods of time that can be considered when requesting lowest fares.",
              "enum": [
                "DAY",
                "MONTH",
                "OVERALL"
              ]
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "lowest-fare-offers-v1"
        ],
        "summary": "Get lowest fare offers",
        "description": "Provides the available flight offers with the lowest fare based on a certain period (Overall, Months or Days). Use case flow can then be followed by the consumer by requesting the GET methods (for LowestFareOffers & AvailableOffers) supplied as HATEOAS link in the POST response body.",
        "operationId": "getLowestFareOffers_2",
        "requestBody": {
          "description": "The lowest fare offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LowestFareRequest_FareV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/calendar": {
      "get": {
        "tags": [
          "calendar-v1"
        ],
        "summary": "Provides the lowest price offers for a date from hateoas link",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendarFromHAL_2",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The calendar request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CalendarRequest_FareV1"
            }
          },
          {
            "name": "centralDateInterval",
            "in": "query",
            "description": "The expected central date interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dayInterval",
            "in": "query",
            "description": "The expected day interval (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar-v1"
        ],
        "summary": "Provides the lowest price offers for a date",
        "description": "Provides the lowest fare offers around a given central date, or during a given number of days.",
        "operationId": "getCalendar_2",
        "requestBody": {
          "description": "The calendar request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarRequest_FareV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/LowestFareResponse_FareV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/available-offers": {
      "get": {
        "tags": [
          "available-offers-v1"
        ],
        "summary": "Get available offers for bound from hateoas link",
        "description": "Provides the available flights with the lowest price based on certain (set of) date(s). Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffersFromHAL_1_3",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV1"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "departureDate",
            "in": "query",
            "description": "The expected departure date (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-v1"
        ],
        "summary": "Get available offers",
        "description": "Used to start a search for available offers. Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffers_4",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/available-offers/self-connect": {
      "get": {
        "tags": [
          "available-offers-self-connect-v1"
        ],
        "summary": "Get available offers with Self-Connect from hateoas link",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnectFromHAL_2",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The Self-Connect available offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableOffersRequest_OfferV1"
            }
          },
          {
            "name": "commercialCabin",
            "in": "query",
            "description": "The expected commercial cabin type (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "available-offers-self-connect-v1"
        ],
        "summary": "Get available offers with Self-Connect",
        "description": "Provides the Self-Connect available offers.",
        "operationId": "getAvailableOffersSelfConnect_2",
        "requestBody": {
          "description": "The available offers Self-Connect request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersSelfConnectResponse_OfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/available-offers/all": {
      "post": {
        "tags": [
          "available-offers-v1"
        ],
        "summary": "Get available offers with full bounds researching",
        "description": "Used to start a search for available offers. Use case flow can also be followed by the consumer by requesting the GET method supplied as HATEOAS link in the POST response body of LowestFareOffers.",
        "operationId": "getAvailableOffers_5",
        "requestBody": {
          "description": "The available offers request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest_OfferV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse_OfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-products/{id}/tax-breakdown": {
      "get": {
        "tags": [
          "tax-breakdown"
        ],
        "summary": "Get tax breakdown for a flight product from hateoas link",
        "description": "Provides the tax breakdown that applies to a specific flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "getTaxBreakDown",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The search criteria to be used to retrieve the flight offer and the price information.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PriceSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxBreakdownResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-products/{id}/price-details": {
      "get": {
        "tags": [
          "price-details"
        ],
        "summary": "Get price details for a flight product",
        "description": "Provides the price details that applies to a specific flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of a service returning flight products",
        "operationId": "getPriceDetails",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The flight product ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PriceSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/reference-data/deals": {
      "get": {
        "tags": [
          "best-fare-offers-reference-data"
        ],
        "summary": "Get the reference data for the best deals scope",
        "description": "Provides the reference data a consumer needs to support a customer to search for the deals. The reference data is typically requested at the start of the use case to know which data can be used in request.",
        "operationId": "getReferenceData",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow requested.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataDealsResponse_BestFareOfferReferenceData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-products/{id}/related-products": {
      "get": {
        "tags": [
          "related-products"
        ],
        "summary": "Get related products from hateoas link",
        "description": "The /related-products endpoint provides the related products (currently only Time to Think) for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of /available-offers & /upsell-offers.",
        "operationId": "getRelatedProducts",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "An encoded \"id\" that contains both the flightProduct id and the search criteria to replay the request when the flight product is not found in the cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device",
            "in": "query",
            "description": "The device used to book the time to think.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/{version}/flight-details/self-connect": {
      "get": {
        "tags": [
          "flight-details-self-connect"
        ],
        "summary": "Get flight details for Self-Connect. from hateoas link",
        "description": "Provides the details of the flight related to the connection for Self-Connect.",
        "operationId": "getFlightDetailsSelfConnectFromHAL",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "The version of the API targeted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "d",
            "in": "query",
            "description": "The FlightDetailsSearchCriteria",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FlightDetailsSearchCriteria_FlightDetailsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightDetailsResponse_FlightDetailsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/{id}/specific-remarks": {
      "get": {
        "tags": [
          "specific-remarks-v3"
        ],
        "summary": "Get specific remarks of the flights from hateoas link",
        "description": "Provides specific remarks of the flights.",
        "operationId": "getSpecificRemarks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The flight product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificRemarksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/upsell-offers/self-connect": {
      "get": {
        "tags": [
          "upsell-self-connect-v3"
        ],
        "summary": "Get upsell offers for Self-Connect from hateoas link",
        "description": "Provides the Self-Connect upsell offers based on a link that was returned in a previous call with SelfConnect.",
        "operationId": "getUpsellOffersSelfConnect",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The upsell Self-Connect request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersSelfConnectResponse_UpsellOfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v3"
        ],
        "summary": "Get ticket conditions for a reservation id from hateoas link",
        "description": "Provides the ticket conditions that match the fares of the provided reservationID parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Reservation API.",
        "operationId": "getTicketConditionsFromReservationId",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "The reservation id for which the ticket conditions are requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/ticket-conditions/{tripIdentifier}": {
      "get": {
        "tags": [
          "ticket-conditions-v3"
        ],
        "summary": "Get ticket conditions for a trip identifier from hateoas link",
        "description": "Provides the ticket conditions that match the provided query parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Order API.",
        "operationId": "getTicketConditionsByTripIdentifier",
        "parameters": [
          {
            "name": "tripIdentifier",
            "in": "path",
            "description": "The identifier of the trip.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow to consider when retrieving the ticket-conditions.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "accountCode",
            "in": "query",
            "description": "The account code to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticketedDate",
            "in": "query",
            "description": "The ticketed date to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "fareOption",
            "in": "query",
            "description": "The fare option to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different options to target a specific fare.",
              "enum": [
                "CORSICA",
                "FAMILY",
                "FLEXIBLE",
                "UM_OPTIONAL",
                "UM_MANDATORY"
              ]
            }
          },
          {
            "name": "productType",
            "in": "query",
            "description": "The product type to consider when retrieving the ticket-conditions, in case of subscriber card",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/reference-data": {
      "get": {
        "tags": [
          "reference-data-v3"
        ],
        "summary": "Get reference data",
        "description": "Provides the reference data a consumer needs to support a customer to search for offers. The reference data is typically requested at the start of the use case to know which data can be used in request.",
        "operationId": "getReferenceData_1",
        "parameters": [
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow requested.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "The id of the reservation, in case of rebooking.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "description": "The id of the connection.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeLocations",
            "in": "query",
            "description": "The trigger to exclude the location.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataResponse_ReferenceDataV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/quotation": {
      "get": {
        "tags": [
          "quotation-v3"
        ],
        "summary": "Get quotation from hateoas link",
        "description": "Used to Gets quotation based on a link that was returned in a previous call.",
        "operationId": "getQuotation",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The quotation request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/QuotationRequest_OfferV3"
            }
          },
          {
            "name": "sellingClasses",
            "in": "query",
            "description": "The quotation request.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationResponse_OfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-products/{id}/upsell-offers": {
      "get": {
        "tags": [
          "upsell-v3"
        ],
        "summary": "Get upsell offers for a flight product from hateoas link",
        "description": "Provides the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffersFromHAL",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The upsell offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV3"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The content expected in the display prices returned.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "ignoreCommercialCabinFilter",
            "in": "query",
            "description": "A flag to indicate that the commercial cabin should be ignored when filtering the upsell offers to return.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-products/{id}/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v3"
        ],
        "summary": "Get ticket conditions for a flight product from hateoas link",
        "description": "Provides the ticket conditions that apply to a specific flight product. It includes the number of Flying Blue miles that can be earned. Flying Blue is the loyalty program of Air France - KLM. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "getTicketConditions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The search criteria to retrieve the ticketConditions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-products/{id}/price-details": {
      "get": {
        "tags": [
          "price-details"
        ],
        "summary": "Get price details for a flight product",
        "description": "Provides the price details that applies to a specific flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of a service returning flight products",
        "operationId": "getPriceDetails_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The cached flight product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-products/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v3"
        ],
        "summary": "Get ticket conditions for a flight product from hateoas link",
        "description": "Provides the ticket conditions that apply to a specific flight product. It includes the number of Flying Blue miles that can be earned. Flying Blue is the loyalty program of Air France - KLM. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "getTicketConditions_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The search criteria to retrieve the ticketConditions.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TicketConditionsSearchCriteria_TicketConditionsV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v3/flight-details/{id}/{focusedConnection}": {
      "get": {
        "tags": [
          "flight-details-v3"
        ],
        "summary": "Get flight details from hateoas link",
        "description": "Provides the details of the flight related to the connection. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getFlightDetails",
        "parameters": [
          {
            "name": "focusedConnection",
            "in": "path",
            "description": "The focused connection's id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The flight product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightDetailsResponse_FlightDetailsV3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/upsell-offers/self-connect": {
      "get": {
        "tags": [
          "upsell-self-connect-v2"
        ],
        "summary": "Get upsell offers for Self-Connect from hateoas link",
        "description": "Provides the Self-Connect upsell offers based on a link that was returned in a previous call with Self-Connect.",
        "operationId": "getUpsellOffersSelfConnect_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The upsell Self-Connect request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersSelfConnectResponse_UpsellOfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v2"
        ],
        "summary": "Get ticket conditions for a reservation id from hateoas link",
        "description": "Provides the ticket conditions that match the fares of the provided reservationID parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Reservation API.",
        "operationId": "getTicketConditionsFromReservationId_1",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "The reservation id for which the ticket conditions are requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/ticket-conditions/{tripIdentifier}": {
      "get": {
        "tags": [
          "ticket-conditions-v2"
        ],
        "summary": "Get ticket conditions for a trip identifier from hateoas link",
        "description": "Provides the ticket conditions that match the provided query parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Order API.",
        "operationId": "getTicketConditionsByTripIdentifier_1",
        "parameters": [
          {
            "name": "tripIdentifier",
            "in": "path",
            "description": "The identifier of the trip.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow to consider when retrieving the ticket-conditions.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "accountCode",
            "in": "query",
            "description": "The account code to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticketedDate",
            "in": "query",
            "description": "The ticketed date to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "fareOption",
            "in": "query",
            "description": "The fare option to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different options to target a specific fare.",
              "enum": [
                "CORSICA",
                "FAMILY",
                "FLEXIBLE",
                "UM_OPTIONAL",
                "UM_MANDATORY"
              ]
            }
          },
          {
            "name": "productType",
            "in": "query",
            "description": "The product type to consider when retrieving the ticket-conditions, in case of subscriber card",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/reference-data": {
      "get": {
        "tags": [
          "reference-data-v2"
        ],
        "summary": "Get reference data",
        "description": "Provides the reference data a consumer needs to support a customer to search for offers. The reference data is typically requested at the start of the use case to know which data can be used in request.",
        "operationId": "getReferenceData_2",
        "parameters": [
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow requested.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "The id of the reservation, in case of rebooking.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "description": "The id of the connection.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationWithType",
            "in": "query",
            "description": "The expected location response type.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "excludeLocations",
            "in": "query",
            "description": "The trigger to exclude the location.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataResponse_ReferenceDataV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/quotation": {
      "get": {
        "tags": [
          "quotation-v2"
        ],
        "summary": "Get quotation from hateoas link",
        "description": "Used to Gets quotation based on a link that was returned in a previous call.",
        "operationId": "getQuotation_1",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The quotation request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/QuotationRequest_OfferV2"
            }
          },
          {
            "name": "sellingClasses",
            "in": "query",
            "description": "The quotation request.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotationResponse_OfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/flight-products/{id}/upsell-offers": {
      "get": {
        "tags": [
          "upsell-v2"
        ],
        "summary": "Get upsell offers for a flight product from hateoas link",
        "description": "Provides the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffersFromHAL_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The upsell offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV2"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The content expected in the display prices returned.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "ignoreCommercialCabinFilter",
            "in": "query",
            "description": "A flag to indicate that the commercial cabin should be ignored when filtering the upsell offers to return.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/flight-products/{id}/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v2"
        ],
        "summary": "Get ticket conditions for a flight product from hateoas link",
        "description": "Provides the ticket conditions that apply to a specific flight product. It includes the number of Flying Blue miles that can be earned. Flying Blue is the loyalty program of Air France - KLM. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "getTicketConditions_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The search criteria to retrieve the ticketConditions.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TicketConditionsSearchCriteria_TicketConditionsV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v2/flight-details/{id}/{focusedConnection}": {
      "get": {
        "tags": [
          "flight-details-v2"
        ],
        "summary": "Get flight details from hateoas link",
        "description": "Provides the details of the flight related to the connection. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getFlightDetails_1",
        "parameters": [
          {
            "name": "focusedConnection",
            "in": "path",
            "description": "The focused connection's id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The flight product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightDetailsResponse_FlightDetailsV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/upsell-offers/self-connect": {
      "get": {
        "tags": [
          "upsell-self-connect-v1"
        ],
        "summary": "Get upsell offers for Self-Connect from hateoas link",
        "description": "Provides the Self-Connect upsell offers based on a link that was returned in a previous call with Self-Connect.",
        "operationId": "getUpsellOffersSelfConnect_2",
        "parameters": [
          {
            "name": "d",
            "in": "query",
            "description": "The upsell offers Self-Connect request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersSelfConnectResponse_UpsellOfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v1"
        ],
        "summary": "Get ticket conditions for a reservation id from hateoas link",
        "description": "Provides the ticket conditions that match the fares of the provided reservationID parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Reservation API.",
        "operationId": "getTicketConditionsFromReservationId_2",
        "parameters": [
          {
            "name": "reservationId",
            "in": "query",
            "description": "The reservation id for which the ticket conditions are requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/ticket-conditions/{tripIdentifier}": {
      "get": {
        "tags": [
          "ticket-conditions-v1"
        ],
        "summary": "Get ticket conditions for a trip identifier from hateoas link",
        "description": "Provides the ticket conditions that match the provided query parameters. It includes the number of FB miles that can be earned. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of Order API.",
        "operationId": "getTicketConditionsByTripIdentifier_2",
        "parameters": [
          {
            "name": "tripIdentifier",
            "in": "path",
            "description": "The identifier of the trip.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow to consider when retrieving the ticket-conditions.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "accountCode",
            "in": "query",
            "description": "The account code to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticketedDate",
            "in": "query",
            "description": "The ticketed date to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "fareOption",
            "in": "query",
            "description": "The fare option to consider when retrieving the ticket-conditions",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different options to target a specific fare.",
              "enum": [
                "CORSICA",
                "FAMILY",
                "FLEXIBLE",
                "UM_OPTIONAL",
                "UM_MANDATORY"
              ]
            }
          },
          {
            "name": "productType",
            "in": "query",
            "description": "The product type to consider when retrieving the ticket-conditions, in case of subscriber card",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/reference-data": {
      "get": {
        "tags": [
          "reference-data-v1"
        ],
        "summary": "Get reference data",
        "description": "Provides the reference data a consumer needs to support a customer to search for offers. The reference data is typically requested at the start of the use case to know which data can be used in request.",
        "operationId": "getReferenceData_3",
        "parameters": [
          {
            "name": "bookingFlow",
            "in": "query",
            "description": "The booking flow requested.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
              "default": "LEISURE",
              "enum": [
                "REWARD",
                "CORPORATE",
                "LEISURE",
                "STAFF"
              ]
            }
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "The id of the reservation, in case of rebooking.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "description": "The id of the connection.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationWithType",
            "in": "query",
            "description": "The expected location response type.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "excludeLocations",
            "in": "query",
            "description": "The trigger to exclude the location.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceDataResponse_ReferenceDataV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/flight-products/{id}/upsell-offers": {
      "get": {
        "tags": [
          "upsell-v1"
        ],
        "summary": "Get upsell offers for a flight product from hateoas link",
        "description": "Provides the upsell offers for a selected flight product. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getUpsellOffersFromHAL_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The upsell offers request.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UpsellOffersRequest_UpsellOfferV1"
            }
          },
          {
            "name": "displayPriceContent",
            "in": "query",
            "description": "The expected content in the displayPrice fields (overriding the one in the request)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The different formats and content for the displayPrice value.",
              "enum": [
                "ALL_PAX",
                "ALL_PAX_ROUNDED"
              ]
            }
          },
          {
            "name": "ignoreCommercialCabinFilter",
            "in": "query",
            "description": "A flag to indicate if the commercial cabin should be ignored when filtering the offers (overriding the one in the request).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sourceRequest",
            "in": "query",
            "description": "The source of the request.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The request source.",
              "enum": [
                "MS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsellOffersResponse_UpsellOfferV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/flight-products/{id}/ticket-conditions": {
      "get": {
        "tags": [
          "ticket-conditions-v1"
        ],
        "summary": "Get ticket conditions for a flight product from hateoas link",
        "description": "Provides the ticket conditions that apply to a specific flight product. It includes the number of Flying Blue miles that can be earned. Flying Blue is the loyalty program of Air France - KLM. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers & UpsellOffers.",
        "operationId": "getTicketConditions_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The search criteria to retrieve the ticketConditions.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TicketConditionsSearchCriteria_TicketConditionsV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketConditionsResponse_TicketConditionsV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/v1/flight-details/{id}/{focusedConnection}": {
      "get": {
        "tags": [
          "flight-details-v1"
        ],
        "summary": "Get flight details from hateoas link",
        "description": "Provides the details of the flight related to the connection. Use case flow can be followed by the consumer by requesting the GET method supplied as HATEOAS link in the response body of AvailableOffers.",
        "operationId": "getFlightDetails_2",
        "parameters": [
          {
            "name": "focusedConnection",
            "in": "path",
            "description": "The focused connection's id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The flight product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/FlightDetailsResponse_FlightDetailsV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "root-resource"
        ],
        "summary": "Provides an HATEOAS link",
        "description": "Provides an HATEOAS link.",
        "operationId": "getRootResource_1",
        "parameters": [
          {
            "name": "X-Original-User-Agent",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "AF-KL/HostMonitorBot"
              ]
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "AF-KL/HostMonitorBot"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/MasheryResourceSupport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation failure, missing header, etc.)",
            "content": {
              "application/hal+json": {}
            }
          },
          "404": {
            "description": "Unknown service requested",
            "content": {
              "application/hal+json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/hal+json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/hal+json": {}
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/hal+json": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbnormalResponseDescriptor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "BaggageAllowancePerPassenger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggage allowance",
            "format": "int32",
            "example": 2
          },
          "type": {
            "type": "string",
            "description": "The type of baggage allowance",
            "example": "PIECES"
          }
        },
        "description": "Baggage Allowance per passenger."
      },
      "Cabin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "Carrier": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "EquipmentType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FlightOnTime": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "MarketingFlightResponse": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime"
          }
        },
        "description": "The marketing flight."
      },
      "Money": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the price item.",
        "example": 2
      },
      "OperatingFlight": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "Passenger": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "PriceCategory": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the category.",
            "example": "TAXES_FEES"
          },
          "label": {
            "type": "string",
            "description": "The label describing the category.",
            "example": "Taxes and fees"
          },
          "totals": {
            "type": "array",
            "description": "The total price amount for the category.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount"
            }
          },
          "priceComponents": {
            "type": "array",
            "description": "The different components of the price.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent"
            }
          }
        },
        "description": "Represents a category constituting a price."
      },
      "PriceComponent": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price component.",
            "example": "FARE"
          },
          "label": {
            "type": "string",
            "description": "The label of the price component.",
            "example": "Ticket(s)"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the price component.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger"
            }
          },
          "priceComponentBreakdown": {
            "type": "array",
            "description": "The amount of the price component.",
            "items": {
              "$ref": "#/components/schemas/PriceComponentBreakdownItem"
            }
          }
        },
        "description": "Represents the components of a price."
      },
      "PriceComponentBreakdownItem": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price item.",
            "example": "YR"
          },
          "nature": {
            "type": "string",
            "description": "The nature of the price item.",
            "example": "VA"
          },
          "label": {
            "type": "string",
            "description": "The label of the price item.",
            "example": "Sustainable Fuel Contribution"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger"
            }
          }
        },
        "description": "The breakdown of a price component."
      },
      "PriceDetails": {
        "type": "object",
        "properties": {
          "totals": {
            "type": "array",
            "description": "The total price.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount"
            }
          },
          "priceCategories": {
            "type": "array",
            "description": "The different categories constituting the price.",
            "items": {
              "$ref": "#/components/schemas/PriceCategory"
            }
          }
        },
        "description": "Represents the price-details of a flight offer."
      },
      "PricePerPassenger": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The id of the passenger.",
            "format": "int32"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          }
        },
        "description": "Represents the price per passenger."
      },
      "QuotationSegmentResponse": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "fareBasis": {
            "type": "string",
            "description": "The fare basis associated to the segment.",
            "example": "XA5VUIL1"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment.",
            "example": "X"
          },
          "cabin": {
            "$ref": "#/components/schemas/Cabin"
          },
          "baggageAllowancePerPassenger": {
            "type": "array",
            "description": "The baggage allowances per passenger on the segment.",
            "items": {
              "$ref": "#/components/schemas/BaggageAllowancePerPassenger"
            }
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents the details of a segment."
      },
      "RatingCategory": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "ShoppingCartFromQuotationRequest": {
        "required": [
          "bookingFlow"
        ],
        "type": "object",
        "properties": {
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails"
          },
          "quotationSegmentResponseList": {
            "type": "array",
            "description": "The segments.",
            "items": {
              "$ref": "#/components/schemas/QuotationSegmentResponse"
            }
          },
          "passengerList": {
            "type": "array",
            "description": "The list of passengers.",
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "staffInformation": {
            "$ref": "#/components/schemas/StaffInformation"
          },
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          }
        },
        "description": "Represents the request to the shopping cart when coming from the quotation."
      },
      "StaffInformation": {
        "type": "object",
        "properties": {
          "faringOptions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pnrType": {
            "type": "string"
          },
          "accountCode": {
            "type": "string"
          },
          "discountCode": {
            "type": "string"
          },
          "discountPTC": {
            "type": "string"
          },
          "segmentStatus": {
            "type": "string"
          }
        },
        "description": "The data related to the staff."
      },
      "State": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "Stopover": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "StopoverStation": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover"
          }
        },
        "description": "Represents a station stopover."
      },
      "TotalAmount": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the price.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger"
            }
          }
        },
        "description": "Represents the total price of a flight offer."
      },
      "OfferIdentifiers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The legacy id associated to the offer, usually corresponds to the resource store ID.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "resourceId": {
            "type": "string",
            "description": "The id of the offer in the resource store.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "offerId": {
            "type": "string",
            "description": "The id of the offer in the Create Offer.",
            "example": "38400000-8cf0-11bd-b23e-10b96e4ef00d"
          },
          "shopCreated": {
            "type": "boolean",
            "description": "A flag indicating if the offer was created in the CreateShop.",
            "example": false
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating)."
      },
      "LowestFaresByDestinationRequest": {
        "required": [
          "destinationCities",
          "origin"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destinationCities": {
            "type": "array",
            "description": "The cities of destination of the fares to retrieve.",
            "example": [
              "AMS",
              "PAR",
              "LON"
            ],
            "items": {
              "type": "string",
              "description": "The cities of destination of the fares to retrieve.",
              "example": "[\"AMS\",\"PAR\",\"LON\"]"
            }
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "fromDate": {
            "type": "string",
            "description": "The start date time of the interval.",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "description": "The end date time of the interval.",
            "format": "date-time"
          }
        },
        "description": "Represents a lowest fares by destination request."
      },
      "DateInterval": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this offer. It depends on the dateInterval asked in request."
      },
      "Disclaimer": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "LowestFare": {
        "required": [
          "price"
        ],
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval"
          },
          "departureDate": {
            "type": "string",
            "description": "Departure date of the trip.",
            "format": "date"
          },
          "returnDate": {
            "type": "string",
            "description": "Return date of the trip.",
            "format": "date"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "price": {
            "$ref": "#/components/schemas/PriceInformation"
          }
        },
        "description": "Represents the details of a lowest fare."
      },
      "LowestFaresByDestination": {
        "required": [
          "code",
          "flightProducts"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City"
          },
          "flightProducts": {
            "type": "array",
            "description": "The lowest fares for the destination.",
            "items": {
              "$ref": "#/components/schemas/LowestFare"
            }
          }
        },
        "description": "Represents the lowest fares for a given destination city."
      },
      "LowestFaresByDestinationResponse": {
        "required": [
          "destinationCities",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "The origin of the trip.",
            "example": "NCE"
          },
          "destinationCities": {
            "type": "array",
            "description": "The lowest fares per destinations.",
            "items": {
              "$ref": "#/components/schemas/LowestFaresByDestination"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer"
          }
        },
        "description": "Represents a lowest fares by destination response."
      },
      "PriceInformation": {
        "required": [
          "currency",
          "displayPrice",
          "displayType",
          "fare",
          "taxes",
          "totalPrice"
        ],
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge"
            }
          },
          "fare": {
            "$ref": "#/components/schemas/Money"
          },
          "taxes": {
            "$ref": "#/components/schemas/Money"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents the price information."
      },
      "Surcharge": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "SearchContextRequest": {
        "type": "object",
        "properties": {
          "contractNumber": {
            "type": "string",
            "description": "The contract number, if the user is logged with his contract (deprecated).",
            "nullable": true,
            "example": "912482130"
          },
          "reservationId": {
            "type": "string",
            "description": "The reservation id, in case of rebooking.",
            "nullable": true,
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          }
        },
        "description": "Represents a search-context request"
      },
      "CorporateContract": {
        "type": "object",
        "properties": {
          "contractKey": {
            "type": "integer",
            "description": "The key identifying the contract.",
            "format": "int32",
            "example": 3
          },
          "corporateEnvId": {
            "type": "integer",
            "description": "The id identifying the contract in the corporate environment of the user.",
            "format": "int64",
            "example": 2251583
          },
          "companyName": {
            "type": "string",
            "description": "The name of the company for which this contract has been subscribed for.",
            "example": "MY COMPANY"
          },
          "type": {
            "type": "string",
            "description": "The type of the contract.",
            "example": "BB"
          },
          "uccrId": {
            "type": "string",
            "description": "The User Corporate Contract Roles Id.",
            "example": "073083941521"
          },
          "isAbleToBookForOthers": {
            "type": "boolean",
            "writeOnly": true
          },
          "isClosed": {
            "type": "boolean",
            "writeOnly": true
          },
          "restrictions": {
            "uniqueItems": true,
            "type": "array",
            "description": "The restrictions applying to the contract.",
            "items": {
              "$ref": "#/components/schemas/CorporateContractRestriction"
            }
          },
          "possibleTravelersFromContract": {
            "uniqueItems": true,
            "type": "array",
            "description": "The set of possible travelers associated to this contract (present if enriched by CCAPI).",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler"
            }
          },
          "closed": {
            "type": "boolean"
          },
          "ableToBookForOthers": {
            "type": "boolean"
          }
        },
        "description": "Represents the details of a corporate contract."
      },
      "CorporateContractRestriction": {
        "type": "object",
        "properties": {
          "maxNumberOfPaxPerBooking": {
            "type": "integer",
            "description": "The maximum number of passengers that can be booked at the same time (i.e. per booking).",
            "format": "int32",
            "example": 9
          }
        },
        "description": "Represents the restrictions applying to a contract."
      },
      "PossibleTraveler": {
        "type": "object",
        "properties": {
          "travelerKey": {
            "type": "integer",
            "description": "The key identifying the traveler.",
            "format": "int32",
            "example": 0
          },
          "travelerSource": {
            "type": "string",
            "description": "The source of the traveler (eg: from the profile or a corporate contract).",
            "example": "PROFILE"
          },
          "isCustomer": {
            "type": "boolean",
            "writeOnly": true
          },
          "paxType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "title": {
            "type": "string",
            "description": "The title of the passenger.",
            "example": "MR"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the traveler.",
            "example": "Paul"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the traveler.",
            "example": "Dupond"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the traveler.",
            "format": "date",
            "example": 970358400000
          },
          "customer": {
            "type": "boolean"
          }
        },
        "description": "Represents a possible traveler associated to a customer's profile."
      },
      "SearchContextResponse": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "description": "The id of the profile. It identifies the temporary context created for the logged user search."
          },
          "corporateContracts": {
            "uniqueItems": true,
            "type": "array",
            "description": "The corporate contracts of the logged user.",
            "items": {
              "$ref": "#/components/schemas/CorporateContract"
            }
          },
          "subscriberContracts": {
            "uniqueItems": true,
            "type": "array",
            "description": "The subscriber contracts of the logged user.",
            "items": {
              "$ref": "#/components/schemas/SubscriberContract"
            }
          },
          "possibleTravelersFromProfile": {
            "uniqueItems": true,
            "type": "array",
            "description": "The possible travelers associated with the profile of the logged user.",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler"
            }
          },
          "profileIdExpiryDateTime": {
            "type": "string",
            "description": "The expiry date of the profile id.",
            "format": "date-time"
          },
          "incompleteData": {
            "type": "boolean",
            "description": "A flag indicating if the data returned is incomplete (can happen in case of temporary unavailable provider)."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Represents a search-context response."
      },
      "SubscriberContract": {
        "required": [
          "cardKey"
        ],
        "type": "object",
        "properties": {
          "cardKey": {
            "type": "integer",
            "description": "The key of the subscriber card.",
            "format": "int32",
            "example": 1
          },
          "productType": {
            "type": "string",
            "description": "The type of the product linked to the subscriber card.",
            "example": "RP"
          },
          "productSubType": {
            "type": "string",
            "description": "The sub-type of the product linked to the subscriber card.",
            "example": "FM"
          },
          "cardLabel": {
            "type": "string",
            "description": "The sub-type of the product linked to the subscriber card.",
            "example": "Subscriber card"
          },
          "contractNumber": {
            "type": "string",
            "description": "The number of the contract associated with the subscriber card.",
            "example": "000901049213"
          },
          "validityStartDate": {
            "type": "string",
            "description": "The validity start date of the contract associated with the subscriber card.",
            "format": "date-time",
            "example": 1490745600
          },
          "validityEndDate": {
            "type": "string",
            "description": "The validity end date of the contract associated with the subscriber card.",
            "format": "date-time",
            "example": 1585353600
          }
        },
        "description": "Represents a subscriber contract."
      },
      "Customer": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "OfferConnectionRequest": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "The requested connection."
      },
      "SearchContextPassengersRequest": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "passengers",
          "requestedConnections",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest"
            }
          }
        },
        "description": "Represents the search-context passengers request."
      },
      "SegmentRequest": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "TravelCompanion": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "SearchContextPassengersResponse": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "The list of passengers for which the flights are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          },
          "cardNeededForAllPax": {
            "type": "boolean",
            "description": "A flag indicating if a discount card is needed for al passengers (eg: in case of weekend fares retrieved)."
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "example": "CORSICA",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "fareOptionText": {
            "type": "string",
            "description": "The label related to the fare option.",
            "example": "<a href=\"___\">Learn more</a>"
          },
          "selfConnectDeeplink": {
            "$ref": "#/components/schemas/SelfConnectDeeplink"
          },
          "selfConnectText": {
            "type": "string",
            "description": "The label related to the self-connect link.",
            "example": "<a href=\"https://_.htm\">Learn more</a>"
          },
          "youthCardSubscriptionText": {
            "type": "string",
            "description": "The label related to the use of a youth card when retrieving the fares.",
            "example": "<a href=\"https://_.htm\">Learn more</a>"
          },
          "seniorCardSubscriptionText": {
            "type": "string",
            "description": "The label related to the use of a senior card when retrieving the fares.",
            "example": "<a href=\"https://_.htm\">Learn more</a>"
          },
          "warnings": {
            "type": "array",
            "description": "A list of warning descriptors in case of anomaly.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Represents the search-context passengers response."
      },
      "SelfConnectDeeplink": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the link.",
            "example": "https://smartconnect.airfrance.com/___"
          },
          "ttl": {
            "type": "integer",
            "description": "The Time To live.",
            "format": "int64",
            "example": 600000
          },
          "maxInvocations": {
            "type": "integer",
            "description": "The maximum number of invocations.",
            "format": "int32",
            "example": 5
          }
        },
        "description": "Represents an Aviato deeplink response."
      },
      "AircraftOwner": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "freeText": {
            "type": "string"
          },
          "codeLabel": {
            "type": "string"
          }
        }
      },
      "ConnectionIdentifier": {
        "type": "object",
        "properties": {
          "segmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentIdentifier"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/Stopover"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The connection identifiers of the flight product resulting from the search."
      },
      "Equipment": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "acvCode": {
            "type": "string"
          },
          "bus": {
            "type": "boolean"
          },
          "limousine": {
            "type": "boolean"
          },
          "train": {
            "type": "boolean"
          },
          "aircraft": {
            "type": "boolean"
          }
        }
      },
      "FlightCode": {
        "type": "object",
        "properties": {
          "marketingCarrier": {
            "$ref": "#/components/schemas/MarketingCarrier"
          },
          "flightNumber": {
            "type": "string"
          },
          "operationalSuffix": {
            "type": "string"
          },
          "wholeFlightCode": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          }
        }
      },
      "FlyingBlueCard": {
        "type": "object",
        "properties": {
          "cin": {
            "type": "integer",
            "format": "int64"
          },
          "milesBalance": {
            "type": "integer",
            "format": "int64"
          },
          "tierLevelLabel": {
            "type": "string"
          },
          "tierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "tierAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TierAttribute"
            }
          },
          "warning": {
            "$ref": "#/components/schemas/Warning"
          }
        }
      },
      "MailMySearchSearchCriteria": {
        "type": "object",
        "properties": {
          "connectionIdentifiers": {
            "type": "array",
            "description": "The connection identifiers of the flight product resulting from the search.",
            "items": {
              "$ref": "#/components/schemas/ConnectionIdentifier"
            }
          },
          "passengerList": {
            "$ref": "#/components/schemas/PassengerList"
          }
        },
        "description": "The search-criteria for mail-my-search."
      },
      "MarketingCarrier": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "PassengerList": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds"
            }
          },
          "primaryPassenger": {
            "$ref": "#/components/schemas/Passenger"
          },
          "adultOnly": {
            "type": "boolean"
          },
          "passengersByPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PassengerWithSpecificIds"
              }
            }
          },
          "orderedPassengerWithSpecificIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds"
            }
          },
          "highestTierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "primaryPassengerTypeCode": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "passengerTypeCodesSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "atLeastOnePrimaryPassenger": {
            "type": "boolean"
          }
        },
        "description": "The list of passengers requested."
      },
      "PassengerWithSpecificIds": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "umOptional": {
            "type": "boolean"
          },
          "umQuota": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "corporateAccountReference": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard"
          },
          "subscriberContract": {
            "$ref": "#/components/schemas/SubscriberContract"
          },
          "amadeusTatooRef": {
            "type": "integer",
            "format": "int32"
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          },
          "fareInformativePricingId": {
            "type": "integer",
            "format": "int32"
          },
          "tierLevelCodeAsString": {
            "type": "string"
          }
        }
      },
      "SegmentIdentifier": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          },
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner"
          }
        }
      },
      "TierAttribute": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "Warning": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "UserInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The first name of the user.",
            "example": "Alexandre"
          },
          "surname": {
            "type": "string",
            "description": "The last name of the user.",
            "example": "Dupond"
          },
          "email": {
            "pattern": "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$",
            "type": "string",
            "description": "The email of the user.",
            "example": "alexandre.dupond@gmail.com"
          },
          "fullName": {
            "type": "string"
          }
        },
        "description": "The user information needed to send an email to the user."
      },
      "AirlineFilter_FlightsAvailability": {
        "type": "object",
        "properties": {
          "marketedBy": {
            "type": "array",
            "description": "The accepted marketing airlines filter.",
            "items": {
              "$ref": "#/components/schemas/MarketingCarrierFilter_FlightsAvailability"
            }
          }
        },
        "description": "Represents a filter on the airlines."
      },
      "BasicConnectionRequest_FlightsAvailability": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightsAvailability"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "FlightsAvailabilityFilter_FlightsAvailability": {
        "type": "object",
        "properties": {
          "maximumNumberOfSegments": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum number of segments expected.",
            "format": "int32"
          },
          "withCancelledSegments": {
            "type": "boolean",
            "description": "A flag indicating if cancelled segments must be accepted."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "airlines": {
            "$ref": "#/components/schemas/AirlineFilter_FlightsAvailability"
          },
          "pricingProduct": {
            "uniqueItems": true,
            "type": "array",
            "description": "The accepted pricing products.",
            "items": {
              "type": "string",
              "description": "The accepted pricing products."
            }
          }
        },
        "description": "Represents a filter for the available flights request."
      },
      "FlightsAvailabilityRequest_FlightsAvailability": {
        "required": [
          "bookingFlow",
          "connection",
          "searchType",
          "sortType"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "searchType": {
            "type": "string",
            "description": "The type of search requested.",
            "example": "AN",
            "enum": [
              "AN",
              "SN"
            ]
          },
          "sortType": {
            "type": "string",
            "description": "The type of sorting requested.",
            "example": "DEPARTURE_TIME",
            "enum": [
              "DEPARTURE_TIME",
              "ARRIVAL_TIME",
              "NEUTRAL_ORDER",
              "ELAPSED_TIME",
              "GROUP_AVAILABILITY",
              "NEGOTIATED_SPACE",
              "FLIGHT_SPECIFIC"
            ]
          },
          "connection": {
            "$ref": "#/components/schemas/BasicConnectionRequest_FlightsAvailability"
          },
          "passengers": {
            "type": "array",
            "description": "The list of passengers for which the flights are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FlightsAvailability"
            }
          },
          "filterBy": {
            "$ref": "#/components/schemas/FlightsAvailabilityFilter_FlightsAvailability"
          },
          "accountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "pnrType": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The type of PNR.",
            "example": "R1"
          },
          "discountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "A discount code."
          }
        },
        "description": "Represents an available flights request."
      },
      "Link_FlightsAvailability": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "MarketingCarrierFilter_FlightsAvailability": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "pattern": "[A-Z0-9]{2,5}",
            "type": "string",
            "description": "The code of the marketing carrier."
          },
          "operatedBy": {
            "type": "array",
            "description": "The accepted operating airlines.",
            "items": {
              "$ref": "#/components/schemas/OperatingAirlineFilter_FlightsAvailability"
            }
          }
        },
        "description": "Represents a filter on the marketing carriers."
      },
      "OperatingAirlineFilter_FlightsAvailability": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "pattern": "[A-Z0-9]{2,5}",
            "type": "string",
            "description": "The code of the operating airline."
          },
          "withOptions": {
            "type": "array",
            "description": "The set of operating airline options to apply.",
            "items": {
              "type": "string",
              "description": "Represents the different filtering options on the operating airlines.",
              "enum": [
                "BLOCK_SPACE",
                "FREE_FLOW",
                "FRANCHISED"
              ]
            }
          }
        },
        "description": "Represents a filter on the operating airlines."
      },
      "Passenger_FlightsAvailability": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "Carrier_FlightsAvailability": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          }
        },
        "description": "Represents a carrier."
      },
      "City_FlightsAvailability": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FlightsAvailability"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "DateInterval_FlightsAvailability": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection. It depends on the dateInterval asked in request."
      },
      "FlightAvailabilityConnectionResponse_FlightsAvailability": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FlightsAvailability"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightsAvailability"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightsAvailability"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightsAvailability"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_FlightsAvailability"
            }
          }
        },
        "description": "Represents a connection of an available flight."
      },
      "FlightAvailabilityResponse_FlightsAvailability": {
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "description": "The connections of the flight.",
            "items": {
              "$ref": "#/components/schemas/FlightAvailabilityConnectionResponse_FlightsAvailability"
            }
          }
        },
        "description": "Represents an available flights response."
      },
      "MarketingFlightResponse_FlightsAvailability": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightsAvailability"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_FlightsAvailability"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_FlightsAvailability": {
        "type": "object",
        "properties": {
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightsAvailability"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "SegmentResponse_FlightsAvailability": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightsAvailability"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_FlightsAvailability"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightsAvailability"
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_FlightsAvailability": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FlightsAvailability": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FlightsAvailability"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_FlightsAvailability": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FlightsAvailability"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FlightsAvailability"
          }
        },
        "description": "Represents a station stopover."
      },
      "Stopover_FlightsAvailability": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "ShoppingCartRequest": {
        "type": "object",
        "properties": {
          "flightProductId": {
            "type": "string"
          },
          "device": {
            "type": "string",
            "description": "The type of device used to retrieve the offers.",
            "example": "DESKTOP",
            "enum": [
              "DESKTOP",
              "MOBILE",
              "MOBILE_PAID_TTT"
            ]
          },
          "timeToThinkOptionType": {
            "type": "string",
            "description": "The type of time to think option.",
            "example": "TTT",
            "enum": [
              "TTT",
              "TTL"
            ]
          }
        },
        "description": "Represents a shopping-cart request."
      },
      "BasicConnectionRequest_BestFareOffer": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOffer"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "BestFareFilter_BestFareOffer": {
        "type": "object",
        "properties": {
          "maximumNumberOfSegments": {
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of segments expected.",
            "format": "int32",
            "example": 2
          },
          "marketingCarriers": {
            "type": "array",
            "description": "The marketing carriers accepted.",
            "example": [
              "ALL",
              "AF",
              "KL"
            ],
            "items": {
              "type": "string",
              "description": "The marketing carriers accepted.",
              "example": "[\"ALL\",\"AF\",\"KL\"]"
            }
          }
        },
        "description": "Represents a filter to be used to filter the best fare offers retrieved."
      },
      "BestFareOffersRequest_BestFareOffer": {
        "required": [
          "bookingFlow",
          "commercialCabin",
          "commercialCabins",
          "customer",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_BestFareOffer"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_BestFareOffer"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_BestFareOffer"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The request connections.",
            "items": {
              "$ref": "#/components/schemas/BasicConnectionRequest_BestFareOffer"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/BestFareFilter_BestFareOffer"
          },
          "marketingCarrierCodeList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maximumNumberOfSegments": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents a best fare offers request."
      },
      "Customer_BestFareOffer": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_BestFareOffer"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_BestFareOffer": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The requested date interval.",
        "example": "2019-10-23/2020-06-30"
      },
      "Link_BestFareOffer": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Passenger_BestFareOffer": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "TravelCompanion_BestFareOffer": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "BestFareOffer_BestFareOffer": {
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "description": "Connection specification for the best fare offer.",
            "items": {
              "$ref": "#/components/schemas/BestFareOffersConnection_BestFareOffer"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_BestFareOffer"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_BestFareOffer"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_BestFareOffer"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOffer"
            }
          }
        },
        "description": "Represents a best offer."
      },
      "BestFareOffersConnection_BestFareOffer": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Location_BestFareOffer"
          },
          "destination": {
            "$ref": "#/components/schemas/Location_BestFareOffer"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "promoFare": {
            "type": "boolean",
            "description": "Indicates whether or not the returned fare is a promo",
            "example": true
          }
        },
        "description": "Represents a best fare offers connection."
      },
      "BestFareOffersResponse_BestFareOffer": {
        "type": "object",
        "properties": {
          "bestOffers": {
            "type": "array",
            "description": "List of best fare offers available.",
            "items": {
              "$ref": "#/components/schemas/BestFareOffer_BestFareOffer"
            }
          }
        },
        "description": "response of the /best-fare-offers/feed endpoint."
      },
      "Location_BestFareOffer": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location",
            "example": "AMS"
          },
          "type": {
            "type": "string",
            "description": "The type of the Location",
            "example": "AIRPORT",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          }
        },
        "description": "Represents a location",
        "example": {
          "code": "CDG",
          "type": "AIRPORT"
        }
      },
      "PricePerPassengerType_BestFareOffer": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOffer"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_BestFareOffer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOffer"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_BestFareOffer": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOffer"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_BestFareOffer"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_BestFareOffer"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "Surcharge_BestFareOffer": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "TopDealsRequest_BestFareOfferTopDeals": {
        "required": [
          "origin"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency in which prices are wanted.",
            "example": "EUR, USD"
          }
        },
        "description": "Represents the top-deals request."
      },
      "DateIntervalView_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "DealCabin_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the commercial cabin.",
            "example": "Economy"
          }
        },
        "description": "Represents the cabin of a deal."
      },
      "DealTripType_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Represents the different types of trip (one way, round trip etc.).",
            "example": "OW",
            "enum": [
              "ALL",
              "RT",
              "OW"
            ]
          },
          "label": {
            "type": "string",
            "description": "The trip type label.",
            "example": "One-way"
          }
        },
        "description": "Represents the type of trip of a deal."
      },
      "Disclaimer_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "Link_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationDeal_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          },
          "city": {
            "$ref": "#/components/schemas/Location_BestFareOfferTopDeals"
          },
          "country": {
            "$ref": "#/components/schemas/Location_BestFareOfferTopDeals"
          }
        },
        "description": "Represents the location of a deal."
      },
      "Location_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          }
        },
        "description": "Represents a location used in a trip."
      },
      "Money_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        }
      },
      "TopDealPriceByCabin_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/DealCabin_BestFareOfferTopDeals"
          },
          "byTripType": {
            "type": "array",
            "description": "The top-deals grouped by trip type.",
            "items": {
              "$ref": "#/components/schemas/TopDealPriceByTripType_BestFareOfferTopDeals"
            }
          }
        },
        "description": "Represents the top-deals grouped by cabin."
      },
      "TopDealPriceByTripType_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "tripType": {
            "$ref": "#/components/schemas/DealTripType_BestFareOfferTopDeals"
          },
          "fareType": {
            "type": "string",
            "description": "The types of fares that can be asked in a Best fare offers call.",
            "writeOnly": true,
            "enum": [
              "LOWEST_FARE",
              "PROMO_FARE",
              "LOWEST_PROMO_FARE"
            ]
          },
          "displayPicture": {
            "type": "boolean",
            "writeOnly": true
          },
          "bestPrice": {
            "$ref": "#/components/schemas/Money_BestFareOfferTopDeals"
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_BestFareOfferTopDeals"
          },
          "departureDate": {
            "type": "string",
            "description": "The departure date of the deals.",
            "format": "date"
          },
          "returnDate": {
            "type": "string",
            "description": "The return date of the deals.",
            "format": "date"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOfferTopDeals"
            }
          }
        },
        "description": "Represents the top-deals grouped by trip type."
      },
      "TopDealPrices_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "byCabin": {
            "type": "array",
            "description": "The top-deal prices per cabin.",
            "items": {
              "$ref": "#/components/schemas/TopDealPriceByCabin_BestFareOfferTopDeals"
            }
          }
        },
        "description": "Represents the different prices for a deal."
      },
      "TopDeal_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferTopDeals"
          },
          "prices": {
            "$ref": "#/components/schemas/TopDealPrices_BestFareOfferTopDeals"
          }
        },
        "description": "Represents a top-deal."
      },
      "TopDealsByZone_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "destinationZone": {
            "$ref": "#/components/schemas/Zone_BestFareOfferTopDeals"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the deals.",
            "format": "int32"
          },
          "deals": {
            "type": "array",
            "description": "The top deals linked to the zone of destination.",
            "items": {
              "$ref": "#/components/schemas/TopDeal_BestFareOfferTopDeals"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOfferTopDeals"
            }
          }
        },
        "description": "Represents the top-deals grouped by zone of destination."
      },
      "TopDealsResponse_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "The market for which the deals are defined.",
            "example": "FR"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the pricing of the deals.",
            "example": "EUR"
          },
          "origin": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferTopDeals"
          },
          "zones": {
            "type": "array",
            "description": "The top deals grouped by zone.",
            "items": {
              "$ref": "#/components/schemas/TopDealsByZone_BestFareOfferTopDeals"
            }
          },
          "featuredDeals": {
            "type": "array",
            "description": "The featured deals",
            "items": {
              "$ref": "#/components/schemas/TopDeal_BestFareOfferTopDeals"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_BestFareOfferTopDeals"
          }
        },
        "description": "Represents the response of the top-deals end-point."
      },
      "Zone_BestFareOfferTopDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the zone.",
            "example": "AFRIO"
          },
          "label": {
            "type": "string",
            "description": "The label of the zone.",
            "example": "Africa and Indian Ocean"
          }
        },
        "description": "Represents a geographical zone of the world."
      },
      "BasicConnectionRequest_BestFareOfferFeed": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOfferFeed"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "BestFareFilter_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "maximumNumberOfSegments": {
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of segments expected.",
            "format": "int32",
            "example": 2
          },
          "marketingCarriers": {
            "type": "array",
            "description": "The marketing carriers accepted.",
            "example": [
              "ALL",
              "AF",
              "KL"
            ],
            "items": {
              "type": "string",
              "description": "The marketing carriers accepted.",
              "example": "[\"ALL\",\"AF\",\"KL\"]"
            }
          }
        },
        "description": "Represents a filter to be used to filter the best fare offers retrieved."
      },
      "BestFareOffersFeedRequest_BestFareOfferFeed": {
        "required": [
          "bookingFlow",
          "commercialCabin",
          "commercialCabins",
          "customer",
          "dateInterval",
          "passengers",
          "promoType",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_BestFareOfferFeed"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_BestFareOfferFeed"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "promoType": {
            "type": "string",
            "description": "The types of fares that can be asked in a Best fare offers call.",
            "example": "PROMO_FARE",
            "enum": [
              "LOWEST_FARE",
              "PROMO_FARE",
              "LOWEST_PROMO_FARE"
            ]
          },
          "fareBasis": {
            "type": "string",
            "description": "The fareBasis to be searched. Cannot be null if the requested promo type is [PROMO_FARE]."
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_BestFareOfferFeed"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicConnectionRequest_BestFareOfferFeed"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/BestFareFilter_BestFareOfferFeed"
          },
          "marketingCarrierCodeList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maximumNumberOfSegments": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "The Best fare offers feed request."
      },
      "Customer_BestFareOfferFeed": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_BestFareOfferFeed"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The requested date interval",
        "example": "2019-10-23/2020-06-30"
      },
      "Link_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Passenger_BestFareOfferFeed": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "TravelCompanion_BestFareOfferFeed": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "BestFareOfferFeed_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_BestFareOfferFeed"
          },
          "connections": {
            "type": "array",
            "description": "Connection specification for the best fare offer.",
            "items": {
              "$ref": "#/components/schemas/BestFareOffersFeedConnection_BestFareOfferFeed"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_BestFareOfferFeed"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_BestFareOfferFeed"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_BestFareOfferFeed"
          },
          "promoFare": {
            "type": "boolean",
            "description": "Indicates whether or not the returned fare is a promo",
            "example": true
          },
          "dataReference": {
            "type": "string",
            "description": "Data reference is a placeholder storing several details regarding the offer."
          },
          "expiryDateTime": {
            "type": "string",
            "description": "It provides the GMT date and time until when the offer could be cached.",
            "format": "date-time"
          }
        },
        "description": "Represents a best offer."
      },
      "BestFareOffersFeedConnection_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "travelDateIntervals": {
            "type": "array",
            "description": "The list of travel date intervals when the connection is available.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_BestFareOfferFeed"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/Location_BestFareOfferFeed"
          },
          "destination": {
            "$ref": "#/components/schemas/Location_BestFareOfferFeed"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "fareBasis": {
            "type": "string",
            "description": "The fare basis associated to the connection.",
            "example": "XA5VUIL1"
          }
        },
        "description": "Represents a best offers feed connection."
      },
      "BestFareOffersFeedResponse_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "bestOffers": {
            "type": "array",
            "description": "List of best fare offers available.",
            "items": {
              "$ref": "#/components/schemas/BestFareOfferFeed_BestFareOfferFeed"
            }
          }
        },
        "description": "response of the /best-fare-offers/feed endpoint."
      },
      "DateIntervalView_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Location_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location",
            "example": "AMS"
          },
          "type": {
            "type": "string",
            "description": "The type of the Location",
            "example": "AIRPORT",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          }
        },
        "description": "Represents a location",
        "example": {
          "code": "CDG",
          "type": "AIRPORT"
        }
      },
      "PricePerPassengerType_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOfferFeed"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOfferFeed"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_BestFareOfferFeed"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_BestFareOfferFeed"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_BestFareOfferFeed"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "Surcharge_BestFareOfferFeed": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "DealsNumberRequest": {
        "required": [
          "origin"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          }
        },
        "description": "Represents a request to obtain the number of deals for a specific origin."
      },
      "DealsNumberByCabin": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "byTripType": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The number of deals by type of trip.",
              "format": "int32"
            },
            "description": "The number of deals by type of trip."
          }
        },
        "description": "Represents the number of deals by cabin."
      },
      "DealsNumberByZone": {
        "type": "object",
        "properties": {
          "destinationZone": {
            "$ref": "#/components/schemas/Zone"
          },
          "byCabin": {
            "type": "array",
            "description": "The number of deals by cabin.",
            "items": {
              "$ref": "#/components/schemas/DealsNumberByCabin"
            }
          }
        },
        "description": "Represents the number of deals by zone."
      },
      "DealsNumberResponse": {
        "type": "object",
        "properties": {
          "dealsNumberByZone": {
            "type": "array",
            "description": "The number of deals by zone.",
            "items": {
              "$ref": "#/components/schemas/DealsNumberByZone"
            }
          }
        },
        "description": "Represents the response to the request to obtain the number of deals for a specific origin."
      },
      "Zone": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the zone.",
            "example": "AFRIO"
          },
          "label": {
            "type": "string",
            "description": "The label of the zone.",
            "example": "Africa and Indian Ocean"
          }
        },
        "description": "Represents a geographical zone of the world."
      },
      "AllDealsRequest_BestFareOfferAllDeals": {
        "required": [
          "origin",
          "zoneCode"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency in which prices are wanted.",
            "example": "EUR"
          },
          "zoneCode": {
            "type": "string",
            "description": "The code of the zone for which deals are wanted.",
            "example": "EUR"
          }
        },
        "description": "Represents a Best Fare offers all deals request."
      },
      "AllDealsResponse_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "The market of the deals.",
            "example": "FR"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the prices returned.",
            "example": "EUR"
          },
          "origin": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferAllDeals"
          },
          "destinationZone": {
            "$ref": "#/components/schemas/Zone_BestFareOfferAllDeals"
          },
          "deals": {
            "type": "array",
            "description": "The deals requested.",
            "items": {
              "$ref": "#/components/schemas/Deal_BestFareOfferAllDeals"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_BestFareOfferAllDeals"
          }
        },
        "description": "Represents a Best Fare offers all deals response."
      },
      "DateIntervalView_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "DealCabin_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the commercial cabin.",
            "example": "Economy"
          }
        },
        "description": "Represents the cabin of a deal."
      },
      "DealPriceByCabin_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/DealCabin_BestFareOfferAllDeals"
          },
          "byTripType": {
            "type": "array",
            "description": "The different deals offered by trip type.",
            "items": {
              "$ref": "#/components/schemas/DealPriceByTripType_BestFareOfferAllDeals"
            }
          }
        },
        "description": "Represents the prices proposed for a deal for a specific cabin. A deal could be proposed as a RT or an OW fare. It could also be proposed for different cabins."
      },
      "DealPriceByTripType_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "tripType": {
            "$ref": "#/components/schemas/DealTripType_BestFareOfferAllDeals"
          },
          "fareType": {
            "type": "string",
            "description": "The types of fares that can be asked in a Best fare offers call.",
            "writeOnly": true,
            "enum": [
              "LOWEST_FARE",
              "PROMO_FARE",
              "LOWEST_PROMO_FARE"
            ]
          },
          "displayPicture": {
            "type": "boolean",
            "writeOnly": true
          },
          "bestPrice": {
            "$ref": "#/components/schemas/Money_BestFareOfferAllDeals"
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_BestFareOfferAllDeals"
          },
          "tripDuration": {
            "$ref": "#/components/schemas/TripDurationBounds_BestFareOfferAllDeals"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "returnDate": {
            "type": "string",
            "format": "date"
          },
          "travelDateIntervalsByConnection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelDateIntervalsByConnection_BestFareOfferAllDeals"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_BestFareOfferAllDeals"
            }
          }
        },
        "description": "The different deals offered by trip type."
      },
      "DealPrices_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "byCabin": {
            "type": "array",
            "description": "The different cabins offered for the deal.",
            "items": {
              "$ref": "#/components/schemas/DealPriceByCabin_BestFareOfferAllDeals"
            }
          }
        },
        "description": "Represents the different prices for a deal. A deal could be proposed for different cabins."
      },
      "DealTripType_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Represents the different types of trip (one way, round trip etc.).",
            "example": "OW",
            "enum": [
              "ALL",
              "RT",
              "OW"
            ]
          },
          "label": {
            "type": "string",
            "description": "The trip type label.",
            "example": "One-way"
          }
        },
        "description": "Represents the type of trip of a deal."
      },
      "Deal_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferAllDeals"
          },
          "prices": {
            "$ref": "#/components/schemas/DealPrices_BestFareOfferAllDeals"
          }
        },
        "description": "Represents a deal. It could be a promo, or simply the lowest fare available."
      },
      "Disclaimer_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "Link_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationDeal_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          },
          "city": {
            "$ref": "#/components/schemas/Location_BestFareOfferAllDeals"
          },
          "country": {
            "$ref": "#/components/schemas/Location_BestFareOfferAllDeals"
          }
        },
        "description": "Represents the location of a deal."
      },
      "Location_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          }
        },
        "description": "Represents a location used in a trip."
      },
      "Money_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        }
      },
      "StayDuration_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The duration value in the given unit.",
            "format": "int32"
          },
          "stayUnit": {
            "type": "string",
            "description": "The time unit of the duration.",
            "enum": [
              "MINUTE",
              "DAY",
              "WEEK",
              "MONTH",
              "NIGHT",
              "HOUR"
            ]
          }
        },
        "description": "Represents a duration of stay in a given location."
      },
      "TravelDateIntervalsByConnection_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "connection": {
            "type": "integer",
            "description": "The index of the connection.",
            "format": "int32",
            "example": 0
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "The travel date intervals.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_BestFareOfferAllDeals"
            }
          }
        },
        "description": "Represents the travel date intervals defined for a connection."
      },
      "TripDurationBounds_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "minimumStay": {
            "$ref": "#/components/schemas/StayDuration_BestFareOfferAllDeals"
          },
          "maximumStay": {
            "$ref": "#/components/schemas/StayDuration_BestFareOfferAllDeals"
          }
        },
        "description": "The trip duration bounds."
      },
      "Zone_BestFareOfferAllDeals": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the zone.",
            "example": "AFRIO"
          },
          "label": {
            "type": "string",
            "description": "The label of the zone.",
            "example": "Africa and Indian Ocean"
          }
        },
        "description": "Represents a geographical zone of the world."
      },
      "Customer_UpsellOfferV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_UpsellOfferV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_UpsellOfferV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_UpsellOfferV3"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV3"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_UpsellOfferV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_UpsellOfferV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_UpsellOfferV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "UpsellOffersRequest_UpsellOfferV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_UpsellOfferV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_UpsellOfferV3"
            }
          },
          "fixedFlights": {
            "type": "boolean",
            "description": "A flag to indicate that the flights returned in the response connections must be the same as those in the request."
          },
          "ignoreCommercialCabinFilter": {
            "type": "boolean",
            "description": "A flag to indicate that the commercial cabin should be ignored when filtering the upsell offers to return."
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an upsell offers request."
      },
      "AbnormalResponseDescriptor_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "Carrier_UpsellOfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          }
        },
        "description": "Represents a carrier."
      },
      "City_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_UpsellOfferV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_UpsellOfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "CommercialText_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionV2_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the type of the condition.",
            "enum": [
              "SKY_PRIORITY",
              "GO_SHOW",
              "NO_SHOW",
              "NO_SHOW_CHANGE",
              "NO_SHOW_CANCEL",
              "CARRIER_FEES",
              "FREE_SEAT_SELECTION",
              "SEAT_SELECTION",
              "CANCEL",
              "CANCEL_COVID",
              "CHANGE",
              "HAND_BAGGAGE_ALLOWANCE",
              "MERGED_BAGGAGE_ALLOWANCE",
              "FLYING_BLUE_MILES_XP",
              "UM_ATTRIBUTE",
              "YOUTH_PASS_ATTRIBUTE",
              "STUDENT_ATTRIBUTE",
              "SENIOR_PASS_ATTRIBUTE",
              "DEDICATED_OVERHEAD_BIN_SPACE_ATTRIBUTE",
              "DEPLANE_QUICKLY_ATTRIBUTE",
              "HAND_BAGGAGE_ALLOWANCE_MILES_UPGRADE",
              "SKY_PRIORITY_MILES_UPGRADE",
              "CHANGE_CONDITION_MILES_UPGRADE",
              "CANCEL_CONDITION_MILES_UPGRADE",
              "LOUNGE_ACCESS",
              "LOUNGE_CONDITION_MILES_UPGRADE",
              "FLYING_BLUE_MILES_XP_CONDITION_MILES_UPGRADE",
              "SKY_PRIORITY_UPGRADE",
              "FOOD_AND_BEVERAGE_UPGRADE",
              "SEAT_CHARACTERISTICS_UPGRADE",
              "IN_FLIGHT_ENTERTAINMENT_UPGRADE",
              "SEPARATE_CABIN_UPGRADE",
              "SERVICE_ON_BOARD_UPGRADE",
              "CHECKED_BAGGAGE_CHARACTERISTICS_UPGRADE",
              "LOUNGE_ACCESS_UPGRADE",
              "UNKNOWN"
            ]
          },
          "included": {
            "type": "boolean",
            "description": "A flag indicating if the fare benefit is included or not."
          },
          "attributeSource": {
            "type": "string",
            "description": "The source of the attribute. I.e. the reason wy the attribute is returned (eg: due to the type of fare, or the flying blue status of the customer).",
            "enum": [
              "FARE",
              "FB",
              "BUNDLE"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the attribute. Can be used for sorting purpose.",
            "format": "int32"
          },
          "shortList": {
            "type": "boolean",
            "description": "A flag indicating if the attribute is part of the short list of the most important attributes."
          },
          "pictogram": {
            "type": "string",
            "description": "Displays the pictogram of the attribute."
          },
          "commercialLabel": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV3"
          },
          "productCondition": {
            "$ref": "#/components/schemas/ProductCondition_UpsellOfferV3"
          }
        },
        "description": "Represents a ticket condition."
      },
      "ConditionsPerPassengerType_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "primaryPax": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger type is the one of the primary passenger."
          },
          "conditions": {
            "type": "array",
            "description": "The list of conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionV2_UpsellOfferV3"
            }
          }
        },
        "description": "Represents the ticket conditions per passenger type."
      },
      "ConnectionResponse_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_UpsellOfferV3"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "DateIntervalView_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Disclaimer_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareFamily_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpsellOfferV3"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlightOnTime_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_UpsellOfferV3"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV3"
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV3"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_UpsellOfferV3"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "recommended": {
            "type": "boolean",
            "description": "Indicates if the current flightProduct is recommended to the customer."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "FlyingBlue_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "earnedUltimateQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedMiles": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "ItineraryInformation_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "MarketingFlightResponse_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV3"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_UpsellOfferV3"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_UpsellOfferV3"
          }
        },
        "description": "The marketing flight."
      },
      "Money_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "OperatingFlight_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_UpsellOfferV3"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV3"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_UpsellOfferV3"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV3"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_UpsellOfferV3"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_UpsellOfferV3"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductCondition_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the product.",
            "example": "SeatProduct"
          },
          "sameForAllSegments": {
            "type": "boolean",
            "description": "A flag indicating if the product bought applies to all segments of the connection.",
            "example": true
          },
          "productWarningForAllSegmentsText": {
            "type": "string",
            "description": "A warning text to display in case the product is not included on all segments.",
            "example": "On Nice to Paris no specific seat product is included."
          },
          "highestPrioritySegment": {
            "type": "boolean",
            "description": "A flag indicating if the product is included on the highest priority segment."
          },
          "highestPrioritySegmentProduct": {
            "type": "string",
            "writeOnly": true
          },
          "highestPrioritySegmentProductText": {
            "type": "string",
            "writeOnly": true
          },
          "product": {
            "type": "string",
            "description": "The code of the product.",
            "example": "0B5_CH_EK"
          },
          "productText": {
            "type": "string",
            "description": "The text describing the product.",
            "example": "Seat Choice Category AF"
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV3"
          },
          "detailsText": {
            "type": "string"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee_UpsellOfferV3"
          }
        },
        "description": "Represents the condition related to a bought product."
      },
      "ProductConnection_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV3"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_UpsellOfferV3"
            }
          },
          "conditionsPerPassengerType": {
            "type": "array",
            "description": "The ticket-conditions per passenger type.",
            "items": {
              "$ref": "#/components/schemas/ConditionsPerPassengerType_UpsellOfferV3"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_UpsellOfferV3"
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the fare applies to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV3"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_UpsellOfferV3"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_UpsellOfferV3"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_UpsellOfferV3"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV3"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_UpsellOfferV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV3"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_UpsellOfferV3"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_UpsellOfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_UpsellOfferV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_UpsellOfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_UpsellOfferV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "UpsellOffersResponse_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Itinerary_UpsellOfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections.",
            "items": {
              "type": "array",
              "description": "The list of connections.",
              "items": {
                "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV3"
              }
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV3"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_UpsellOfferV3"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_UpsellOfferV3"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents an upsell offers response."
      },
      "Customer_UpgradeOffersWithMilesV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_UpgradeOffersWithMilesV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_UpgradeOffersWithMilesV3"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpgradeOffersWithMilesV3"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_UpgradeOffersWithMilesV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_UpgradeOffersWithMilesV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithMilesV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithMilesV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_UpgradeOffersWithMilesV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "UpgradeOffersWithMilesRequest_UpgradeOffersWithMilesV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpgradeOffersWithMilesV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_UpgradeOffersWithMilesV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_UpgradeOffersWithMilesV3"
            }
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an upgrade offer request."
      },
      "City_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_UpgradeOffersWithMilesV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_UpgradeOffersWithMilesV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "CommercialText_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition.",
        "example": "SkyPriority benefits*"
      },
      "ConditionV2_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the type of the condition.",
            "enum": [
              "SKY_PRIORITY",
              "GO_SHOW",
              "NO_SHOW",
              "NO_SHOW_CHANGE",
              "NO_SHOW_CANCEL",
              "CARRIER_FEES",
              "FREE_SEAT_SELECTION",
              "SEAT_SELECTION",
              "CANCEL",
              "CANCEL_COVID",
              "CHANGE",
              "HAND_BAGGAGE_ALLOWANCE",
              "MERGED_BAGGAGE_ALLOWANCE",
              "FLYING_BLUE_MILES_XP",
              "UM_ATTRIBUTE",
              "YOUTH_PASS_ATTRIBUTE",
              "STUDENT_ATTRIBUTE",
              "SENIOR_PASS_ATTRIBUTE",
              "DEDICATED_OVERHEAD_BIN_SPACE_ATTRIBUTE",
              "DEPLANE_QUICKLY_ATTRIBUTE",
              "HAND_BAGGAGE_ALLOWANCE_MILES_UPGRADE",
              "SKY_PRIORITY_MILES_UPGRADE",
              "CHANGE_CONDITION_MILES_UPGRADE",
              "CANCEL_CONDITION_MILES_UPGRADE",
              "LOUNGE_ACCESS",
              "LOUNGE_CONDITION_MILES_UPGRADE",
              "FLYING_BLUE_MILES_XP_CONDITION_MILES_UPGRADE",
              "SKY_PRIORITY_UPGRADE",
              "FOOD_AND_BEVERAGE_UPGRADE",
              "SEAT_CHARACTERISTICS_UPGRADE",
              "IN_FLIGHT_ENTERTAINMENT_UPGRADE",
              "SEPARATE_CABIN_UPGRADE",
              "SERVICE_ON_BOARD_UPGRADE",
              "CHECKED_BAGGAGE_CHARACTERISTICS_UPGRADE",
              "LOUNGE_ACCESS_UPGRADE",
              "UNKNOWN"
            ]
          },
          "included": {
            "type": "boolean",
            "description": "A flag indicating if the fare benefit is included or not."
          },
          "attributeSource": {
            "type": "string",
            "description": "The source of the attribute. I.e. the reason wy the attribute is returned (eg: due to the type of fare, or the flying blue status of the customer).",
            "enum": [
              "FARE",
              "FB",
              "BUNDLE"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the attribute. Can be used for sorting purpose.",
            "format": "int32"
          },
          "shortList": {
            "type": "boolean",
            "description": "A flag indicating if the attribute is part of the short list of the most important attributes."
          },
          "pictogram": {
            "type": "string",
            "description": "Displays the pictogram of the attribute."
          },
          "commercialLabel": {
            "$ref": "#/components/schemas/CommercialText_UpgradeOffersWithMilesV3"
          },
          "productCondition": {
            "$ref": "#/components/schemas/ProductCondition_UpgradeOffersWithMilesV3"
          }
        },
        "description": "Represents a ticket condition."
      },
      "ConditionsPerPassengerType_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "primaryPax": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger type is the one of the primary passenger."
          },
          "conditions": {
            "type": "array",
            "description": "The list of conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionV2_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Represents the ticket conditions per passenger type."
      },
      "ConnectionInformation_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpgradeOffersWithMilesV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpgradeOffersWithMilesV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the connection.",
            "format": "date-time"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the connection.",
            "format": "date-time"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the connection.",
            "format": "int32"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "changeEligibility": {
            "type": "boolean",
            "description": "The change eligibility of the current connection."
          },
          "flown": {
            "type": "boolean",
            "description": "The flag indicates whether the connection is flown."
          }
        },
        "description": "Represents the connection of a reservation."
      },
      "EnvironmentalInformation_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "FareFamily_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpgradeOffersWithMilesV3"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "Money_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "PricePerPassengerType_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithMilesV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithMilesV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithMilesV3"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_UpgradeOffersWithMilesV3"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_UpgradeOffersWithMilesV3"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductCondition_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "highestPrioritySegmentProduct": {
            "type": "string",
            "writeOnly": true
          },
          "highestPrioritySegmentProductText": {
            "type": "string",
            "writeOnly": true
          },
          "detailsText": {
            "type": "string"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee_UpgradeOffersWithMilesV3"
          }
        },
        "description": "Represents the condition related to a bought product."
      },
      "ReservationInformation_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "description": "The list of connection.",
            "items": {
              "$ref": "#/components/schemas/ConnectionInformation_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Contains reservation information"
      },
      "SearchMetadata_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_UpgradeOffersWithMilesV3"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_UpgradeOffersWithMilesV3"
          },
          "reservationInformation": {
            "$ref": "#/components/schemas/ReservationInformation_UpgradeOffersWithMilesV3"
          }
        },
        "description": "Represents search metadata response information."
      },
      "State_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_UpgradeOffersWithMilesV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_UpgradeOffersWithMilesV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_UpgradeOffersWithMilesV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_UpgradeOffersWithMilesV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithMilesV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "UpgradeFlightProduct_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "The list of passengers of the flight.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpgradeOffersWithMilesV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithMilesV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithMilesV3"
            }
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithMilesV3"
          },
          "connections": {
            "type": "array",
            "description": "The list of connections of the flight. All connections are returned, even none upgraded ones.",
            "items": {
              "$ref": "#/components/schemas/UpgradeProductConnection_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Represents an upgrade offer."
      },
      "UpgradeItinerary_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible upgraded flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/UpgradeFlightProduct_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Represents an upgraded flight itinerary."
      },
      "UpgradeOfferResponse_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpgradeItinerary_UpgradeOffersWithMilesV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpgradeOffersWithMilesV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Represents an upgrade offers response."
      },
      "UpgradeProductConnection_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "offerConnectionId": {
            "type": "integer",
            "description": "The id of the offer connection. A same product connection may be returned in different flight offers and this id permits to see they are the same.",
            "format": "int32"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the product connection upgrade based on the commercial cabin.",
            "format": "int32"
          },
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection for the given booking class.",
            "format": "int32"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/UpgradeProductSegment_UpgradeOffersWithMilesV3"
            }
          },
          "conditionsPerPassengerType": {
            "type": "array",
            "description": "The ticket-conditions per passenger type.",
            "items": {
              "$ref": "#/components/schemas/ConditionsPerPassengerType_UpgradeOffersWithMilesV3"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_UpgradeOffersWithMilesV3"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Economy"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithMilesV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithMilesV3"
            }
          }
        },
        "description": "Represents the connection of an upgrade flight offer."
      },
      "UpgradeProductSegment_UpgradeOffersWithMilesV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of an upgraded flight offer."
      },
      "Customer_UpgradeOffersWithCashV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_UpgradeOffersWithCashV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_UpgradeOffersWithCashV3"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpgradeOffersWithCashV3"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_UpgradeOffersWithCashV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_UpgradeOffersWithCashV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithCashV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithCashV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_UpgradeOffersWithCashV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "UpgradeOffersWithCashRequest_UpgradeOffersWithCashV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpgradeOffersWithCashV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_UpgradeOffersWithCashV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_UpgradeOffersWithCashV3"
            }
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an upgrade offer request."
      },
      "City_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_UpgradeOffersWithCashV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_UpgradeOffersWithCashV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "CommercialText_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition.",
        "example": "SkyPriority benefits*"
      },
      "ConditionV2_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the type of the condition.",
            "enum": [
              "SKY_PRIORITY",
              "GO_SHOW",
              "NO_SHOW",
              "NO_SHOW_CHANGE",
              "NO_SHOW_CANCEL",
              "CARRIER_FEES",
              "FREE_SEAT_SELECTION",
              "SEAT_SELECTION",
              "CANCEL",
              "CANCEL_COVID",
              "CHANGE",
              "HAND_BAGGAGE_ALLOWANCE",
              "MERGED_BAGGAGE_ALLOWANCE",
              "FLYING_BLUE_MILES_XP",
              "UM_ATTRIBUTE",
              "YOUTH_PASS_ATTRIBUTE",
              "STUDENT_ATTRIBUTE",
              "SENIOR_PASS_ATTRIBUTE",
              "DEDICATED_OVERHEAD_BIN_SPACE_ATTRIBUTE",
              "DEPLANE_QUICKLY_ATTRIBUTE",
              "HAND_BAGGAGE_ALLOWANCE_MILES_UPGRADE",
              "SKY_PRIORITY_MILES_UPGRADE",
              "CHANGE_CONDITION_MILES_UPGRADE",
              "CANCEL_CONDITION_MILES_UPGRADE",
              "LOUNGE_ACCESS",
              "LOUNGE_CONDITION_MILES_UPGRADE",
              "FLYING_BLUE_MILES_XP_CONDITION_MILES_UPGRADE",
              "SKY_PRIORITY_UPGRADE",
              "FOOD_AND_BEVERAGE_UPGRADE",
              "SEAT_CHARACTERISTICS_UPGRADE",
              "IN_FLIGHT_ENTERTAINMENT_UPGRADE",
              "SEPARATE_CABIN_UPGRADE",
              "SERVICE_ON_BOARD_UPGRADE",
              "CHECKED_BAGGAGE_CHARACTERISTICS_UPGRADE",
              "LOUNGE_ACCESS_UPGRADE",
              "UNKNOWN"
            ]
          },
          "included": {
            "type": "boolean",
            "description": "A flag indicating if the fare benefit is included or not."
          },
          "attributeSource": {
            "type": "string",
            "description": "The source of the attribute. I.e. the reason wy the attribute is returned (eg: due to the type of fare, or the flying blue status of the customer).",
            "enum": [
              "FARE",
              "FB",
              "BUNDLE"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the attribute. Can be used for sorting purpose.",
            "format": "int32"
          },
          "shortList": {
            "type": "boolean",
            "description": "A flag indicating if the attribute is part of the short list of the most important attributes."
          },
          "pictogram": {
            "type": "string",
            "description": "Displays the pictogram of the attribute."
          },
          "commercialLabel": {
            "$ref": "#/components/schemas/CommercialText_UpgradeOffersWithCashV3"
          },
          "productCondition": {
            "$ref": "#/components/schemas/ProductCondition_UpgradeOffersWithCashV3"
          }
        },
        "description": "Represents a ticket condition."
      },
      "ConditionsPerPassengerType_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "primaryPax": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger type is the one of the primary passenger."
          },
          "conditions": {
            "type": "array",
            "description": "The list of conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionV2_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Represents the ticket conditions per passenger type."
      },
      "ConnectionInformation_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpgradeOffersWithCashV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpgradeOffersWithCashV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the connection.",
            "format": "date-time"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the connection.",
            "format": "date-time"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the connection.",
            "format": "int32"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "changeEligibility": {
            "type": "boolean",
            "description": "The change eligibility of the current connection."
          },
          "flown": {
            "type": "boolean",
            "description": "The flag indicates whether the connection is flown."
          }
        },
        "description": "Represents the connection of a reservation."
      },
      "EnvironmentalInformation_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "FareFamily_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpgradeOffersWithCashV3"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "Money_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "PricePerPassengerType_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithCashV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithCashV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpgradeOffersWithCashV3"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_UpgradeOffersWithCashV3"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_UpgradeOffersWithCashV3"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductCondition_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "highestPrioritySegmentProduct": {
            "type": "string",
            "writeOnly": true
          },
          "highestPrioritySegmentProductText": {
            "type": "string",
            "writeOnly": true
          },
          "detailsText": {
            "type": "string"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee_UpgradeOffersWithCashV3"
          }
        },
        "description": "Represents the condition related to a bought product."
      },
      "ReservationInformation_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "description": "The list of connection.",
            "items": {
              "$ref": "#/components/schemas/ConnectionInformation_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Contains reservation information"
      },
      "SearchMetadata_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_UpgradeOffersWithCashV3"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_UpgradeOffersWithCashV3"
          },
          "reservationInformation": {
            "$ref": "#/components/schemas/ReservationInformation_UpgradeOffersWithCashV3"
          }
        },
        "description": "Represents search metadata response information."
      },
      "State_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_UpgradeOffersWithCashV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_UpgradeOffersWithCashV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_UpgradeOffersWithCashV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_UpgradeOffersWithCashV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_UpgradeOffersWithCashV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "UpgradeFlightProduct_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "The list of passengers of the flight.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpgradeOffersWithCashV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithCashV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithCashV3"
            }
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithCashV3"
          },
          "connections": {
            "type": "array",
            "description": "The list of connections of the flight. All connections are returned, even none upgraded ones.",
            "items": {
              "$ref": "#/components/schemas/UpgradeProductConnection_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Represents an upgrade offer."
      },
      "UpgradeItinerary_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible upgraded flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/UpgradeFlightProduct_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Represents an upgraded flight itinerary."
      },
      "UpgradeOfferResponse_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpgradeItinerary_UpgradeOffersWithCashV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpgradeOffersWithCashV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Represents an upgrade offers response."
      },
      "UpgradeProductConnection_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection for the given booking class.",
            "format": "int32"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/UpgradeProductSegment_UpgradeOffersWithCashV3"
            }
          },
          "conditionsPerPassengerType": {
            "type": "array",
            "description": "The ticket-conditions per passenger type.",
            "items": {
              "$ref": "#/components/schemas/ConditionsPerPassengerType_UpgradeOffersWithCashV3"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_UpgradeOffersWithCashV3"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Economy"
          },
          "hasChanged": {
            "type": "boolean",
            "description": "A flag indicating whether the connection changed from the corresponding connection of the original/booked offer.",
            "example": true
          },
          "upgradedCabin": {
            "type": "boolean",
            "description": "A flag indicating whether the commercial cabin changed from the one in the original/booked offer.",
            "example": true
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpgradeOffersWithCashV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpgradeOffersWithCashV3"
            }
          }
        },
        "description": "Represents the connection of an upgrade flight offer."
      },
      "UpgradeProductSegment_UpgradeOffersWithCashV3": {
        "type": "object",
        "properties": {
          "fareBasis": {
            "type": "string",
            "description": "The fare basis applicable to the segment.",
            "example": "VSF0FB"
          },
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of an upgraded flight offer."
      },
      "BasicConnectionRequest_SearchContextItineraryV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_SearchContextItineraryV3"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "Customer_SearchContextItineraryV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_SearchContextItineraryV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "Link_SearchContextItineraryV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Passenger_SearchContextItineraryV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SearchContextItineraryRequest_SearchContextItineraryV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "passengers",
          "requestedConnections"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_SearchContextItineraryV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_SearchContextItineraryV3"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/BasicConnectionRequest_SearchContextItineraryV3"
            }
          }
        },
        "description": "Represents the search-context itinerary request."
      },
      "TravelCompanion_SearchContextItineraryV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "CommercialCabin_SearchContextItineraryV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "LocationSpecificRemark_SearchContextItineraryV3": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "SearchContextItineraryResponse_SearchContextItineraryV3": {
        "type": "object",
        "properties": {
          "availableCommercialCabins": {
            "type": "array",
            "description": "The available commercial cabins on the itinerary.",
            "items": {
              "$ref": "#/components/schemas/CommercialCabin_SearchContextItineraryV3"
            }
          },
          "itineraryType": {
            "type": "string",
            "description": "The type of itinerary.",
            "example": "ONE_WAY"
          },
          "haulType": {
            "type": "string",
            "description": "The haul type of the itinerary.",
            "example": "SH",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_SearchContextItineraryV3"
            }
          }
        },
        "description": "Represents the search-context itinerary response."
      },
      "Customer_FareV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_FareV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_FareV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The requested date interval",
        "example": "2019-10-23/2020-06-30"
      },
      "Link_FareV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LowestFareRequest_FareV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV3"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV3"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a lowest fare request."
      },
      "OfferConnectionRequest_FareV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_FareV3"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV3"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV3"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_FareV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_FareV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_FareV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_FareV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_FareV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "City_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FareV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_FareV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_FareV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV3"
          },
          "departureDate": {
            "type": "string",
            "description": "Departure date of the trip.",
            "format": "date"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FareV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FareV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV3"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_FareV3": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_FareV3": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_FareV3": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "FlightProduct_FareV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "calculationTimestamp": {
            "type": "string",
            "description": "The date and time at which the data related to this product have been calculated by the providing service.",
            "format": "date-time"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_FareV3"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV3"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV3"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_FareV3": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_FareV3": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_FareV3"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LowestFareResponse_FareV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Itinerary_FareV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections.",
            "items": {
              "type": "array",
              "description": "The list of connections.",
              "items": {
                "$ref": "#/components/schemas/ConnectionResponse_FareV3"
              }
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_FareV3"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_FareV3"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_FareV3"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_FareV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_FareV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV3"
            }
          }
        },
        "description": "Represents a lowest fare response."
      },
      "PricePerPassengerType_FareV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_FareV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_FareV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV3"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_FareV3"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_FareV3"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_FareV3": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV3"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_FareV3"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV3"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_FareV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_FareV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "SearchMetadata_FareV3": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_FareV3"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_FareV3"
          }
        },
        "description": "Represents search metadata response information."
      },
      "State_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FareV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FareV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_FareV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FareV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FareV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_FareV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "RepricedOfferRequest_UpsellOfferV3": {
        "required": [
          "passengers"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer_UpsellOfferV3"
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of selected passengers.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV3"
            }
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          }
        },
        "description": "Represents a repriced offer request."
      },
      "CalendarRequest_FareV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV3"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV3"
          },
          "fixCalendarSize": {
            "type": "integer",
            "description": "The size of the calendar in days.",
            "format": "int32"
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a calendar request."
      },
      "AvailableOffersRequest_OfferV3": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV3"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_OfferV3"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_OfferV3"
            }
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an available offer request."
      },
      "Customer_OfferV3": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_OfferV3"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_OfferV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_OfferV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_OfferV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_OfferV3"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV3"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_OfferV3": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_OfferV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_OfferV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_OfferV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_OfferV3": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "AvailableOffersResponse_OfferV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Itinerary_OfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections.",
            "items": {
              "type": "array",
              "description": "The list of connections.",
              "items": {
                "$ref": "#/components/schemas/ConnectionResponse_OfferV3"
              }
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV3"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_OfferV3"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_OfferV3"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents an available offer response."
      },
      "Carrier_OfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_OfferV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_OfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_OfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_OfferV3"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_OfferV3"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_OfferV3": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_OfferV3": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_OfferV3": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareFamily_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "FlightCharacteristic_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightOnTime_OfferV3": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_OfferV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_OfferV3"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_OfferV3": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_OfferV3": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_OfferV3"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "MarketingFlightResponse_OfferV3": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV3"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_OfferV3"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_OfferV3"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_OfferV3": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_OfferV3"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV3"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_OfferV3"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_OfferV3": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_OfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV3"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_OfferV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV3"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_OfferV3"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV3"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_OfferV3": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV3"
          },
          "hasPromoOnUpperFare": {
            "type": "boolean",
            "description": "A flag indicating if there is a promotion on the upper fare."
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_OfferV3"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_OfferV3"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_OfferV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_OfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_OfferV3": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_OfferV3": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_OfferV3"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_OfferV3": {
        "type": "object",
        "properties": {
          "negotiatedFareAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if negotiated fares are available (in case of bookingFlow corporate)."
          },
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_OfferV3"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_OfferV3"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_OfferV3": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_OfferV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_OfferV3"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_OfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_OfferV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_OfferV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_OfferV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_OfferV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "AvailableOffersSelfConnectResponse_OfferV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_OfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections.",
            "items": {
              "type": "array",
              "description": "The list of connections.",
              "items": {
                "$ref": "#/components/schemas/ConnectionResponse_OfferV3"
              }
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV3"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents a self connect offers response."
      },
      "SelfConnectFlightProduct_OfferV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV3"
          },
          "services": {
            "type": "array",
            "description": "The services linked with the offer.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectService_OfferV3"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_OfferV3"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_OfferV3": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_OfferV3"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_OfferV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_OfferV3": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "integer",
            "format": "int32"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_OfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_OfferV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "SelfConnectService_OfferV3": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of service.",
            "example": "DOHOP_CONNECT_SERVICE"
          },
          "label": {
            "type": "string",
            "description": "The label describing the service.",
            "example": "Guaranteed connection. Protects you from flight cancellations."
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV3"
          }
        },
        "description": "Represents a self connect service."
      },
      "Customer_UpsellOfferV2": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_UpsellOfferV2"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_UpsellOfferV2": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_UpsellOfferV2"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV2"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_UpsellOfferV2": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_UpsellOfferV2": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV2"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_UpsellOfferV2": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "UpsellOffersRequest_UpsellOfferV2": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV2"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_UpsellOfferV2"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_UpsellOfferV2"
            }
          },
          "fixedFlights": {
            "type": "boolean",
            "description": "A flag to indicate that the flights returned in the response connections must be the same as those in the request."
          },
          "ignoreCommercialCabinFilter": {
            "type": "boolean",
            "description": "A flag to indicate that the commercial cabin should be ignored when filtering the upsell offers to return."
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an upsell offers request."
      },
      "AbnormalResponseDescriptor_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "Carrier_UpsellOfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          }
        },
        "description": "Represents a carrier."
      },
      "City_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_UpsellOfferV2"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_UpsellOfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "CommercialText_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionV2_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the type of the condition.",
            "enum": [
              "SKY_PRIORITY",
              "GO_SHOW",
              "NO_SHOW",
              "NO_SHOW_CHANGE",
              "NO_SHOW_CANCEL",
              "CARRIER_FEES",
              "FREE_SEAT_SELECTION",
              "SEAT_SELECTION",
              "CANCEL",
              "CANCEL_COVID",
              "CHANGE",
              "HAND_BAGGAGE_ALLOWANCE",
              "MERGED_BAGGAGE_ALLOWANCE",
              "FLYING_BLUE_MILES_XP",
              "UM_ATTRIBUTE",
              "YOUTH_PASS_ATTRIBUTE",
              "STUDENT_ATTRIBUTE",
              "SENIOR_PASS_ATTRIBUTE",
              "DEDICATED_OVERHEAD_BIN_SPACE_ATTRIBUTE",
              "DEPLANE_QUICKLY_ATTRIBUTE",
              "HAND_BAGGAGE_ALLOWANCE_MILES_UPGRADE",
              "SKY_PRIORITY_MILES_UPGRADE",
              "CHANGE_CONDITION_MILES_UPGRADE",
              "CANCEL_CONDITION_MILES_UPGRADE",
              "LOUNGE_ACCESS",
              "LOUNGE_CONDITION_MILES_UPGRADE",
              "FLYING_BLUE_MILES_XP_CONDITION_MILES_UPGRADE",
              "SKY_PRIORITY_UPGRADE",
              "FOOD_AND_BEVERAGE_UPGRADE",
              "SEAT_CHARACTERISTICS_UPGRADE",
              "IN_FLIGHT_ENTERTAINMENT_UPGRADE",
              "SEPARATE_CABIN_UPGRADE",
              "SERVICE_ON_BOARD_UPGRADE",
              "CHECKED_BAGGAGE_CHARACTERISTICS_UPGRADE",
              "LOUNGE_ACCESS_UPGRADE",
              "UNKNOWN"
            ]
          },
          "included": {
            "type": "boolean",
            "description": "A flag indicating if the fare benefit is included or not."
          },
          "attributeSource": {
            "type": "string",
            "description": "The source of the attribute. I.e. the reason wy the attribute is returned (eg: due to the type of fare, or the flying blue status of the customer).",
            "enum": [
              "FARE",
              "FB",
              "BUNDLE"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the attribute. Can be used for sorting purpose.",
            "format": "int32"
          },
          "shortList": {
            "type": "boolean",
            "description": "A flag indicating if the attribute is part of the short list of the most important attributes."
          },
          "commercialLabel": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV2"
          },
          "productCondition": {
            "$ref": "#/components/schemas/ProductCondition_UpsellOfferV2"
          }
        },
        "description": "Represents a ticket condition."
      },
      "ConditionsPerPassengerType_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "primaryPax": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger type is the one of the primary passenger."
          },
          "conditions": {
            "type": "array",
            "description": "The list of conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionV2_UpsellOfferV2"
            }
          }
        },
        "description": "Represents the ticket conditions per passenger type."
      },
      "ConnectionResponse_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV2"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_UpsellOfferV2"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "DateIntervalView_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Disclaimer_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareFamily_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpsellOfferV2"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlightOnTime_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_UpsellOfferV2"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV2"
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV2"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_UpsellOfferV2"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "FlyingBlue_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "earnedUltimateQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedMiles": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "ItineraryInformation_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_UpsellOfferV2"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_UpsellOfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV2"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_UpsellOfferV2"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_UpsellOfferV2"
          }
        },
        "description": "The marketing flight."
      },
      "Money_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "OperatingFlight_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_UpsellOfferV2"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV2"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_UpsellOfferV2"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV2"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_UpsellOfferV2"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_UpsellOfferV2"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "affordable": {
            "type": "boolean",
            "description": "Flag to indicate if the user can afford the ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductCondition_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the product.",
            "example": "SeatProduct"
          },
          "sameForAllSegments": {
            "type": "boolean",
            "description": "A flag indicating if the product bought applies to all segments of the connection.",
            "example": true
          },
          "productWarningForAllSegmentsText": {
            "type": "string",
            "description": "A warning text to display in case the product is not included on all segments.",
            "example": "On Nice to Paris no specific seat product is included."
          },
          "highestPrioritySegment": {
            "type": "boolean",
            "description": "A flag indicating if the product is included on the highest priority segment."
          },
          "highestPrioritySegmentProduct": {
            "type": "string",
            "writeOnly": true
          },
          "highestPrioritySegmentProductText": {
            "type": "string",
            "writeOnly": true
          },
          "product": {
            "type": "string",
            "description": "The code of the product.",
            "example": "0B5_CH_EK"
          },
          "productText": {
            "type": "string",
            "description": "The text describing the product.",
            "example": "Seat Choice Category AF"
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV2"
          },
          "detailsText": {
            "type": "string"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee_UpsellOfferV2"
          }
        },
        "description": "Represents the condition related to a bought product."
      },
      "ProductConnection_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV2"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_UpsellOfferV2"
            }
          },
          "conditionsPerPassengerType": {
            "type": "array",
            "description": "The ticket-conditions per passenger type.",
            "items": {
              "$ref": "#/components/schemas/ConditionsPerPassengerType_UpsellOfferV2"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_UpsellOfferV2"
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the fare applies to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV2"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_UpsellOfferV2"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_UpsellOfferV2"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_UpsellOfferV2"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV2"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_UpsellOfferV2"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV2"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_UpsellOfferV2"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_UpsellOfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_UpsellOfferV2"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_UpsellOfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_UpsellOfferV2"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV2"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "UpsellOffersResponse_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_UpsellOfferV2"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV2"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_UpsellOfferV2"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_UpsellOfferV2"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV2"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents an upsell offers response."
      },
      "BasicConnectionRequest_SearchContextItineraryV2": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_SearchContextItineraryV2"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "Customer_SearchContextItineraryV2": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_SearchContextItineraryV2"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "Link_SearchContextItineraryV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Passenger_SearchContextItineraryV2": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SearchContextItineraryRequest_SearchContextItineraryV2": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "passengers",
          "requestedConnections"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_SearchContextItineraryV2"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_SearchContextItineraryV2"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/BasicConnectionRequest_SearchContextItineraryV2"
            }
          }
        },
        "description": "Represents the search-context itinerary request."
      },
      "TravelCompanion_SearchContextItineraryV2": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "LocationSpecificRemark_SearchContextItineraryV2": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "SearchContextItineraryResponse_SearchContextItineraryV2": {
        "type": "object",
        "properties": {
          "availableCommercialCabins": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available commercial cabins on the itinerary.",
            "items": {
              "type": "string",
              "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST"
              ]
            }
          },
          "itineraryType": {
            "type": "string",
            "description": "The type of itinerary.",
            "example": "ONE_WAY"
          },
          "haulType": {
            "type": "string",
            "description": "The haul type of the itinerary.",
            "example": "SH",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_SearchContextItineraryV2"
            }
          }
        },
        "description": "Represents the search-context itinerary response."
      },
      "Customer_FareV2": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_FareV2"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_FareV2": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The requested date interval",
        "example": "2019-10-23/2020-06-30"
      },
      "Link_FareV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LowestFareRequest_FareV2": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV2"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV2"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV2"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV2"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a lowest fare request."
      },
      "OfferConnectionRequest_FareV2": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_FareV2"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV2"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV2"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_FareV2": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_FareV2": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_FareV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_FareV2"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_FareV2": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "City_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FareV2"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_FareV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_FareV2": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV2"
          },
          "departureDate": {
            "type": "string",
            "description": "Departure date of the trip.",
            "format": "date"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "origin": {
            "$ref": "#/components/schemas/StationGroup_FareV2"
          },
          "destination": {
            "$ref": "#/components/schemas/StationGroup_FareV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV2"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_FareV2": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_FareV2": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_FareV2": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "FlightProduct_FareV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "calculationTimestamp": {
            "type": "string",
            "description": "The date and time at which the data related to this product have been calculated by the providing service.",
            "format": "date-time"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_FareV2"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV2"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV2"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_FareV2": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_FareV2": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_FareV2"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_FareV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_FareV2"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_FareV2": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "LowestFareResponse_FareV2": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_FareV2"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_FareV2"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_FareV2"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_FareV2"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_FareV2"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_FareV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV2"
            }
          }
        },
        "description": "Represents a lowest fare response."
      },
      "PricePerPassengerType_FareV2": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_FareV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_FareV2": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV2"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_FareV2"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_FareV2"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_FareV2": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV2"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_FareV2"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV2"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_FareV2": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_FareV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "SearchMetadata_FareV2": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_FareV2"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_FareV2"
          }
        },
        "description": "Represents search metadata response information."
      },
      "State_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FareV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FareV2"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StationGroup_FareV2": {
        "type": "object",
        "properties": {
          "airport": {
            "$ref": "#/components/schemas/StationStopover_FareV2"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FareV2"
          }
        },
        "description": "Represents a group of a stopover and city."
      },
      "StationStopover_FareV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FareV2"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "Surcharge_FareV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "CalendarRequest_FareV2": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV2"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV2"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV2"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV2"
          },
          "fixCalendarSize": {
            "type": "integer",
            "description": "The size of the calendar in days.",
            "format": "int32"
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a calendar request."
      },
      "AvailableOffersRequest_OfferV2": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV2"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_OfferV2"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_OfferV2"
            }
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an available offer request."
      },
      "Customer_OfferV2": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_OfferV2"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_OfferV2": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_OfferV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_OfferV2": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_OfferV2"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV2"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_OfferV2": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_OfferV2": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_OfferV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_OfferV2"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_OfferV2": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "AvailableOffersResponse_OfferV2": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_OfferV2"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV2"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_OfferV2"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_OfferV2"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV2"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          },
          "negotiatedFareAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if negotiated fares are available (in case of bookingFlow corporate)."
          }
        },
        "description": "Represents an available offer response."
      },
      "Carrier_OfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_OfferV2"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_OfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_OfferV2": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV2"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_OfferV2"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_OfferV2"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_OfferV2": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_OfferV2": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_OfferV2": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareFamily_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "FlightCharacteristic_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightOnTime_OfferV2": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_OfferV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_OfferV2"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_OfferV2": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_OfferV2": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_OfferV2"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_OfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_OfferV2"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_OfferV2": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_OfferV2": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV2"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_OfferV2"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_OfferV2"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_OfferV2": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_OfferV2"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV2"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_OfferV2"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_OfferV2": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_OfferV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV2"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_OfferV2": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV2"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_OfferV2"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV2"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_OfferV2": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV2"
          },
          "hasPromoOnUpperFare": {
            "type": "boolean",
            "description": "A flag indicating if there is a promotion on the upper fare."
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_OfferV2"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_OfferV2"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_OfferV2": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code."
          },
          "fareBasisCode": {
            "type": "string",
            "description": "The fare basis applicable to the segment. It represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare."
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_OfferV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_OfferV2": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_OfferV2": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_OfferV2"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_OfferV2": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_OfferV2"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_OfferV2"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_OfferV2": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV2"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_OfferV2"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV2"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_OfferV2"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_OfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_OfferV2"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_OfferV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_OfferV2"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_OfferV2"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "AvailableOffersSelfConnectResponse_OfferV2": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "Represents an abstract self connect offer response",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_OfferV2"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV2"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV2"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents a self connect offers response."
      },
      "SelfConnectFlightProduct_OfferV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV2"
          },
          "services": {
            "type": "array",
            "description": "The services linked with the offer.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectService_OfferV2"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_OfferV2"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_OfferV2": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_OfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_OfferV2"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_OfferV2": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_OfferV2": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_OfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_OfferV2": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "SelfConnectService_OfferV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of service.",
            "example": "DOHOP_CONNECT_SERVICE"
          },
          "label": {
            "type": "string",
            "description": "The label describing the service.",
            "example": "Guaranteed connection. Protects you from flight cancellations."
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV2"
          }
        },
        "description": "Represents a self connect service."
      },
      "Customer_UpsellOfferV1": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_UpsellOfferV1"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_UpsellOfferV1": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_UpsellOfferV1"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV1"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_UpsellOfferV1": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_UpsellOfferV1": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV1"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV1"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_UpsellOfferV1": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "UpsellOffersRequest_UpsellOfferV1": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV1"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_UpsellOfferV1"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_UpsellOfferV1"
            }
          },
          "fixedFlights": {
            "type": "boolean",
            "description": "A flag to indicate that the flights returned in the response connections must be the same as those in the request."
          },
          "ignoreCommercialCabinFilter": {
            "type": "boolean",
            "description": "A flag to indicate that the commercial cabin should be ignored when filtering the upsell offers to return."
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an upsell offers request."
      },
      "AbnormalResponseDescriptor_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "AdvancePurchaseCondition": {
        "type": "object",
        "description": "Represents an abstract waived condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "stayDuration": {
                "$ref": "#/components/schemas/StayDuration"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "BaggageAllowance_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggages allowed.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of baggage allowance quantities.",
            "enum": [
              "PIECES",
              "WEIGHT"
            ]
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV1"
          },
          "detailsText": {
            "type": "string",
            "description": "The details text describing the baggage allowance."
          },
          "handBaggageDetailsText": {
            "type": "string",
            "description": "The details text describing the hand baggage allowance."
          }
        },
        "description": "Represents a baggage allowance."
      },
      "BlueBizCondition": {
        "type": "object",
        "description": "Represents a BlueBiz condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "earned": {
                "type": "integer",
                "description": "The number of miles earned.",
                "format": "int32"
              },
              "qualifyingPoints": {
                "type": "integer",
                "description": "The number of qualifying points (xp) earned.",
                "format": "int32"
              },
              "detailsTextQualPoints": {
                "type": "string",
                "description": "The details text related to the qualifying points (xp) earned."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "Cabin_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "CancelCondition": {
        "type": "object",
        "description": "Represents a cancel condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "feeBeforeDeparture": {
                "$ref": "#/components/schemas/Fee"
              },
              "allowedBeforeDeparture": {
                "type": "boolean",
                "description": "A flag indicating if the condition is allowed before departure."
              },
              "feeAfterDeparture": {
                "$ref": "#/components/schemas/Fee"
              },
              "allowedAfterDeparture": {
                "type": "boolean",
                "description": "A flag indicating if the condition is allowed after departure."
              },
              "waivedConditionTypes": {
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "afterDepartureDetailsText": {
                "type": "string",
                "description": "The details text describing the condition when applied after departure."
              },
              "beforeDepartureDetailsText": {
                "type": "string",
                "description": "The details text describing the condition when applied before departure."
              },
              "extraCostsText": {
                "type": "string",
                "description": "The text linked to the extra cost applying in case of cancel."
              },
              "refundText": {
                "type": "string",
                "description": "The text linked to the amount refunded in case of cancel."
              },
              "taxRefundText": {
                "type": "string",
                "description": "The text linked to the refund of taxes in case of cancel."
              },
              "initialFareRefundText": {
                "type": "string",
                "description": "The text linked to the refund condition for future rebooking to another fare."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              },
              "beforeDepartureTitleLabel": {
                "type": "string",
                "description": "The title linked with the before departure information."
              },
              "afterDepartureTitleLabel": {
                "type": "string",
                "description": "The title linked with the after departure information."
              },
              "extraCostsTitleLabel": {
                "type": "string",
                "description": "The title linked with the extra cost information."
              },
              "refundTitleLabel": {
                "type": "string",
                "description": "The title linked with the refund information."
              },
              "taxRefundTitleLabel": {
                "type": "string",
                "description": "The title linked with the tax refund information."
              }
            }
          }
        ]
      },
      "CancelCovidCondition": {
        "type": "object",
        "description": "Represents a cancel condition applying in case of covid period.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "CancelMilesUpgradeCondition": {
        "type": "object",
        "description": "Represents a cancel condition in case of upgraded flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "CarrierFeesCondition": {
        "type": "object",
        "description": "Represents the carrier fee condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "Carrier_UpsellOfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          }
        },
        "description": "Represents a carrier."
      },
      "ChangeCondition": {
        "type": "object",
        "description": "Represents a change condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "feeBeforeDeparture": {
                "$ref": "#/components/schemas/Fee"
              },
              "allowedBeforeDeparture": {
                "type": "boolean",
                "description": "A flag indicating if the condition is allowed before departure."
              },
              "feeAfterDeparture": {
                "$ref": "#/components/schemas/Fee"
              },
              "allowedAfterDeparture": {
                "type": "boolean",
                "description": "A flag indicating if the condition is allowed after departure."
              },
              "phoneAdminFeeApplicable": {
                "type": "boolean",
                "writeOnly": true
              },
              "waivedConditionTypes": {
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "continuousPricingApplicable": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "afterDepartureDetailsText": {
                "type": "string",
                "description": "The details text describing the condition when applied after departure."
              },
              "beforeDepartureDetailsText": {
                "type": "string",
                "description": "The details text describing the condition when applied before departure."
              },
              "phoneAdminFeeText": {
                "type": "string",
                "description": "The text related to the phone admin fee."
              },
              "taxChangeText": {
                "type": "string",
                "description": "The text related to the possible change in tax amount in case of flight change."
              },
              "continuousPricingText": {
                "type": "string",
                "description": "The text related to the discount fare(ZapOff)."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              },
              "beforeDepartureTitleLabel": {
                "type": "string",
                "description": "The title linked with the before departure information."
              },
              "afterDepartureTitleLabel": {
                "type": "string",
                "description": "The title linked with the after departure information."
              },
              "phoneAdminFeeTitleLabel": {
                "type": "string",
                "description": "The title linked with the information about the fee applying in case of phone administration."
              },
              "taxChangeTitleLabel": {
                "type": "string",
                "description": "The title linked with the tax changes information."
              }
            }
          }
        ]
      },
      "ChangeMilesUpgradeCondition": {
        "type": "object",
        "description": "Represents a change condition in case of upgraded flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "ChildrenDiscountCondition": {
        "type": "object",
        "description": "Represents a children discount condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "farePercentage": {
                "type": "integer",
                "description": "The percentage of fare discount granted.",
                "format": "int32"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "City_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_UpsellOfferV1"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_UpsellOfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "CommercialText": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "CommercialText_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionWrapper_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "ConditionWrapper_UpsellOfferV1": {
            "type": "object",
            "properties": {
              "detailsText": {
                "type": "string"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText_UpsellOfferV1"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee_UpsellOfferV1"
              }
            },
            "description": "Represents a ticket condition."
          }
        }
      },
      "ConnectionResponse_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_UpsellOfferV1"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_UpsellOfferV1"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "DateIntervalView_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "DedicatedOverheadBinSpaceCondition": {
        "type": "object",
        "description": "Represents the Overhead Bin Space Condition. This condition grants storage space above the passenger seat to keep carry-ons within easy reach.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "DeplaneQuicklyCondition": {
        "type": "object",
        "description": "Represents the Deplane Quickly Condition. This condition indicates passengers will be able to exit and be on their way quicky, usually thanks to a seat being toward the front of the aiplane.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "Disclaimer_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareBasis_UpsellOfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The fare basis code.",
            "example": "CS50BENB"
          }
        },
        "description": "Represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare. ",
        "example": "VSF0FB"
      },
      "FareFamily_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial description of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpsellOfferV1"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "Fee_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_UpsellOfferV1"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlightOnTime_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_UpsellOfferV1"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV1"
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV1"
          },
          "sameConditions": {
            "type": "boolean",
            "description": "Indicates if the different connections of the product have the same ticket conditions."
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_UpsellOfferV1"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "FlyingBlueAdvantages_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "extraBagQuantity": {
            "type": "integer",
            "description": "The extra number of bags the user is allowed to have.",
            "format": "int32"
          },
          "skyPriority": {
            "type": "boolean",
            "description": "A flag indicating whether the user is granted the skyPriority benefit or not."
          }
        },
        "description": "The advantages accorded to a FlyingBlue user due to his tier level."
      },
      "FlyingBlueMilesXPMilesUpgradeCondition": {
        "type": "object",
        "description": "Represents a FlyingBlue Miles and Xp condition for an upgraded flight. It details the number of miles, xp and uxp earned for an upgraded flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "FlyingBlueMilesXpCondition": {
        "type": "object",
        "description": "Represents a FlyingBlue Miles and Xp condition. It details the number of miles, xp and uxp earned for a flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "earnedMiles": {
                "type": "integer",
                "description": "The number of miles earned.",
                "format": "int64"
              },
              "qualifyingPoints": {
                "type": "integer",
                "description": "The number of qualifying points (xp) earned.",
                "format": "int64"
              },
              "ultimateQualifyingPoints": {
                "type": "integer",
                "description": "The number of ultimate qualifying points (uxp) earned.",
                "format": "int64"
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "FlyingBlue_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "earned": {
            "type": "integer",
            "description": "The amount of miles earned if the offer is purchased.",
            "format": "int64"
          },
          "detailsText": {
            "type": "string",
            "description": "The label accompanying the amount of miles earned."
          },
          "qualifyingPoints": {
            "type": "integer",
            "description": "The amount of qualifying points (xp) earned if the offer is purchased.",
            "format": "int64"
          },
          "ultimateQualifyingPoints": {
            "type": "integer",
            "description": "The amount of ultimate qualifying points (uxp) earned if the offer is purchased.",
            "format": "int64"
          },
          "detailsTextQualPoints": {
            "type": "string",
            "description": "The label accompanying the amount of XPs and UXPs earned."
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV1"
          },
          "flyingBlueAdvantages": {
            "$ref": "#/components/schemas/FlyingBlueAdvantages_UpsellOfferV1"
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "FreeSeatSelectionCondition": {
        "type": "object",
        "description": "Represents a free seat selection condition. It indicates whether or not a passenger can choose his seat for free on the flight (for example due to his FlyingBlue tier level).",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "GoShowCondition": {
        "type": "object",
        "description": "Represents a go-show condition. When allowed, a go-show condition permits the passenger to check in at an airport at an earlier time than the reserved one in hope to have an earlier flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "HandBaggageAllowanceCondition": {
        "type": "object",
        "description": "Represents the hand baggage allowance condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "IATACondition": {
        "type": "object",
        "description": "Represents a IATA condition. Iata conditions can be any condition used in the air industry. These are conditions retrieved in a best-effort strategy and returned in a raw format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "text": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            }
          }
        ]
      },
      "InfantDiscountCondition": {
        "type": "object",
        "description": "Represents an infant discount condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "farePercentage": {
                "type": "integer",
                "description": "The percentage of fare discount granted.",
                "format": "int32"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "ItineraryInformation_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_UpsellOfferV1"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_UpsellOfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "LoungeMilesUpgradeCondition": {
        "type": "object",
        "description": "Represents a condition granting a lounge access in case of a flight upgraded in miles.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "MandatoryUMCondition": {
        "type": "object",
        "description": "Represents a mandatory unacompannied minor (UM) condition. This condition indicates the passenger will benefit from the mandatory UM service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "MarketingFlightResponse_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV1"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_UpsellOfferV1"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_UpsellOfferV1"
          }
        },
        "description": "The marketing flight."
      },
      "MaximumStayCondition": {
        "type": "object",
        "description": "Represents the condition linked to the maximum duration of stay in a location after a flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "stayDuration": {
                "$ref": "#/components/schemas/StayDuration"
              },
              "daysOfWeekIncluded": {
                "type": "array",
                "description": "The days of week included in the stay condition.",
                "example": [
                  "Monday"
                ],
                "items": {
                  "type": "string",
                  "description": "The days of week included in the stay condition.",
                  "example": "[\"Monday\"]"
                }
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "MinimumStayCondition": {
        "type": "object",
        "description": "Represents the condition linked to the minimum duration of stay in a location after a flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "stayDuration": {
                "$ref": "#/components/schemas/StayDuration"
              },
              "daysOfWeekIncluded": {
                "type": "array",
                "description": "The days of week included in the stay condition.",
                "example": [
                  "Monday"
                ],
                "items": {
                  "type": "string",
                  "description": "The days of week included in the stay condition.",
                  "example": "[\"Monday\"]"
                }
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "Money_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "NoShowCondition": {
        "type": "object",
        "description": "Represents a no-show condition. When allowed, a no-show condition permits the passenger to be refunded or eligible to a free rebooking.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "waivedConditionTypes": {
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "OperatingFlight_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_UpsellOfferV1"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_UpsellOfferV1"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_UpsellOfferV1"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_UpsellOfferV1"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_UpsellOfferV1"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_UpsellOfferV1"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "affordable": {
            "type": "boolean",
            "description": "Flag to indicate if the user can afford the ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConditions": {
        "type": "array",
        "description": "Represents the conditions related to the products bought.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/ProductCondition_UpsellOfferV1"
        }
      },
      "ProductConnection_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_UpsellOfferV1"
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_UpsellOfferV1"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_UpsellOfferV1"
            }
          },
          "conditions": {
            "type": "array",
            "description": "The list of ticket-conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_UpsellOfferV1"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_UpsellOfferV1"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_UpsellOfferV1"
          },
          "travelClassText": {
            "type": "string",
            "description": "The text describing the travel class information.",
            "example": "You will be travelling in D Class with fare basis D3FFWFR."
          },
          "tripText": {
            "type": "string",
            "description": "A brief description of the trip.",
            "example": "Lisbon, Humberto Delgado Airport (LIS) to Milan, Malpensa Airport (MXP)"
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the fare applies to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_UpsellOfferV1"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_UpsellOfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/Cabin_UpsellOfferV1"
          },
          "sellingClass": {
            "$ref": "#/components/schemas/SellingClass_UpsellOfferV1"
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_UpsellOfferV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_UpsellOfferV1"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_UpsellOfferV1"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_UpsellOfferV1"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV1"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_UpsellOfferV1"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_UpsellOfferV1"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_UpsellOfferV1"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "SellingClass_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the selling class (eg: Z, L, O, V etc.).",
            "example": "Z"
          }
        },
        "description": "The selling class (also called booking class). It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
        "example": "V"
      },
      "SeniorCardCondition": {
        "type": "object",
        "description": "Represents a senior card condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "SkyPriorityCondition": {
        "type": "object",
        "description": "Represents a sky-priority condition. The SkyPriority condition grants priority access at the airport, every step of the way, from check-in, baggage drop-off and delivery, to security and boarding.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "isAllowed": {
                "type": "boolean",
                "writeOnly": true
              },
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "waivedConditions": {
                "type": "array",
                "description": "The type/cause of the waived condition.",
                "items": {
                  "type": "string",
                  "description": "Represents the type or cause of a waived condition.",
                  "enum": [
                    "DEATH",
                    "ILLNESS",
                    "FAMILY_DEATH",
                    "FAMILY_ILLNESS",
                    "SCHEDULE_CHANGE",
                    "TICKET_UPGRADE"
                  ]
                }
              },
              "allowed": {
                "type": "boolean",
                "description": "A flag indicating whether the condition is allowed or not."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "SkyPriorityMilesUpgradeCondition": {
        "type": "object",
        "description": "Represents a sky-priority condition for an upgraded flight.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "State_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_UpsellOfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_UpsellOfferV1"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StayDuration": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The duration value in the given unit.",
            "format": "int32"
          },
          "stayUnit": {
            "type": "string",
            "description": "The time unit of the duration.",
            "enum": [
              "MINUTE",
              "DAY",
              "WEEK",
              "MONTH",
              "NIGHT",
              "HOUR"
            ]
          }
        },
        "description": "Represents a duration of stay in a given location."
      },
      "StopoverStation_UpsellOfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_UpsellOfferV1"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_UpsellOfferV1"
          }
        },
        "description": "Represents a station stopover."
      },
      "StudentCardCondition": {
        "type": "object",
        "description": "Represents a student card condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "Surcharge_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "UpsellOffersResponse_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_UpsellOfferV1"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV1"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_UpsellOfferV1"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_UpsellOfferV1"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV1"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          },
          "flyingBlueAdvantages": {
            "$ref": "#/components/schemas/FlyingBlueAdvantages_UpsellOfferV1"
          }
        },
        "description": "Represents an upsell offers response."
      },
      "YouthCardCondition": {
        "type": "object",
        "description": "Represents the youth card condition.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionWrapper_UpsellOfferV1"
          },
          {
            "type": "object",
            "properties": {
              "fee": {
                "$ref": "#/components/schemas/Fee"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText"
              },
              "detailsText": {
                "type": "string",
                "description": "The details text describing the conditions."
              },
              "conditionTitleLabel": {
                "type": "string",
                "description": "The title of the condition."
              }
            }
          }
        ]
      },
      "BasicConnectionRequest_SearchContextItineraryV1": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_SearchContextItineraryV1"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "Customer_SearchContextItineraryV1": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_SearchContextItineraryV1"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "Link_SearchContextItineraryV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Passenger_SearchContextItineraryV1": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SearchContextItineraryRequest_SearchContextItineraryV1": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "passengers",
          "requestedConnections"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_SearchContextItineraryV1"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_SearchContextItineraryV1"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/BasicConnectionRequest_SearchContextItineraryV1"
            }
          }
        },
        "description": "Represents the search-context itinerary request."
      },
      "TravelCompanion_SearchContextItineraryV1": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "LocationSpecificRemark_SearchContextItineraryV1": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "SearchContextItineraryResponse_SearchContextItineraryV1": {
        "type": "object",
        "properties": {
          "availableCommercialCabins": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available commercial cabins on the itinerary.",
            "items": {
              "type": "string",
              "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST"
              ]
            }
          },
          "itineraryType": {
            "type": "string",
            "description": "The type of itinerary.",
            "example": "ONE_WAY"
          },
          "haulType": {
            "type": "string",
            "description": "The haul type of the itinerary.",
            "example": "SH",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_SearchContextItineraryV1"
            }
          }
        },
        "description": "Represents the search-context itinerary response."
      },
      "Customer_FareV1": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_FareV1"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_FareV1": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "The requested date interval",
        "example": "2019-10-23/2020-06-30"
      },
      "Link_FareV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LowestFareRequest_FareV1": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV1"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV1"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV1"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV1"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a lowest fare request."
      },
      "OfferConnectionRequest_FareV1": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_FareV1"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV1"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV1"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_FareV1": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_FareV1": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_FareV1"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_FareV1"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_FareV1": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "Cabin_FareV1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "City_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FareV1"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_FareV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_FareV1": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV1"
          },
          "departureDate": {
            "type": "string",
            "description": "Departure date of the trip.",
            "format": "date"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "origin": {
            "$ref": "#/components/schemas/StationGroup_FareV1"
          },
          "destination": {
            "$ref": "#/components/schemas/StationGroup_FareV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV1"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_FareV1": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_FareV1": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_FareV1": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "FareBasis_FareV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The fare basis code.",
            "example": "CS50BENB"
          }
        },
        "description": "Represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare. ",
        "example": "VSF0FB"
      },
      "FlightProduct_FareV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "calculationTimestamp": {
            "type": "string",
            "description": "The date and time at which the data related to this product have been calculated by the providing service.",
            "format": "date-time"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_FareV1"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV1"
          },
          "type": {
            "type": "string",
            "description": "The different periods of time that can be considered when requesting lowest fares.",
            "enum": [
              "DAY",
              "MONTH",
              "OVERALL"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV1"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_FareV1": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_FareV1": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_FareV1"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_FareV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_FareV1"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_FareV1": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "LowestFareResponse_FareV1": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_FareV1"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_FareV1"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_FareV1"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_FareV1"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_FareV1"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_FareV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV1"
            }
          }
        },
        "description": "Represents a lowest fare response."
      },
      "PricePerPassengerType_FareV1": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_FareV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_FareV1": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_FareV1"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_FareV1"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_FareV1"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_FareV1": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_FareV1"
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_FareV1"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_FareV1"
            }
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_FareV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FareV1"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_FareV1": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/Cabin_FareV1"
          },
          "sellingClass": {
            "$ref": "#/components/schemas/SellingClass_FareV1"
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_FareV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_FareV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_FareV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "SearchMetadata_FareV1": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_FareV1"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_FareV1"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SellingClass_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the selling class (eg: Z, L, O, V etc.).",
            "example": "Z"
          }
        },
        "description": "The selling class (also called booking class). It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
        "example": "V"
      },
      "State_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FareV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FareV1"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StationGroup_FareV1": {
        "type": "object",
        "properties": {
          "airport": {
            "$ref": "#/components/schemas/StationStopover_FareV1"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FareV1"
          }
        },
        "description": "Represents a group of a stopover and city."
      },
      "StationStopover_FareV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FareV1"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "Surcharge_FareV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "CalendarRequest_FareV1": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_FareV1"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_FareV1"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_FareV1"
            }
          },
          "includeCarriers": {
            "type": "array",
            "description": "The carriers that should be used in the offers requested.",
            "items": {
              "type": "string",
              "description": "The carriers that should be used in the offers requested."
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FareV1"
          },
          "fixCalendarSize": {
            "type": "integer",
            "description": "The size of the calendar in days.",
            "format": "int32"
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents a calendar request."
      },
      "AvailableOffersRequest_OfferV1": {
        "required": [
          "bookingFlow",
          "commercialCabins",
          "customer",
          "focusedConnection",
          "passengers",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "passengers": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of passengers for which the offers are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV1"
            }
          },
          "commercialCabins": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "description": "The commercial cabins accepted for the offers requested. The commercial cabin has an impact on the quality of accomodation & services and the price of the offers returned.",
            "items": {
              "type": "string",
              "description": "Represents the possible commercial cabins, including the \"ALL\" option. Commercial cabins represent the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
              "enum": [
                "ECONOMY",
                "PREMIUM",
                "BUSINESS",
                "FIRST",
                "ALL"
              ]
            }
          },
          "withUpsellCabins": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the upsell cabins should be included."
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer_OfferV1"
          },
          "passengerCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "The specification of the passengers for which the offers are requested.",
              "format": "int32"
            },
            "description": "The specification of the passengers for which the offers are requested.",
            "deprecated": true
          },
          "currency": {
            "pattern": "[A-Z]{3}",
            "type": "string",
            "description": "The currency used for prices in response.  Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation. Only in case of rebooking, or upgrade.",
            "example": "5aef3459-b35d-462d-beec-86964157dde0"
          },
          "fareOption": {
            "type": "string",
            "description": "The different options to target a specific fare.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "negotiatedFareOnly": {
            "type": "boolean",
            "description": "A flag to request only negotiated fares (and not public ones), in corporate businessFlow.",
            "example": false
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          },
          "focusedConnection": {
            "minimum": 0,
            "type": "integer",
            "description": "The index to the connection to retrieve (starting from 0), 0 for the outbound, 1 for the inbound",
            "format": "int32",
            "example": 0
          },
          "displayPriceContent": {
            "type": "string",
            "description": "The different formats and content for the displayPrice value.",
            "enum": [
              "ALL_PAX",
              "ALL_PAX_ROUNDED"
            ]
          },
          "shortest": {
            "type": "boolean",
            "description": "Indicates whether shortest route should be found and favoured. Otherwise lowest fare is found. This option is valid ONLY when the \"booking flow\" is not set or set to\"Leisure\".",
            "example": false
          },
          "lowestFareCombination": {
            "type": "boolean",
            "description": "The boolean indicates whether or not the flight for each bound should be selected with the lowest price"
          },
          "requestedConnections": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of requested connections.",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionRequest_OfferV1"
            }
          },
          "fallbackMode": {
            "type": "string",
            "description": "The fallback mode of the filtering process.",
            "enum": [
              "ANY",
              "FAREFAMILY",
              "NONE"
            ]
          },
          "productId": {
            "type": "string"
          }
        },
        "description": "Represents an available offer request."
      },
      "Customer_OfferV1": {
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
            "type": "string",
            "description": "The profile id of the customer. Used to retrieve his profile from the persistance layer.",
            "example": "f266c633-d32e-4211-9701-881740fa3a39"
          },
          "cardKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the subscriber card the customer wants to use.",
            "format": "int32",
            "example": 0
          },
          "corporateContractKey": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the corporate contract the customer wants to use.",
            "format": "int32",
            "example": 2
          },
          "selectedTravelCompanions": {
            "type": "array",
            "description": "The companions of the customer (from his profile, or contract) that will travel as passengers on the flight.",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_OfferV1"
            }
          }
        },
        "description": "The specification of the customer information."
      },
      "DateInterval_OfferV1": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection."
      },
      "Link_OfferV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OfferConnectionRequest_OfferV1": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the connection in minutes (including flights and transfers).",
            "format": "int32",
            "example": 53
          },
          "fareBasis": {
            "type": "string",
            "description": "Fare basis applicable to the connection as selected.",
            "example": "HL50BARU"
          },
          "minDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "maxDaysOfStay": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "centralDateInterval": {
            "type": "string",
            "description": "The central date used to compute a date interval around this date. The offers will be searched in this interval. Conditional: must be filled with the dayInterval parameter.",
            "format": "date"
          },
          "dayInterval": {
            "type": "integer",
            "description": "Used to compute a date interval in which the offers will be searched. Conditional: must be filled with the centralDateInterval parameter.",
            "format": "int32",
            "example": 7
          },
          "segments": {
            "maxItems": 0,
            "minItems": 0,
            "type": "array",
            "description": "The list of segments constituting the connection requested. Conditional: Either origin & destination of the connection are supplied or segments are supplied.",
            "items": {
              "$ref": "#/components/schemas/SegmentRequest_OfferV1"
            }
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV1"
          },
          "fareFamilyCode": {
            "type": "string",
            "description": "The fare family of the connection. Conditional: Must not be supplied when origin & destination are supplied. Can be supplied when segments are supplied.",
            "example": "STANDLH"
          },
          "fareFamilyHierarchy": {
            "type": "integer",
            "description": "The fare family hierarchy of the connection.",
            "format": "int32",
            "example": 7000
          },
          "estimatedFlightTime": {
            "type": "integer",
            "description": "The estimated flight time in minutes.",
            "format": "int32",
            "example": 1430
          },
          "fareFamilyBundleCode": {
            "type": "string",
            "description": "The fareFamily bundle code.",
            "example": "STDE"
          },
          "toChange": {
            "type": "boolean",
            "description": "A flag to specify if the connection must be kept or changed. Only in rebooking or upgrade."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "The requested connection."
      },
      "Passenger_OfferV1": {
        "required": [
          "id",
          "pnrId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "The id identifying the passenger uniquely in the request.",
            "format": "int32",
            "example": 0
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "CHD",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "pnrId": {
            "type": "integer",
            "description": "The id of the PNR (Passenger Name Record), identifying the reservation of the passenger. Only to be set in rebooking.",
            "format": "int32",
            "example": 2
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date",
            "example": 1581724800000
          },
          "minAge": {
            "type": "integer",
            "description": "A lower bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 2
          },
          "maxAge": {
            "type": "integer",
            "description": "An higher bound for the age of the passenger (used to estimate the type of the passenger).",
            "format": "int32",
            "example": 11
          },
          "ticketNumber": {
            "type": "string",
            "description": "The ticket number of the passenger in the PNR. Only to be set in rebooking.",
            "example": "0571437897330"
          }
        },
        "description": "The requested passenger of a flight."
      },
      "SegmentRequest_OfferV1": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_OfferV1"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_OfferV1"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "Stopover_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The destination location of the segment."
      },
      "TravelCompanion_OfferV1": {
        "required": [
          "passengerId",
          "travelerKey"
        ],
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The ID of the associated passenger in the request.",
            "format": "int32",
            "example": 3
          },
          "travelerKey": {
            "type": "integer",
            "description": "The key used to retrieve the traveler details from the persistance layer.",
            "format": "int32",
            "example": 1
          },
          "travelerSource": {
            "type": "string",
            "description": "Represents the source from which a travel companion can come from.",
            "example": "PROFILE",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        },
        "description": "Represents a travel companion who is a potential traveler, registered as part of the logged in customer's inner circle (can be a member of a corporate contract, a friend, a family member, etc.)"
      },
      "AbnormalResponseDescriptor_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The code of the anomaly.",
            "format": "int32",
            "example": 2200
          },
          "name": {
            "type": "string",
            "description": "The name of the anomaly.",
            "example": "OFA/TECHNICAL/INVALID_VALUE"
          },
          "description": {
            "type": "string",
            "description": "The description of the anomaly.",
            "example": "origin city must be different from destination city AND neither or both O&D can be null at the same time"
          },
          "errorInInputPath": {
            "type": "string",
            "description": "The path to the input element that raised the error/warning.",
            "example": "requestedConnections[1]"
          },
          "errorInOutputPath": {
            "type": "string",
            "description": "The path to the output element that raised the error/warning.",
            "example": "itineraries"
          },
          "requestContextId": {
            "type": "string",
            "description": "The id of the request to be able to find more elements in the logs about the incident.",
            "example": "32ebe5ce-6344-4589-bcea-ad192800fcd3"
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "description": "The type of errors.",
            "example": "[UNSUPPORTED_ITINERARY]",
            "items": {
              "type": "string",
              "description": "The type of errors.",
              "example": "[UNSUPPORTED_ITINERARY]",
              "enum": [
                "UNSUPPORTED_ITINERARY"
              ]
            }
          }
        },
        "description": "Represents the descriptor of a warning or error incident."
      },
      "AvailableOffersResponse_OfferV1": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "The list of itineraries matching the request.",
            "items": {
              "$ref": "#/components/schemas/Itinerary_OfferV1"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV1"
          },
          "contextInformation": {
            "$ref": "#/components/schemas/ContextInformation_OfferV1"
          },
          "itineraryInformation": {
            "$ref": "#/components/schemas/ItineraryInformation_OfferV1"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV1"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          },
          "negotiatedFareAvailable": {
            "type": "boolean",
            "description": "A flag to indicate if negotiated fares are available (in case of bookingFlow corporate)."
          }
        },
        "description": "Represents an available offer response."
      },
      "Cabin_OfferV1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "Carrier_OfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_OfferV1"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "CommercialCabin_OfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the commercial cabin. The label is translated.",
            "example": "Economy Class"
          }
        },
        "description": "The commercial cabin represents the different qualities of accomodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane)."
      },
      "ConnectionResponse_OfferV1": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_OfferV1"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_OfferV1"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_OfferV1"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "ContextInformation_OfferV1": {
        "type": "object",
        "properties": {
          "marketRedirectText": {
            "type": "string",
            "description": "Contextual message about a dynamic change in market.",
            "example": "Because of the country or region of departure you have chosen Germany, all prices will be shown in EUR."
          }
        },
        "description": "Contextual information about the request."
      },
      "Disclaimer_OfferV1": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "EnvironmentalInformation_OfferV1": {
        "type": "object",
        "properties": {
          "co2InKg": {
            "type": "integer",
            "description": "The CO2 value in kg",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "The text displayed for environmental information"
          }
        },
        "description": "Contains environmental information"
      },
      "EquipmentType_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FareBasis_OfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The fare basis code.",
            "example": "CS50BENB"
          }
        },
        "description": "Represents a fare basis which is a alphabetic or alpha-numeric code used to identify a fare type and the rules applicable to that fare. ",
        "example": "VSF0FB"
      },
      "FareFamily_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "FlightCharacteristic_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightOnTime_OfferV1": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "FlightProduct_OfferV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/ProductConnection_OfferV1"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "Represents a flight product offer. It contains all the data related to the fare."
      },
      "ItineraryInformation_OfferV1": {
        "type": "object",
        "properties": {
          "co2CompensationText": {
            "type": "string",
            "description": "Contextual information related to the CO2 compensation of the flight.",
            "example": "Fly green: Air France flights in metropolitan France are now 100% carbon neutral."
          },
          "travelCorridorText": {
            "type": "string",
            "description": "Contextual information related to the travel corridor program.",
            "example": "We offer quarantine-free travel to Singapore on selected Air France flights for fully vaccinated passengers, as part of Singapore’s Vaccinated Travel Lane (VTL) initiative. To board these designated VTL flights, please ensure you meet all the VTL requirements. These flights are labeled as a “VTL flight”"
          }
        },
        "description": "Contextual information about the itinerary."
      },
      "Itinerary_OfferV1": {
        "type": "object",
        "properties": {
          "flightProducts": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/FlightProduct_OfferV1"
            }
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_OfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_OfferV1"
            }
          }
        },
        "description": "Represents a flight itinerary."
      },
      "LocationSpecificRemark_OfferV1": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_OfferV1": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV1"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_OfferV1"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_OfferV1"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_OfferV1": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_OfferV1"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_OfferV1"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_OfferV1"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "PricePerPassengerType_OfferV1": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "PricePerPassenger_OfferV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV1"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger. Only applies to rebooking a ticket.",
            "example": 5.5
          }
        },
        "description": "Price specification per passenger."
      },
      "Price_OfferV1": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge_OfferV1"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType_OfferV1"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV1"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "ProductConnection_OfferV1": {
        "type": "object",
        "properties": {
          "numberOfSeatsAvailable": {
            "type": "integer",
            "description": "The number of seats available on this connection.",
            "format": "int32",
            "example": 7
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_OfferV1"
          },
          "negotiatedFare": {
            "type": "boolean",
            "description": "Flag indicating if the fare is a negotiated one, in case of corporate booking flow.",
            "example": false
          },
          "promotion": {
            "$ref": "#/components/schemas/Promotion_OfferV1"
          },
          "hasPromoOnUpperFare": {
            "type": "boolean",
            "description": "A flag indicating if there is a promotion on the upper fare."
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/ProductSegment_OfferV1"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_OfferV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: SAF) the passenger will have access to on this connection.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "continuousPricing": {
            "type": "boolean",
            "description": "The flag to indicate if continuous pricing is applied to the fare.",
            "example": false
          },
          "price": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "taxDetails": {
            "$ref": "#/components/schemas/Price_OfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "Represents the connection of a flight product."
      },
      "ProductSegment_OfferV1": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/Cabin_OfferV1"
          },
          "sellingClass": {
            "$ref": "#/components/schemas/SellingClass_OfferV1"
          },
          "fareBasis": {
            "$ref": "#/components/schemas/FareBasis_OfferV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment in a connection of a flight product."
      },
      "Product_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the product (eg: 0B5_CH_L, 0B5_CH_O).",
            "example": "0B5_CH_L"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial label describing the product.",
            "example": "Extra legroom seat"
          }
        },
        "description": "A product (eg: Extra legroom seat, Front section seat etc.), that can be bought along the ticket."
      },
      "Promotion_OfferV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification of the promotion.",
            "example": "leisurePromo"
          },
          "title": {
            "type": "string",
            "description": "Title of the promotion in the language as specified in Content-Language header.",
            "example": "Promotarief"
          }
        },
        "description": "Represents a promotion.",
        "nullable": true
      },
      "RatingCategory_OfferV1": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_OfferV1": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_OfferV1"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SearchMetadata_OfferV1": {
        "type": "object",
        "properties": {
          "availableCommercialCabinsPerConnections": {
            "type": "array",
            "description": "A list of available commercial cabins.",
            "items": {
              "type": "array",
              "description": "A list of available commercial cabins.",
              "items": {
                "$ref": "#/components/schemas/CommercialCabin_OfferV1"
              }
            }
          },
          "environmentalInformation": {
            "$ref": "#/components/schemas/EnvironmentalInformation_OfferV1"
          }
        },
        "description": "Represents search metadata response information."
      },
      "SegmentResponse_OfferV1": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV1"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_OfferV1"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV1"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_OfferV1"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "SellingClass_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the selling class (eg: Z, L, O, V etc.).",
            "example": "Z"
          }
        },
        "description": "The selling class (also called booking class). It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
        "example": "V"
      },
      "State_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_OfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_OfferV1"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_OfferV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_OfferV1"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_OfferV1"
          }
        },
        "description": "Represents a station stopover."
      },
      "Surcharge_OfferV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the surcharge (can be used to indicate if it's a booking fee).",
            "example": "BookingFee"
          },
          "amount": {
            "type": "number",
            "description": "Amount applicable to the surcharge.",
            "example": 4.5
          }
        },
        "description": "Represents a price surcharge."
      },
      "AvailableOffersSelfConnectResponse_OfferV1": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "Represents an abstract self connect offer response",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_OfferV1"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_OfferV1"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_OfferV1"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_OfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "Represents a self connect offers response."
      },
      "SelfConnectFlightProduct_OfferV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV1"
          },
          "services": {
            "type": "array",
            "description": "The services linked with the offer.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectService_OfferV1"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_OfferV1"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_OfferV1": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_OfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_OfferV1"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_OfferV1": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_OfferV1": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_OfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV1"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_OfferV1": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/Cabin_OfferV1"
          },
          "sellingClass": {
            "$ref": "#/components/schemas/SellingClass_OfferV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_OfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "SelfConnectService_OfferV1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of service.",
            "example": "DOHOP_CONNECT_SERVICE"
          },
          "label": {
            "type": "string",
            "description": "The label describing the service.",
            "example": "Guaranteed connection. Protects you from flight cancellations."
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_OfferV1"
          }
        },
        "description": "Represents a self connect service."
      },
      "CustomerProfile": {
        "type": "object",
        "properties": {
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "resourceId": {
            "type": "string"
          },
          "corporateAccountKey": {
            "type": "integer",
            "format": "int32"
          },
          "subscriberContractKey": {
            "type": "integer",
            "format": "int32"
          },
          "corporateContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateContract"
            }
          },
          "subscriberContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SubscriberContract"
            }
          },
          "possibleTravelersFromProfile": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler"
            }
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard"
          },
          "reservationUsersByPnrId": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReservationUser"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "TRAVEL_ARRANGER"
            ]
          },
          "email": {
            "type": "string"
          },
          "reservationId": {
            "type": "string"
          },
          "selectedTravelCompanions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion"
            }
          },
          "expiryDateTimeUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The profile of the customer searching for the flight."
      },
      "PriceSearchCriteria": {
        "type": "object",
        "properties": {
          "flightProductId": {
            "type": "string"
          },
          "passengerList": {
            "$ref": "#/components/schemas/PassengerList"
          },
          "customerProfile": {
            "$ref": "#/components/schemas/CustomerProfile"
          },
          "currencyCode": {
            "type": "string",
            "description": "The code of the currency that should be used for price information.",
            "example": "EUR"
          }
        },
        "description": "Represents a saerch criteria to retrieve price details about an offer."
      },
      "ReservationUser": {
        "type": "object",
        "properties": {
          "pnrId": {
            "type": "string"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard"
          }
        }
      },
      "PriceBreakdown": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "$ref": "#/components/schemas/Money"
          },
          "totalFare": {
            "$ref": "#/components/schemas/Money"
          },
          "totalTaxes": {
            "$ref": "#/components/schemas/Money"
          },
          "totalProducts": {
            "$ref": "#/components/schemas/Money"
          },
          "totalPenalty": {
            "$ref": "#/components/schemas/Money"
          },
          "totalTaxesWithoutAirTransportationSurcharges": {
            "$ref": "#/components/schemas/Money"
          },
          "totalSurcharges": {
            "type": "array",
            "description": "The list of total surcharges for all passengers.",
            "items": {
              "$ref": "#/components/schemas/Surcharge"
            }
          },
          "totalAirTransportationSurcharges": {
            "type": "array",
            "description": "The list of total Air Transportation Surcharges for all passengers.",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PriceBreakdownPerPassengerType"
            }
          },
          "currency": {
            "type": "string",
            "description": "The currency used. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          }
        },
        "description": "Represents a price breakdown."
      },
      "PriceBreakdownPerPassengerType": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "fareDetails": {
            "type": "array",
            "description": "The detail of the fares applicable per passenger",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          },
          "taxes": {
            "type": "array",
            "description": "The detailed taxes price as applicable for the passenger type.",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          },
          "taxesAmount": {
            "type": "number",
            "description": "The total taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge"
            }
          },
          "airTransportationSurcharges": {
            "type": "array",
            "description": "Air Transportation Surchages applicable per passenger",
            "items": {
              "$ref": "#/components/schemas/TaxBreakdown"
            }
          }
        },
        "description": "Price breakdown specification per passenger type."
      },
      "TaxBreakdown": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the type of tax.",
            "example": "YC"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "name": {
            "type": "string",
            "description": "Name of the tax. Translated in the language as specified in ContentLanguage header.",
            "example": "US customs user fee"
          },
          "type": {
            "type": "string",
            "description": "The type of tax-breakdown.",
            "example": "AIRLINE",
            "enum": [
              "AIRLINE",
              "AIRPORT"
            ]
          }
        },
        "description": "Tax breakdown."
      },
      "TaxBreakdownResponse": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          "priceInMiles": {
            "$ref": "#/components/schemas/PriceBreakdown"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Response of the /tax-breakdown endpoint."
      },
      "PriceDetailsResponse": {
        "type": "object",
        "properties": {
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails"
          }
        },
        "description": "Represents the response of the price-details service."
      },
      "DealCabin_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the commercial cabin.",
            "example": "Economy"
          }
        },
        "description": "Represents the cabin of a deal."
      },
      "DealTripType_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Represents the different types of trip (one way, round trip etc.).",
            "example": "OW",
            "enum": [
              "ALL",
              "RT",
              "OW"
            ]
          },
          "label": {
            "type": "string",
            "description": "The trip type label.",
            "example": "One-way"
          }
        },
        "description": "Represents the type of trip of a deal."
      },
      "DealsByCabinDetails_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/DealCabin_BestFareOfferReferenceData"
          },
          "numberOfDeals": {
            "type": "integer",
            "description": "The number of deals.",
            "format": "int32"
          },
          "priceRangeByTripType": {
            "type": "array",
            "description": "The price boundaries (lowest and highest) by trip type (OW,RT).",
            "items": {
              "$ref": "#/components/schemas/PriceRangeByTripType_BestFareOfferReferenceData"
            }
          }
        },
        "description": "Represents the details of a cabin having deals defined."
      },
      "DefaultValues_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferReferenceData"
          },
          "destination": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferReferenceData"
          },
          "tripType": {
            "$ref": "#/components/schemas/DealTripType_BestFareOfferReferenceData"
          },
          "cabin": {
            "$ref": "#/components/schemas/DealCabin_BestFareOfferReferenceData"
          }
        },
        "description": "Represents the values to be set as default for a deal."
      },
      "DestinationDeals_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "zone": {
            "$ref": "#/components/schemas/Zone_BestFareOfferReferenceData"
          },
          "destinations": {
            "uniqueItems": true,
            "type": "array",
            "description": "The destinations having deals and belonging to this zone.",
            "items": {
              "$ref": "#/components/schemas/LocationDeal_BestFareOfferReferenceData"
            }
          },
          "cabins": {
            "type": "array",
            "description": "The deals defined for the zone grouped by cabin.",
            "items": {
              "$ref": "#/components/schemas/DealsByCabinDetails_BestFareOfferReferenceData"
            }
          }
        },
        "description": "Represents a destination zone having deals defined."
      },
      "LocationDeal_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          },
          "city": {
            "$ref": "#/components/schemas/Location_BestFareOfferReferenceData"
          }
        },
        "description": "Represents the location of a deal."
      },
      "Location_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of location.",
            "example": "CITY",
            "enum": [
              "AIRPORT",
              "RAILWAY_STATION",
              "CITY"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label of the location.",
            "example": "Nice"
          }
        },
        "description": "Represents a location used in a trip."
      },
      "Money_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The highest price available for the deal.",
        "example": 350
      },
      "OriginDeals_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/LocationDeal_BestFareOfferReferenceData"
          },
          "destinationZoneCodes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The possible destinations available from this origin.",
            "example": [
              "EUR",
              "AFRIO",
              "ME",
              "FR"
            ],
            "items": {
              "type": "string",
              "description": "The possible destinations available from this origin.",
              "example": "[\"EUR\",\"AFRIO\",\"ME\",\"FR\"]"
            }
          }
        },
        "description": "Represents an origin for which there are deals defined and the possible destinations available from this origin."
      },
      "PriceRangeByTripType_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "tripType": {
            "$ref": "#/components/schemas/DealTripType_BestFareOfferReferenceData"
          },
          "range": {
            "$ref": "#/components/schemas/PriceRange_BestFareOfferReferenceData"
          }
        },
        "description": "Represents the price range (lowest and highest prices) by trip type (one way, round trip)."
      },
      "PriceRange_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "lowestPrice": {
            "$ref": "#/components/schemas/Money_BestFareOfferReferenceData"
          },
          "highestPrice": {
            "$ref": "#/components/schemas/Money_BestFareOfferReferenceData"
          }
        },
        "description": "Represents the price range for a deal."
      },
      "ReferenceDataDealsResponse_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "The market for which the deals are defined."
          },
          "currency": {
            "type": "string",
            "description": "The currency in which the deals are priced."
          },
          "origins": {
            "type": "array",
            "description": "The origins of the deals.",
            "items": {
              "$ref": "#/components/schemas/OriginDeals_BestFareOfferReferenceData"
            }
          },
          "destinationsByZone": {
            "type": "array",
            "description": "The destinations of the deals grouped by geographical zones.",
            "items": {
              "$ref": "#/components/schemas/DestinationDeals_BestFareOfferReferenceData"
            }
          },
          "tripTypes": {
            "type": "array",
            "description": "The trip types of the deals.",
            "items": {
              "$ref": "#/components/schemas/DealTripType_BestFareOfferReferenceData"
            }
          },
          "cabins": {
            "type": "array",
            "description": "The cabins of the deals.",
            "items": {
              "$ref": "#/components/schemas/DealCabin_BestFareOfferReferenceData"
            }
          },
          "defaultValues": {
            "$ref": "#/components/schemas/DefaultValues_BestFareOfferReferenceData"
          }
        },
        "description": "response of the /reference-data/deals endpoint."
      },
      "Zone_BestFareOfferReferenceData": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the zone.",
            "example": "AFRIO"
          },
          "label": {
            "type": "string",
            "description": "The label of the zone.",
            "example": "Africa and Indian Ocean"
          }
        },
        "description": "Represents a geographical zone of the world."
      },
      "AbstractRelatedProduct": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Element of a /related-products response. As of version 3 of the API, only type of product available is TimeToThinkProduct."
      },
      "Price": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "adjustedDisplayPrice": {
            "type": "number",
            "description": "The adjusted display price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "adjustedTotalPrice": {
            "type": "number",
            "description": "The adjusted total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "surcharges": {
            "type": "array",
            "description": "List of additional charges applied to an offer.",
            "items": {
              "$ref": "#/components/schemas/Surcharge"
            }
          },
          "pricePerPassengerTypes": {
            "type": "array",
            "description": "The individual prices grouped by passenger types.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassengerType"
            }
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The individual price by passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger"
            }
          },
          "dynamicWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a dynamic penalty waiver applies. The Dynamic Waiver is a commercial gesture which is used in case of \"abnormal\" operations (strike, meteorological conditions) in voluntary rebooking, and/or when the flight booked by the customer has been canceled (involuntary rebooking) etc.This waiver exempts the customer from paying the penalty fee or/and fare difference that normally apply in voluntary rebooking. Only applies when rebooking a ticket.",
            "example": true
          },
          "flexibilityWaiver": {
            "type": "boolean",
            "description": "Flag to indicate if a flexible penalty waiver applies. Only applies to rebooking a ticket.",
            "example": true
          },
          "affordability": {
            "type": "string",
            "description": "The affordability of a fare priced in miles, in reward booking flow.",
            "example": "FULLY",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "affordable": {
            "type": "boolean",
            "description": "Flag to indicate if the user can afford the ticket.",
            "example": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "PricePerPassengerType": {
        "type": "object",
        "properties": {
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "fare": {
            "type": "number",
            "description": "The fare price as applicable for the passenger type.",
            "example": 32.5
          },
          "taxes": {
            "type": "number",
            "description": "The taxes price as applicable for the passenger type.",
            "example": 32.5
          },
          "products": {
            "type": "number",
            "description": "The products price as applicable for the passenger type.",
            "example": 32.5
          },
          "surcharges": {
            "type": "array",
            "description": "Surcharges applicable per passenger. Conditional: surcharge applies to either a passenger or a PNR..",
            "items": {
              "$ref": "#/components/schemas/Surcharge"
            }
          },
          "price": {
            "type": "number",
            "description": "The price as applicable for the passenger type.",
            "example": 38.55
          },
          "penalty": {
            "type": "number",
            "description": "The penalty price as applicable for the passenger type. Only applies to rebooking a ticket.",
            "example": 5.5
          },
          "primaryPax": {
            "type": "boolean",
            "description": "The flag to indicate if the passenger type this price applies to is the primary pax type.",
            "example": true
          }
        },
        "description": "Price specification per passenger type."
      },
      "RelatedProductsResponse": {
        "type": "object",
        "properties": {
          "relatedProducts": {
            "type": "array",
            "description": "List of related products matching the lowest fare offers request.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimeToThinkProduct"
                }
              ]
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "Response of the /related-products endpoint."
      },
      "TimeToThinkProduct": {
        "type": "object",
        "description": "Time to Think product.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRelatedProduct"
          },
          {
            "type": "object",
            "properties": {
              "price": {
                "$ref": "#/components/schemas/Price"
              },
              "endDateTime": {
                "type": "string",
                "description": "The date/time when the time to think will expire.",
                "format": "date-time"
              },
              "timeToThinkHours": {
                "type": "integer",
                "description": "The validity duration (in hours) of the time to think.",
                "format": "int32",
                "example": 72
              },
              "type": {
                "type": "string",
                "description": "The time to think product type",
                "example": "timeToThink"
              }
            }
          }
        ]
      },
      "AircraftOwner_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "freeText": {
            "type": "string"
          },
          "codeLabel": {
            "type": "string"
          }
        }
      },
      "Amenity_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "WIFI",
              "SNACKS"
            ]
          },
          "code": {
            "type": "string"
          }
        }
      },
      "ClassDetail_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "sellingClass": {
            "type": "string"
          },
          "availabilityStatus": {
            "type": "string"
          },
          "commercialCabin": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "pricingProduct": {
            "type": "string"
          }
        }
      },
      "ConnectionIdentifier_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "segmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentIdentifier_FlightDetailsV3"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Connection_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment_FlightDetailsV3"
            }
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "relatedConnectionId": {
            "type": "integer",
            "format": "int32"
          },
          "co2Compensated": {
            "type": "boolean"
          },
          "travelCorridor": {
            "type": "boolean"
          },
          "flown": {
            "type": "boolean"
          },
          "origin": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          }
        }
      },
      "Currency_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "Equipment_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "acvCode": {
            "type": "string"
          },
          "bus": {
            "type": "boolean"
          },
          "limousine": {
            "type": "boolean"
          },
          "train": {
            "type": "boolean"
          },
          "aircraft": {
            "type": "boolean"
          }
        }
      },
      "FlightCode_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "marketingCarrier": {
            "$ref": "#/components/schemas/MarketingCarrier_FlightDetailsV3"
          },
          "flightNumber": {
            "type": "string"
          },
          "operationalSuffix": {
            "type": "string"
          },
          "wholeFlightCode": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          }
        }
      },
      "FlightDetailsSearchCriteria_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "selfConnectProductConnection": {
            "$ref": "#/components/schemas/SelfConnectProductConnection_FlightDetailsV3"
          },
          "bookingFlow": {
            "type": "string",
            "description": "The booking flow searched.",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "AGENT_BASED_PRIVATE_FARES",
              "STAFF"
            ]
          }
        },
        "description": "Represents the search criteria to obtain flight details."
      },
      "MarketingCarrier_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "Money_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        }
      },
      "OperatingFlightCode_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_FlightDetailsV3"
          },
          "carrierCode": {
            "type": "string"
          },
          "flightNumber": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          },
          "operatingFlightNumber": {
            "type": "string"
          }
        }
      },
      "OriginalSegmentInformation_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "originalSegmentId": {
            "type": "integer",
            "format": "int32"
          },
          "statusCode": {
            "type": "string"
          }
        }
      },
      "SegmentIdentifier_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_FlightDetailsV3"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_FlightDetailsV3"
          },
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_FlightDetailsV3"
          }
        }
      },
      "Segment_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_FlightDetailsV3"
          },
          "flightDuration": {
            "type": "integer",
            "format": "int32"
          },
          "technicalStops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TechnicalStop_FlightDetailsV3"
            }
          },
          "operatingFlightCode": {
            "$ref": "#/components/schemas/OperatingFlightCode_FlightDetailsV3"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_FlightDetailsV3"
          },
          "haulType": {
            "type": "string",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "classDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassDetail_FlightDetailsV3"
            }
          },
          "franchised": {
            "type": "boolean"
          },
          "cancelled": {
            "type": "boolean"
          },
          "codeShareType": {
            "type": "string",
            "enum": [
              "BLOCK_SPACE",
              "FREE_FLOW",
              "UNKNOWN"
            ]
          },
          "originalSegmentInformation": {
            "$ref": "#/components/schemas/OriginalSegmentInformation_FlightDetailsV3"
          },
          "numberOfStops": {
            "type": "integer",
            "format": "int32"
          },
          "amenities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amenity_FlightDetailsV3"
            }
          },
          "secureFlight": {
            "type": "boolean"
          },
          "isPrivateFare": {
            "type": "boolean"
          },
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_FlightDetailsV3"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "prime": {
            "type": "boolean"
          }
        }
      },
      "SelfConnectPrice_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_FlightDetailsV3"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_FlightDetailsV3"
          }
        }
      },
      "SelfConnectProductConnection_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/Connection_FlightDetailsV3"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_FlightDetailsV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_FlightDetailsV3"
          },
          "connectionIdentifier": {
            "$ref": "#/components/schemas/ConnectionIdentifier_FlightDetailsV3"
          },
          "viaStopovers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
            }
          },
          "origin": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "The self-connect product connections searched."
      },
      "SelfConnectProductSegment_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "segment": {
            "$ref": "#/components/schemas/Segment_FlightDetailsV3"
          },
          "cabinType": {
            "type": "string"
          },
          "commercialCabin": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stop_FlightDetailsV3"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_FlightDetailsV3"
          },
          "haulType": {
            "type": "string",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_FlightDetailsV3"
          },
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_FlightDetailsV3"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "operatingFlightCode": {
            "$ref": "#/components/schemas/OperatingFlightCode_FlightDetailsV3"
          },
          "technicalStops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TechnicalStop_FlightDetailsV3"
            }
          }
        }
      },
      "Stop_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "terminal": {
            "$ref": "#/components/schemas/Terminal_FlightDetailsV3"
          }
        }
      },
      "Stopover_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      },
      "TechnicalStop_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "stopover": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Terminal_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          }
        }
      },
      "Carrier_FlightDetailsV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FlightDetailsV3"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "ConnectionResponse_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FlightDetailsV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV3"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_FlightDetailsV3"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV3"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_FlightDetailsV3"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "DateInterval_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection. It depends on the dateInterval asked in request."
      },
      "EquipmentType_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV3"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FlightCharacteristic_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightDetailsResponse_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ConnectionResponse_FlightDetailsV3"
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_FlightDetailsV3"
            }
          }
        },
        "description": "Represents the flight details response."
      },
      "FlightOnTime_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "Link_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationSpecificRemark_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV3"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_FlightDetailsV3"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_FlightDetailsV3"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_FlightDetailsV3"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV3"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_FlightDetailsV3"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "RatingCategory_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_FlightDetailsV3"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV3"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SegmentResponse_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV3"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_FlightDetailsV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV3"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_FlightDetailsV3"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_FlightDetailsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FlightDetailsV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FlightDetailsV3"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_FlightDetailsV3": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FlightDetailsV3"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV3"
          }
        },
        "description": "Represents a station stopover."
      },
      "LocationSpecificRemark": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "SpecificRemarksResponse": {
        "type": "object",
        "properties": {
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark"
            }
          }
        },
        "description": "Represents the specific remarks response."
      },
      "SelfConnectFlightProduct_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV3"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "integer",
            "format": "int32"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_UpsellOfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV3"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "UpsellOffersSelfConnectResponse_UpsellOfferV3": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_UpsellOfferV3"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections.",
            "items": {
              "type": "array",
              "description": "The list of connections.",
              "items": {
                "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV3"
              }
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV3"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV3"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV3"
            }
          }
        },
        "description": "Represents a self-connect upsell offers response."
      },
      "BaggageAllowance_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggages allowed.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of baggage allowance quantities.",
            "enum": [
              "PIECES",
              "WEIGHT"
            ]
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV3"
          },
          "detailsText": {
            "type": "string",
            "description": "The details text describing the baggage allowance."
          },
          "handBaggageDetailsText": {
            "type": "string",
            "description": "The details text describing the hand baggage allowance."
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the baggage allowances."
          }
        },
        "description": "Represents a baggage allowance."
      },
      "CommercialText_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionWrapper_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "ConditionWrapper_TicketConditionsV3": {
            "type": "object",
            "properties": {
              "detailsText": {
                "type": "string"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText_TicketConditionsV3"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee_TicketConditionsV3"
              }
            },
            "description": "Represents a ticket condition."
          }
        }
      },
      "DateIntervalView_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Disclaimer_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "FareFamily_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlyingBlueAdvantages_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "extraBagQuantity": {
            "type": "integer",
            "description": "The extra number of bags the user is allowed to have.",
            "format": "int32"
          },
          "skyPriority": {
            "type": "boolean",
            "description": "A flag indicating whether the user is granted the skyPriority benefit or not."
          }
        },
        "description": "The advantages accorded to a FlyingBlue user due to his tier level."
      },
      "FlyingBlue_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "detailsText": {
            "type": "string",
            "description": "The label accompanying the amount of miles earned."
          },
          "detailsTextQualPoints": {
            "type": "string",
            "description": "The label accompanying the amount of XPs and UXPs earned."
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV3"
          },
          "flyingBlueAdvantages": {
            "$ref": "#/components/schemas/FlyingBlueAdvantages_TicketConditionsV3"
          },
          "earnedUltimateQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedMiles": {
            "type": "integer",
            "format": "int64"
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the flying blue advantages."
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "Link_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Money_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "PassengerTicketConditionsWrapper_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The id of the passenger.",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AdvancePurchaseCondition"
                },
                {
                  "$ref": "#/components/schemas/BlueBizCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCovidCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/CarrierFeesCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChildrenDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/DedicatedOverheadBinSpaceCondition"
                },
                {
                  "$ref": "#/components/schemas/DeplaneQuicklyCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXPMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXpCondition"
                },
                {
                  "$ref": "#/components/schemas/FreeSeatSelectionCondition"
                },
                {
                  "$ref": "#/components/schemas/GoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/HandBaggageAllowanceCondition"
                },
                {
                  "$ref": "#/components/schemas/IATACondition"
                },
                {
                  "$ref": "#/components/schemas/InfantDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/LoungeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/MandatoryUMCondition"
                },
                {
                  "$ref": "#/components/schemas/MaximumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/MinimumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/NoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/ProductConditions"
                },
                {
                  "$ref": "#/components/schemas/SeniorCardCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/StudentCardCondition"
                },
                {
                  "$ref": "#/components/schemas/YouthCardCondition"
                }
              ]
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV3"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV3"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV3"
          },
          "travelClassText": {
            "type": "string",
            "writeOnly": true
          },
          "tripText": {
            "type": "string",
            "writeOnly": true
          }
        },
        "description": "Represents the ticket-conditions for a given passenger."
      },
      "Passenger_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id identifying the passenger uniquely on the flight.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "typeWithoutCard": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "availableCard": {
            "type": "string",
            "description": "The discount card associated with the passenger.",
            "enum": [
              "SENIOR",
              "YOUTH"
            ]
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date"
          },
          "primaryPassenger": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger is considered to be the primary one (i.e. the passenger considered when computing some information like the price, fare benefits etc."
          }
        },
        "description": "The passenger of a flight."
      },
      "TicketConditionsConnection_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "The list of ticket-conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionWrapper_TicketConditionsV3"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV3"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV3"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV3"
          },
          "travelClassText": {
            "type": "string",
            "writeOnly": true
          },
          "tripText": {
            "type": "string",
            "description": "A brief description of the trip.",
            "example": "Lisbon, Humberto Delgado Airport (LIS) to Milan, Malpensa Airport (MXP)"
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the conditions apply to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV3"
            }
          },
          "conditionsPerPassenger": {
            "type": "array",
            "description": "The ticket-conditions per passenger.",
            "items": {
              "$ref": "#/components/schemas/PassengerTicketConditionsWrapper_TicketConditionsV3"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV3"
            }
          }
        },
        "description": "Represents the ticket-conditions for a connection."
      },
      "TicketConditionsResponse_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_TicketConditionsV3"
            }
          },
          "sameConditions": {
            "type": "boolean",
            "description": "Indicates whether the same conditions apply to all connections of the flight product."
          },
          "connections": {
            "type": "array",
            "description": "The ticket-conditions per connection of the product.",
            "items": {
              "$ref": "#/components/schemas/TicketConditionsConnection_TicketConditionsV3"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV3"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV3"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_TicketConditionsV3"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV3"
            }
          }
        },
        "description": "Represents the ticket-conditions response."
      },
      "Area_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "countries": {
            "type": "array",
            "description": "The list of countries making part of the area.",
            "items": {
              "$ref": "#/components/schemas/Country_ReferenceDataV3"
            }
          }
        },
        "description": "Represents an area of the world."
      },
      "City_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "state": {
            "$ref": "#/components/schemas/State_ReferenceDataV3"
          },
          "stopovers": {
            "type": "array",
            "description": "List of available stopover in the city.",
            "items": {
              "$ref": "#/components/schemas/Stopover_ReferenceDataV3"
            }
          }
        },
        "description": "Represents a city."
      },
      "CountrySettings_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "maximumNumberOfSeats": {
            "type": "integer",
            "description": "The maximum number of seats that can be booked at once. Note that e.g. infants do not have their own seat.",
            "format": "int32",
            "example": 9
          },
          "minimumNumberOfAdults": {
            "type": "integer",
            "description": "The minimum number of adults per booking.",
            "format": "int32",
            "example": 1
          },
          "splitPrice": {
            "type": "boolean",
            "description": "A flag indicating whether the prices should be split per bound, or the total prices.",
            "example": true
          },
          "defaultLocation": {
            "$ref": "#/components/schemas/Location_ReferenceDataV3"
          },
          "originsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available origins for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV3"
            }
          },
          "destinationsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available destinations for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV3"
            }
          },
          "highlightedOrigins": {
            "type": "array",
            "description": "The highlighted origins for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV3"
            }
          },
          "highlightedDestinations": {
            "type": "array",
            "description": "The highlighted destinations for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV3"
            }
          },
          "passengerTypes": {
            "type": "array",
            "description": "The passenger types accepted for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataPassengerType_ReferenceDataV3"
            }
          },
          "areas": {
            "type": "array",
            "description": "The details of the world areas and the countries, cities, airports/stopovers they contain.",
            "items": {
              "$ref": "#/components/schemas/Area_ReferenceDataV3"
            }
          },
          "commercialCabins": {
            "type": "array",
            "description": "The available commercial cabins for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataEnumOutputCommercialCabinType_ReferenceDataV3"
            }
          }
        },
        "description": "Represents the settings defined for a country."
      },
      "Country_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "cities": {
            "type": "array",
            "description": "List of available cities in the country. Country contains either a list of states or a list of cities.",
            "items": {
              "$ref": "#/components/schemas/City_ReferenceDataV3"
            }
          }
        },
        "description": "Represents a country."
      },
      "Disclaimer_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "HighlightedLocation_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the different types of highlighted locations.",
            "example": "AIRPORT",
            "enum": [
              "CITY",
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the location.",
            "format": "int32",
            "example": 3
          }
        },
        "description": "Represents a location to be highlighted due to it's importance over the others."
      },
      "Location_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location",
            "example": "AMS"
          },
          "type": {
            "type": "string",
            "description": "The type of the location",
            "example": "AIRPORT"
          },
          "toOffer": {
            "type": "boolean",
            "description": "A flag to indicate if a location should be used for offer search."
          }
        },
        "description": "Represents a location for reference data",
        "example": [
          {
            "code": "BBA",
            "type": "AIRPORT"
          },
          {
            "code": "YOW",
            "type": "CITY"
          }
        ]
      },
      "RebookingDetails_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "changeAllowedForOriginDestination": {
            "type": "boolean",
            "description": "A flag indicating whether the change of origin/destination is allowed when rebooking."
          }
        },
        "description": "Represents the reference data related to the rebooking."
      },
      "RefDataEnumOutputCommercialCabinType_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          }
        },
        "description": "Generic response type for the /reference-data endpoint."
      },
      "RefDataPassengerType_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          },
          "minAge": {
            "type": "integer",
            "description": "The minimum age for a passenger of this type.",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "The maximum age for a passenger of this type.",
            "format": "int32"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The recommended display order if the type should be displayed in a list.",
            "format": "int32"
          },
          "adult": {
            "type": "boolean"
          }
        },
        "description": "Represents a passenger type in the reference data."
      },
      "ReferenceDataResponse_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "Market code.",
            "example": "FR"
          },
          "countries": {
            "type": "array",
            "description": "List of available countries of sales in the market.",
            "items": {
              "$ref": "#/components/schemas/CountrySettings_ReferenceDataV3"
            }
          },
          "rebookingDetails": {
            "$ref": "#/components/schemas/RebookingDetails_ReferenceDataV3"
          },
          "groupLink": {
            "type": "string",
            "description": "Group link returned for the requested language-market."
          },
          "minDepartureDate": {
            "type": "string",
            "description": "Earliest possible departure date, if applicable.",
            "format": "date-time"
          },
          "maxDepartureDate": {
            "type": "string",
            "description": "Latest possible departure date, if applicable.",
            "format": "date-time"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_ReferenceDataV3"
          }
        },
        "description": "Response of the /reference-data endpoint."
      },
      "State_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "name": {
            "type": "string",
            "description": "The name associated to the location. The name is in the language specified in ContentLanguage header.",
            "example": "Paris"
          }
        },
        "description": "Represents a state."
      },
      "Stopover_ReferenceDataV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "type": {
            "type": "string",
            "description": "The type of the stopover.",
            "example": "AIRPORT"
          }
        },
        "description": "Represents a stopover in the reference data."
      },
      "ClassDetail_OfferV3": {
        "type": "object",
        "properties": {
          "sellingClass": {
            "type": "string"
          },
          "availabilityStatus": {
            "type": "string"
          },
          "commercialCabin": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "pricingProduct": {
            "type": "string"
          }
        },
        "description": "The details about the chosen cabin class."
      },
      "QuotationConnectionRequest_OfferV3": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/QuotationSegmentRequest_OfferV3"
            }
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "QuotationRequest_OfferV3": {
        "required": [
          "bookingFlow",
          "requestedConnections"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "accountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "pnrType": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The type of PNR.",
            "example": "R1"
          },
          "discountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "A discount code."
          },
          "passengers": {
            "type": "array",
            "description": "The list of passengers for which the flights are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV3"
            }
          },
          "requestedConnections": {
            "type": "array",
            "description": "The requested connection.",
            "items": {
              "$ref": "#/components/schemas/QuotationConnectionRequest_OfferV3"
            }
          }
        },
        "description": "Represents a quotation request."
      },
      "QuotationSegmentRequest_OfferV3": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_OfferV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_OfferV3"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          },
          "classDetails": {
            "type": "array",
            "description": "The cabin class details.",
            "items": {
              "$ref": "#/components/schemas/ClassDetail_OfferV3"
            }
          },
          "classDetail": {
            "$ref": "#/components/schemas/ClassDetail_OfferV3"
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "BaggageAllowancePerPassenger_OfferV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggage allowance",
            "format": "int32",
            "example": 2
          },
          "type": {
            "type": "string",
            "description": "The type of baggage allowance",
            "example": "PIECES"
          }
        },
        "description": "Baggage Allowance per passenger."
      },
      "Cabin_OfferV3": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "FareComponentDetails_OfferV3": {
        "type": "object",
        "properties": {
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails_OfferV3"
          },
          "segments": {
            "type": "array",
            "description": "The segments.",
            "items": {
              "$ref": "#/components/schemas/QuotationSegmentResponse_OfferV3"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV3"
            }
          }
        },
        "description": "The details about the components of the fare."
      },
      "Money_OfferV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the price item.",
        "example": 2
      },
      "PriceCategory_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the category.",
            "example": "TAXES_FEES"
          },
          "label": {
            "type": "string",
            "description": "The label describing the category.",
            "example": "Taxes and fees"
          },
          "totals": {
            "type": "array",
            "description": "The total price amount for the category.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount_OfferV3"
            }
          },
          "priceComponents": {
            "type": "array",
            "description": "The different components of the price.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent_OfferV3"
            }
          }
        },
        "description": "Represents a category constituting a price."
      },
      "PriceComponentBreakdownItem_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price item.",
            "example": "YR"
          },
          "nature": {
            "type": "string",
            "description": "The nature of the price item.",
            "example": "VA"
          },
          "label": {
            "type": "string",
            "description": "The label of the price item.",
            "example": "Sustainable Fuel Contribution"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV3"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV3"
            }
          }
        },
        "description": "The breakdown of a price component."
      },
      "PriceComponent_OfferV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price component.",
            "example": "FARE"
          },
          "label": {
            "type": "string",
            "description": "The label of the price component.",
            "example": "Ticket(s)"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the price component.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV3"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV3"
            }
          },
          "priceComponentBreakdown": {
            "type": "array",
            "description": "The amount of the price component.",
            "items": {
              "$ref": "#/components/schemas/PriceComponentBreakdownItem_OfferV3"
            }
          }
        },
        "description": "Represents the components of a price."
      },
      "PriceDetails_OfferV3": {
        "type": "object",
        "properties": {
          "totals": {
            "type": "array",
            "description": "The total price.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount_OfferV3"
            }
          },
          "priceCategories": {
            "type": "array",
            "description": "The different categories constituting the price.",
            "items": {
              "$ref": "#/components/schemas/PriceCategory_OfferV3"
            }
          }
        },
        "description": "Represents the price-details of a flight offer."
      },
      "QuotationResponse_OfferV3": {
        "type": "object",
        "properties": {
          "fareComponentDetails": {
            "type": "array",
            "description": "The details about the components of the fare.",
            "items": {
              "$ref": "#/components/schemas/FareComponentDetails_OfferV3"
            }
          }
        },
        "description": "Represents the quotation response."
      },
      "QuotationSegmentResponse_OfferV3": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_OfferV3"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV3"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_OfferV3"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "fareBasis": {
            "type": "string",
            "description": "The fare basis associated to the segment.",
            "example": "XA5VUIL1"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment.",
            "example": "X"
          },
          "cabin": {
            "$ref": "#/components/schemas/Cabin_OfferV3"
          },
          "baggageAllowancePerPassenger": {
            "type": "array",
            "description": "The baggage allowances per passenger on the segment.",
            "items": {
              "$ref": "#/components/schemas/BaggageAllowancePerPassenger_OfferV3"
            }
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents the details of a segment."
      },
      "TotalAmount_OfferV3": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the price.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV3"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV3"
            }
          }
        },
        "description": "Represents the total price of a flight offer."
      },
      "AircraftOwner_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "freeText": {
            "type": "string"
          },
          "codeLabel": {
            "type": "string"
          }
        }
      },
      "CashPricing_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FULL",
              "ADJUSTMENT"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_TicketConditionsV3"
          },
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV3"
            },
            "writeOnly": true
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "dynamicPenaltyWaived": {
            "type": "boolean"
          },
          "flexiblePenaltyWaived": {
            "type": "boolean"
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV3"
            }
          },
          "price": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV3"
          },
          "basePrice": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV3"
          }
        }
      },
      "CorporateContract_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "uccrId": {
            "type": "string"
          },
          "corporateName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "oin": {
            "type": "string"
          },
          "publishedContractId": {
            "type": "integer",
            "format": "int64"
          },
          "accountCode": {
            "type": "string"
          },
          "maxNumberOfPaxPerBooking": {
            "type": "integer",
            "format": "int32"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization_TicketConditionsV3"
            }
          },
          "isAbleToBookForOthers": {
            "type": "boolean",
            "writeOnly": true
          },
          "corporateContractStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "INCOMPLETE"
            ]
          },
          "ableToBookForOthers": {
            "type": "boolean"
          }
        }
      },
      "Currency_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "CustomerProfile_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "resourceId": {
            "type": "string"
          },
          "corporateAccountKey": {
            "type": "integer",
            "format": "int32"
          },
          "subscriberContractKey": {
            "type": "integer",
            "format": "int32"
          },
          "corporateContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateContract_TicketConditionsV3"
            }
          },
          "subscriberContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV3"
            }
          },
          "possibleTravelersFromProfile": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler_TicketConditionsV3"
            }
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV3"
          },
          "reservationUsersByPnrId": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReservationUser_TicketConditionsV3"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "TRAVEL_ARRANGER"
            ]
          },
          "email": {
            "type": "string"
          },
          "reservationId": {
            "type": "string"
          },
          "selectedTravelCompanions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_TicketConditionsV3"
            }
          },
          "expiryDateTimeUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The profile information of the customer for whom the search is done."
      },
      "Equipment_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "acvCode": {
            "type": "string"
          },
          "bus": {
            "type": "boolean"
          },
          "limousine": {
            "type": "boolean"
          },
          "train": {
            "type": "boolean"
          },
          "aircraft": {
            "type": "boolean"
          }
        }
      },
      "FareBranchIdentifier_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "segmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV3"
            }
          },
          "pricing": {
            "$ref": "#/components/schemas/Pricing_TicketConditionsV3"
          },
          "fareOrigin": {
            "type": "string"
          },
          "fareDestination": {
            "type": "string"
          },
          "farePaxTypeCode": {
            "type": "string"
          },
          "fareCarrier": {
            "type": "string"
          },
          "fareTariff": {
            "type": "string"
          },
          "fareRule": {
            "type": "string"
          },
          "fareTypeCode": {
            "type": "string"
          },
          "pricingProgramCode": {
            "type": "string"
          }
        }
      },
      "FareInformationByPassengerBoolean_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "FareInformationByPassengerListOptionProduct_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV3"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV3"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            }
          }
        }
      },
      "FareInformationByPassengerString_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "FareInformationByPassengerZapOff_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV3"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV3"
            }
          }
        }
      },
      "Fare_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "fareDetails": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV3"
            }
          }
        }
      },
      "FlightCode_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "marketingCarrier": {
            "$ref": "#/components/schemas/MarketingCarrier_TicketConditionsV3"
          },
          "flightNumber": {
            "type": "string"
          },
          "operationalSuffix": {
            "type": "string"
          },
          "wholeFlightCode": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          }
        }
      },
      "FlyingBlueCard_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "cin": {
            "type": "integer",
            "format": "int64"
          },
          "milesBalance": {
            "type": "integer",
            "format": "int64"
          },
          "tierLevelLabel": {
            "type": "string"
          },
          "tierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "tierAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TierAttribute_TicketConditionsV3"
            }
          },
          "warning": {
            "$ref": "#/components/schemas/Warning_TicketConditionsV3"
          }
        }
      },
      "MarketingCarrier_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "MilesAndCashPricing_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "cashPricing": {
            "$ref": "#/components/schemas/CashPricing_TicketConditionsV3"
          },
          "milesPricing": {
            "$ref": "#/components/schemas/MilesPricing_TicketConditionsV3"
          },
          "monetaryPercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MilesPricing_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV3"
            },
            "writeOnly": true
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV3"
            }
          },
          "basePrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          }
        }
      },
      "OperatingFlightCode_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_TicketConditionsV3"
          },
          "carrierCode": {
            "type": "string"
          },
          "flightNumber": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          },
          "operatingFlightNumber": {
            "type": "string"
          }
        }
      },
      "OptionProduct_TicketConditionsV3": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "rfisc": {
            "type": "string"
          },
          "groupCode": {
            "type": "string"
          },
          "subGroupCode": {
            "type": "string"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "initialPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "bundleCode": {
            "type": "string"
          },
          "subCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Organization_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User_TicketConditionsV3"
            }
          }
        }
      },
      "PassengerList_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV3"
            }
          },
          "primaryPassenger": {
            "$ref": "#/components/schemas/Passenger_TicketConditionsV3"
          },
          "adultOnly": {
            "type": "boolean"
          },
          "passengersByPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV3"
              }
            }
          },
          "orderedPassengerWithSpecificIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV3"
            }
          },
          "highestTierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "primaryPassengerTypeCode": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "passengerTypeCodesSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "atLeastOnePrimaryPassenger": {
            "type": "boolean"
          }
        },
        "description": "The list of passengers on the product."
      },
      "PassengerWithSpecificIds_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "umOptional": {
            "type": "boolean"
          },
          "umQuota": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "corporateAccountReference": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV3"
          },
          "subscriberContract": {
            "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV3"
          },
          "amadeusTatooRef": {
            "type": "integer",
            "format": "int32"
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          },
          "fareInformativePricingId": {
            "type": "integer",
            "format": "int32"
          },
          "tierLevelCodeAsString": {
            "type": "string"
          }
        }
      },
      "PossibleTraveler_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          },
          "paxType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "selectedForTravel": {
            "type": "boolean"
          }
        }
      },
      "Pricing_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "pricingOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MilesAndCashPricing_TicketConditionsV3"
            }
          }
        }
      },
      "ProductConnectionIdentifier_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV3"
          },
          "zapOffByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerZapOff_TicketConditionsV3"
          },
          "corporateByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerBoolean_TicketConditionsV3"
          },
          "fareBranchIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareBranchIdentifier_TicketConditionsV3"
            }
          },
          "productSegmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV3"
            }
          },
          "bundleCode": {
            "type": "string"
          },
          "fareFamily": {
            "type": "string"
          },
          "ticketDesignatorByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV3"
          },
          "cabinClass": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV3"
          },
          "fareBasis": {
            "type": "string"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "psisortedList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV3"
            }
          },
          "lowestClassProductSegmentIdentifier": {
            "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV3"
          },
          "operatingCarriers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The identifiers of the connections of the flight product."
      },
      "ProductSegmentIdentifier_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV3"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV3"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "arrivalDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_TicketConditionsV3"
          },
          "operatingFlightCode": {
            "$ref": "#/components/schemas/OperatingFlightCode_TicketConditionsV3"
          },
          "bookingClass": {
            "type": "string"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_TicketConditionsV3"
          },
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV3"
          },
          "cabin": {
            "type": "string"
          },
          "optionProductListByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerListOptionProduct_TicketConditionsV3"
          },
          "haulType": {
            "type": "string",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "privateFare": {
            "type": "boolean"
          }
        }
      },
      "RawPrice_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "fare": {
            "$ref": "#/components/schemas/Fare_TicketConditionsV3"
          },
          "tax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "penalty": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "tripPlannerBookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "options": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax_TicketConditionsV3"
            }
          },
          "nonRefundableTax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          },
          "total": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          }
        }
      },
      "ReservationUser_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "pnrId": {
            "type": "string"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV3"
          }
        }
      },
      "SAFBundle": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OptionProduct_TicketConditionsV3"
          },
          {
            "type": "object",
            "properties": {
              "co2Kg": {
                "type": "number",
                "format": "double"
              },
              "safPercentage": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ]
      },
      "Stopover_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      },
      "SubscriberContract_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "contractNumber": {
            "type": "string"
          },
          "contractType": {
            "type": "string"
          },
          "productType": {
            "type": "string"
          },
          "productSubType": {
            "type": "string"
          },
          "companyCode": {
            "type": "string"
          },
          "contractStatus": {
            "type": "string"
          },
          "validityStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "validityEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "iataCode": {
            "type": "string"
          },
          "passengerTypeCodeMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "CEV",
                "CDT",
                "CFM",
                "CCH"
              ]
            }
          }
        }
      },
      "Tax_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "nature": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV3"
          }
        }
      },
      "TicketConditionsSearchCriteria_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "productConnectionIdentifiers": {
            "type": "array",
            "description": "The identifiers of the connections of the flight product.",
            "items": {
              "$ref": "#/components/schemas/ProductConnectionIdentifier_TicketConditionsV3"
            }
          },
          "fareFamilies": {
            "type": "array",
            "description": "The fareFamilies applying to the different connections.",
            "items": {
              "$ref": "#/components/schemas/FareFamily_TicketConditionsV3"
            }
          },
          "passengerList": {
            "$ref": "#/components/schemas/PassengerList_TicketConditionsV3"
          },
          "customerProfile": {
            "$ref": "#/components/schemas/CustomerProfile_TicketConditionsV3"
          },
          "bookingFlow": {
            "type": "string",
            "description": "The booking flow used when searching the product.",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "AGENT_BASED_PRIVATE_FARES",
              "STAFF"
            ]
          },
          "subFlow": {
            "type": "string",
            "description": "The sub flow used when searching the product.",
            "enum": [
              "BOOKING",
              "REBOOKING",
              "UPGRADE"
            ]
          },
          "accountCode": {
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "fareOption": {
            "type": "string",
            "description": "The fare Option applying.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "SUBSCRIBER_ABONNE",
              "SUBSCRIBER_WEEKEND",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          }
        },
        "description": "Represents the search criteria to obtain the ticket-conditions of a flight product."
      },
      "TierAttribute_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "TravelCompanion_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "format": "int32"
          },
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        }
      },
      "User_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uccrId": {
            "type": "string"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV3"
          }
        }
      },
      "Warning_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ZapOff_TicketConditionsV3": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "amountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "AMOUNT"
            ]
          },
          "ticketDesignatorModifier": {
            "type": "string"
          }
        }
      },
      "SelfConnectFlightProduct_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV2"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_UpsellOfferV2"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_UpsellOfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "cabinClassCode": {
            "type": "string",
            "description": "The code (eg: M, W, C etc.) of the cabin class (eg: economy, business, first etc.) in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane.",
            "example": "M"
          },
          "sellingClassCode": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment. It is a further (invisible) division of the cabin class that details the different conditions and benefits offered among a same cabin class. The selling class code usually is the first letter of the fare basis code.",
            "example": "N"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV2"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "UpsellOffersSelfConnectResponse_UpsellOfferV2": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "Represents an abstract self connect offer response",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_UpsellOfferV2"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV2"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV2"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV2"
            }
          }
        },
        "description": "Represents a self-connect upsell offers response."
      },
      "BaggageAllowance_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggages allowed.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of baggage allowance quantities.",
            "enum": [
              "PIECES",
              "WEIGHT"
            ]
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV2"
          },
          "detailsText": {
            "type": "string",
            "description": "The details text describing the baggage allowance."
          },
          "handBaggageDetailsText": {
            "type": "string",
            "description": "The details text describing the hand baggage allowance."
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the baggage allowances."
          }
        },
        "description": "Represents a baggage allowance."
      },
      "CommercialText_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionWrapper_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "ConditionWrapper_TicketConditionsV2": {
            "type": "object",
            "properties": {
              "detailsText": {
                "type": "string"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText_TicketConditionsV2"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee_TicketConditionsV2"
              }
            },
            "description": "Represents a ticket condition."
          }
        }
      },
      "DateIntervalView_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Disclaimer_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "FareFamily_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialLabel": {
            "type": "string",
            "description": "The commercial label of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlyingBlueAdvantages_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "extraBagQuantity": {
            "type": "integer",
            "description": "The extra number of bags the user is allowed to have.",
            "format": "int32"
          },
          "skyPriority": {
            "type": "boolean",
            "description": "A flag indicating whether the user is granted the skyPriority benefit or not."
          }
        },
        "description": "The advantages accorded to a FlyingBlue user due to his tier level."
      },
      "FlyingBlue_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "detailsText": {
            "type": "string",
            "description": "The label accompanying the amount of miles earned."
          },
          "detailsTextQualPoints": {
            "type": "string",
            "description": "The label accompanying the amount of XPs and UXPs earned."
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV2"
          },
          "flyingBlueAdvantages": {
            "$ref": "#/components/schemas/FlyingBlueAdvantages_TicketConditionsV2"
          },
          "earnedUltimateQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedQualifyingPoints": {
            "type": "integer",
            "format": "int64"
          },
          "earnedMiles": {
            "type": "integer",
            "format": "int64"
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the flying blue advantages."
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "Link_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Money_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "PassengerTicketConditionsWrapper_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The id of the passenger.",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AdvancePurchaseCondition"
                },
                {
                  "$ref": "#/components/schemas/BlueBizCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCovidCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/CarrierFeesCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChildrenDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/DedicatedOverheadBinSpaceCondition"
                },
                {
                  "$ref": "#/components/schemas/DeplaneQuicklyCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXPMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXpCondition"
                },
                {
                  "$ref": "#/components/schemas/FreeSeatSelectionCondition"
                },
                {
                  "$ref": "#/components/schemas/GoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/HandBaggageAllowanceCondition"
                },
                {
                  "$ref": "#/components/schemas/IATACondition"
                },
                {
                  "$ref": "#/components/schemas/InfantDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/LoungeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/MandatoryUMCondition"
                },
                {
                  "$ref": "#/components/schemas/MaximumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/MinimumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/NoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/ProductConditions"
                },
                {
                  "$ref": "#/components/schemas/SeniorCardCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/StudentCardCondition"
                },
                {
                  "$ref": "#/components/schemas/YouthCardCondition"
                }
              ]
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV2"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV2"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV2"
          },
          "travelClassText": {
            "type": "string",
            "writeOnly": true
          },
          "tripText": {
            "type": "string",
            "writeOnly": true
          }
        },
        "description": "Represents the ticket-conditions for a given passenger."
      },
      "Passenger_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id identifying the passenger uniquely on the flight.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "typeWithoutCard": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "availableCard": {
            "type": "string",
            "description": "The discount card associated with the passenger.",
            "enum": [
              "SENIOR",
              "YOUTH"
            ]
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date"
          },
          "primaryPassenger": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger is considered to be the primary one (i.e. the passenger considered when computing some information like the price, fare benefits etc."
          }
        },
        "description": "The passenger of a flight."
      },
      "TicketConditionsConnection_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "The list of ticket-conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionWrapper_TicketConditionsV2"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV2"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV2"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV2"
          },
          "travelClassText": {
            "type": "string",
            "writeOnly": true
          },
          "tripText": {
            "type": "string",
            "description": "A brief description of the trip.",
            "example": "Lisbon, Humberto Delgado Airport (LIS) to Milan, Malpensa Airport (MXP)"
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the conditions apply to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV2"
            }
          },
          "conditionsPerPassenger": {
            "type": "array",
            "description": "The ticket-conditions per passenger.",
            "items": {
              "$ref": "#/components/schemas/PassengerTicketConditionsWrapper_TicketConditionsV2"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV2"
            }
          }
        },
        "description": "Represents the ticket-conditions for a connection."
      },
      "TicketConditionsResponse_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_TicketConditionsV2"
            }
          },
          "sameConditions": {
            "type": "boolean",
            "description": "Indicates whether the same conditions apply to all connections of the flight product."
          },
          "connections": {
            "type": "array",
            "description": "The ticket-conditions per connection of the product.",
            "items": {
              "$ref": "#/components/schemas/TicketConditionsConnection_TicketConditionsV2"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV2"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV2"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_TicketConditionsV2"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV2"
            }
          }
        },
        "description": "Represents the ticket-conditions response."
      },
      "Area_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "countries": {
            "type": "array",
            "description": "The list of countries making part of the area.",
            "items": {
              "$ref": "#/components/schemas/Country_ReferenceDataV2"
            }
          }
        },
        "description": "Represents an area of the world."
      },
      "City_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "state": {
            "$ref": "#/components/schemas/State_ReferenceDataV2"
          },
          "stopovers": {
            "type": "array",
            "description": "List of available stopover in the city.",
            "items": {
              "$ref": "#/components/schemas/Stopover_ReferenceDataV2"
            }
          }
        },
        "description": "Represents a city."
      },
      "CountrySettings_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "maximumNumberOfSeats": {
            "type": "integer",
            "description": "The maximum number of seats that can be booked at once. Note that e.g. infants do not have their own seat.",
            "format": "int32",
            "example": 9
          },
          "minimumNumberOfAdults": {
            "type": "integer",
            "description": "The minimum number of adults per booking.",
            "format": "int32",
            "example": 1
          },
          "splitPrice": {
            "type": "boolean",
            "description": "A flag indicating whether the prices should be split per bound, or the total prices.",
            "example": true
          },
          "defaultLocation": {
            "$ref": "#/components/schemas/Location_ReferenceDataV2"
          },
          "originsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available origins for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV2"
            }
          },
          "destinationsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available destinations for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV2"
            }
          },
          "origins": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available origins for the country.",
            "example": [
              "BBA",
              "YOW",
              "JRO",
              "SCV"
            ],
            "items": {
              "type": "string",
              "description": "The available origins for the country.",
              "example": "[\"BBA\",\"YOW\",\"JRO\",\"SCV\"]"
            }
          },
          "destinations": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available destinations for the country.",
            "example": [
              "BBA",
              "YOW",
              "JRO",
              "SCV"
            ],
            "items": {
              "type": "string",
              "description": "The available destinations for the country.",
              "example": "[\"BBA\",\"YOW\",\"JRO\",\"SCV\"]"
            }
          },
          "highlightedOrigins": {
            "type": "array",
            "description": "The highlighted origins for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV2"
            }
          },
          "highlightedDestinations": {
            "type": "array",
            "description": "The highlighted destinations for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV2"
            }
          },
          "passengerTypes": {
            "type": "array",
            "description": "The passenger types accepted for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataPassengerType_ReferenceDataV2"
            }
          },
          "areas": {
            "type": "array",
            "description": "The details of the world areas and the countries, cities, airports/stopovers they contain.",
            "items": {
              "$ref": "#/components/schemas/Area_ReferenceDataV2"
            }
          },
          "defaultAirport": {
            "type": "string",
            "description": "The default stopover for the country.",
            "example": "CDG"
          },
          "commercialCabins": {
            "type": "array",
            "description": "The available commercial cabins for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataEnumOutputCommercialCabinType_ReferenceDataV2"
            }
          }
        },
        "description": "Represents the settings defined for a country."
      },
      "Country_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "cities": {
            "type": "array",
            "description": "List of available cities in the country. Country contains either a list of states or a list of cities.",
            "items": {
              "$ref": "#/components/schemas/City_ReferenceDataV2"
            }
          }
        },
        "description": "Represents a country."
      },
      "Disclaimer_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "HighlightedLocation_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the different types of highlighted locations.",
            "example": "AIRPORT",
            "enum": [
              "CITY",
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the location.",
            "format": "int32",
            "example": 3
          }
        },
        "description": "Represents a location to be highlighted due to it's importance over the others."
      },
      "Location_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location",
            "example": "AMS"
          },
          "type": {
            "type": "string",
            "description": "The type of the location",
            "example": "AIRPORT"
          },
          "toOffer": {
            "type": "boolean",
            "description": "A flag to indicate if a location should be used for offer search."
          }
        },
        "description": "Represents a location for reference data",
        "example": [
          {
            "code": "BBA",
            "type": "AIRPORT"
          },
          {
            "code": "YOW",
            "type": "CITY"
          }
        ]
      },
      "RebookingDetails_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "changeAllowedForOriginDestination": {
            "type": "boolean",
            "description": "A flag indicating whether the change of origin/destination is allowed when rebooking."
          }
        },
        "description": "Represents the reference data related to the rebooking."
      },
      "RefDataEnumOutputCommercialCabinType_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          }
        },
        "description": "Generic response type for the /reference-data endpoint."
      },
      "RefDataPassengerType_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          },
          "minAge": {
            "type": "integer",
            "description": "The minimum age for a passenger of this type.",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "The maximum age for a passenger of this type.",
            "format": "int32"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The recommended display order if the type should be displayed in a list.",
            "format": "int32"
          },
          "adult": {
            "type": "boolean"
          }
        },
        "description": "Represents a passenger type in the reference data."
      },
      "ReferenceDataResponse_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "Market code.",
            "example": "FR"
          },
          "countries": {
            "type": "array",
            "description": "List of available countries of sales in the market.",
            "items": {
              "$ref": "#/components/schemas/CountrySettings_ReferenceDataV2"
            }
          },
          "rebookingDetails": {
            "$ref": "#/components/schemas/RebookingDetails_ReferenceDataV2"
          },
          "groupLink": {
            "type": "string",
            "description": "Group link returned for the requested language-market."
          },
          "minDepartureDate": {
            "type": "string",
            "description": "Earliest possible departure date, if applicable.",
            "format": "date-time"
          },
          "maxDepartureDate": {
            "type": "string",
            "description": "Latest possible departure date, if applicable.",
            "format": "date-time"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_ReferenceDataV2"
          }
        },
        "description": "Response of the /reference-data endpoint."
      },
      "State_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "name": {
            "type": "string",
            "description": "The name associated to the location. The name is in the language specified in ContentLanguage header.",
            "example": "Paris"
          }
        },
        "description": "Represents a state."
      },
      "Stopover_ReferenceDataV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "type": {
            "type": "string",
            "description": "The type of the stopover.",
            "example": "AIRPORT"
          }
        },
        "description": "Represents a stopover in the reference data."
      },
      "ClassDetail_OfferV2": {
        "type": "object",
        "properties": {
          "sellingClass": {
            "type": "string"
          },
          "availabilityStatus": {
            "type": "string"
          },
          "commercialCabin": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "pricingProduct": {
            "type": "string"
          }
        },
        "description": "The details about the chosen cabin class."
      },
      "QuotationConnectionRequest_OfferV2": {
        "required": [
          "departureDate"
        ],
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/QuotationSegmentRequest_OfferV2"
            }
          },
          "departureDate": {
            "type": "string",
            "description": "Date of departure of the connection flight.",
            "format": "date"
          },
          "departureTime": {
            "type": "string",
            "example": "10:40"
          },
          "arrivalDate": {
            "type": "string",
            "description": "Date of arrival of the connection flight.",
            "format": "date"
          },
          "arrivalTime": {
            "type": "string",
            "example": "10:40"
          },
          "origin": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "STOPOVER",
                "enum": [
                  "STOPOVER",
                  "CITY",
                  "AIRPORT",
                  "BUS_STATION",
                  "HELIPORT",
                  "RAILWAY_STATION",
                  "FERRY_STATION"
                ]
              },
              "code": {
                "type": "string",
                "example": "CDG"
              }
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "Represents a requested connection."
      },
      "QuotationRequest_OfferV2": {
        "required": [
          "bookingFlow",
          "requestedConnections"
        ],
        "type": "object",
        "properties": {
          "bookingFlow": {
            "type": "string",
            "description": "Represents a type of booking flow, i.e. the specific context in which the customer is booking a flight (eg: for leisure, as a corporate, as a staff etc.).",
            "example": "LEISURE",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "STAFF"
            ]
          },
          "accountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "pnrType": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "The type of PNR.",
            "example": "R1"
          },
          "discountCode": {
            "pattern": "[a-zA-Z0-9]*",
            "type": "string",
            "description": "A discount code."
          },
          "passengers": {
            "type": "array",
            "description": "The list of passengers for which the flights are requested.",
            "items": {
              "$ref": "#/components/schemas/Passenger_OfferV2"
            }
          },
          "requestedConnections": {
            "type": "array",
            "description": "The requested connection.",
            "items": {
              "$ref": "#/components/schemas/QuotationConnectionRequest_OfferV2"
            }
          }
        },
        "description": "Represents a quotation request."
      },
      "QuotationSegmentRequest_OfferV2": {
        "required": [
          "departureDateTime",
          "destination",
          "marketingCarrier",
          "marketingFlightNumber",
          "origin"
        ],
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_OfferV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_OfferV2"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment. It is specified as local time at destination of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment. It is specified as local time at origin of the segment.",
            "format": "date-time"
          },
          "operatingCarrier": {
            "pattern": "[a-zA-Z0-9]{2}",
            "type": "string",
            "description": "The operating carrier (i.e. the carrier actually carrying the passengers, operated by the operating airline). It can be different than the Marketing carrier (carrier selling the flight).",
            "example": "AF"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The owner of the aircraft.",
            "example": "KL"
          },
          "marketingCarrier": {
            "pattern": "[a-zA-Z0-9]{2,3}",
            "type": "string",
            "description": "The marketing carrier (i.e. the carrier selling the flight), it can be different than the operating carrier (i.e. the carrier actually carrying the passengers).",
            "example": "KL"
          },
          "marketingFlightNumber": {
            "type": "string",
            "description": "The marketing flight number.",
            "example": "4312"
          },
          "suffix": {
            "pattern": "[a-zA-Z]{1}",
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class (also called booking class) applicable to the segment.",
            "example": "H"
          },
          "equipmentType": {
            "type": "string",
            "description": "The equipment type used to carry the passengers.",
            "example": "7M7"
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32",
            "example": 1
          },
          "classDetails": {
            "type": "array",
            "description": "The cabin class details.",
            "items": {
              "$ref": "#/components/schemas/ClassDetail_OfferV2"
            }
          },
          "classDetail": {
            "$ref": "#/components/schemas/ClassDetail_OfferV2"
          }
        },
        "description": "Represents a requested segment of a connection."
      },
      "BaggageAllowancePerPassenger_OfferV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the passenger.",
            "format": "int32",
            "example": 1
          },
          "passengerType": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggage allowance",
            "format": "int32",
            "example": 2
          },
          "type": {
            "type": "string",
            "description": "The type of baggage allowance",
            "example": "PIECES"
          }
        },
        "description": "Baggage Allowance per passenger."
      },
      "Cabin_OfferV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cabin.",
            "example": "ECONOMY"
          },
          "class": {
            "type": "string",
            "description": "The cabin class code (eg: M, W, C etc.).",
            "example": "M"
          }
        },
        "description": "The cabin class in which the passenger will travel on this segment. It represents the quality of accomodation & services the passenger will have access to in the airplane."
      },
      "FareComponentDetails_OfferV2": {
        "type": "object",
        "properties": {
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails_OfferV2"
          },
          "segments": {
            "type": "array",
            "description": "The segments.",
            "items": {
              "$ref": "#/components/schemas/QuotationSegmentResponse_OfferV2"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_OfferV2"
            }
          }
        },
        "description": "The details about the components of the fare."
      },
      "Money_OfferV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the price item.",
        "example": 2
      },
      "PriceCategory_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the category.",
            "example": "TAXES_FEES"
          },
          "label": {
            "type": "string",
            "description": "The label describing the category.",
            "example": "Taxes and fees"
          },
          "totals": {
            "type": "array",
            "description": "The total price amount for the category.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount_OfferV2"
            }
          },
          "priceComponents": {
            "type": "array",
            "description": "The different components of the price.",
            "items": {
              "$ref": "#/components/schemas/PriceComponent_OfferV2"
            }
          }
        },
        "description": "Represents a category constituting a price."
      },
      "PriceComponentBreakdownItem_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price item.",
            "example": "YR"
          },
          "nature": {
            "type": "string",
            "description": "The nature of the price item.",
            "example": "VA"
          },
          "label": {
            "type": "string",
            "description": "The label of the price item.",
            "example": "Sustainable Fuel Contribution"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV2"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV2"
            }
          }
        },
        "description": "The breakdown of a price component."
      },
      "PriceComponent_OfferV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the price component.",
            "example": "FARE"
          },
          "label": {
            "type": "string",
            "description": "The label of the price component.",
            "example": "Ticket(s)"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the price component.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV2"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV2"
            }
          },
          "priceComponentBreakdown": {
            "type": "array",
            "description": "The amount of the price component.",
            "items": {
              "$ref": "#/components/schemas/PriceComponentBreakdownItem_OfferV2"
            }
          }
        },
        "description": "Represents the components of a price."
      },
      "PriceDetails_OfferV2": {
        "type": "object",
        "properties": {
          "totals": {
            "type": "array",
            "description": "The total price.",
            "items": {
              "$ref": "#/components/schemas/TotalAmount_OfferV2"
            }
          },
          "priceCategories": {
            "type": "array",
            "description": "The different categories constituting the price.",
            "items": {
              "$ref": "#/components/schemas/PriceCategory_OfferV2"
            }
          }
        },
        "description": "Represents the price-details of a flight offer."
      },
      "QuotationResponse_OfferV2": {
        "type": "object",
        "properties": {
          "fareComponentDetails": {
            "type": "array",
            "description": "The details about the components of the fare.",
            "items": {
              "$ref": "#/components/schemas/FareComponentDetails_OfferV2"
            }
          }
        },
        "description": "Represents the quotation response."
      },
      "QuotationSegmentResponse_OfferV2": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_OfferV2"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_OfferV2"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_OfferV2"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_OfferV2"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          },
          "fareBasis": {
            "type": "string",
            "description": "The fare basis associated to the segment.",
            "example": "XA5VUIL1"
          },
          "sellingClass": {
            "type": "string",
            "description": "The selling class code (also called booking class) of the segment.",
            "example": "X"
          },
          "cabin": {
            "$ref": "#/components/schemas/Cabin_OfferV2"
          },
          "baggageAllowancePerPassenger": {
            "type": "array",
            "description": "The baggage allowances per passenger on the segment.",
            "items": {
              "$ref": "#/components/schemas/BaggageAllowancePerPassenger_OfferV2"
            }
          }
        },
        "description": "Represents the details of a segment."
      },
      "TotalAmount_OfferV2": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the price.",
            "example": "EUR"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_OfferV2"
          },
          "pricePerPassengers": {
            "type": "array",
            "description": "The price per passenger.",
            "items": {
              "$ref": "#/components/schemas/PricePerPassenger_OfferV2"
            }
          }
        },
        "description": "Represents the total price of a flight offer."
      },
      "AircraftOwner_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "freeText": {
            "type": "string"
          },
          "codeLabel": {
            "type": "string"
          }
        }
      },
      "CashPricing_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FULL",
              "ADJUSTMENT"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_TicketConditionsV2"
          },
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV2"
            },
            "writeOnly": true
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "dynamicPenaltyWaived": {
            "type": "boolean"
          },
          "flexiblePenaltyWaived": {
            "type": "boolean"
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV2"
            }
          },
          "price": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV2"
          },
          "basePrice": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV2"
          }
        }
      },
      "CorporateContract_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "uccrId": {
            "type": "string"
          },
          "corporateName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "oin": {
            "type": "string"
          },
          "publishedContractId": {
            "type": "integer",
            "format": "int64"
          },
          "accountCode": {
            "type": "string"
          },
          "maxNumberOfPaxPerBooking": {
            "type": "integer",
            "format": "int32"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization_TicketConditionsV2"
            }
          },
          "isAbleToBookForOthers": {
            "type": "boolean",
            "writeOnly": true
          },
          "corporateContractStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "INCOMPLETE"
            ]
          },
          "ableToBookForOthers": {
            "type": "boolean"
          }
        }
      },
      "Currency_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "CustomerProfile_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "resourceId": {
            "type": "string"
          },
          "corporateAccountKey": {
            "type": "integer",
            "format": "int32"
          },
          "subscriberContractKey": {
            "type": "integer",
            "format": "int32"
          },
          "corporateContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateContract_TicketConditionsV2"
            }
          },
          "subscriberContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV2"
            }
          },
          "possibleTravelersFromProfile": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler_TicketConditionsV2"
            }
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV2"
          },
          "reservationUsersByPnrId": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReservationUser_TicketConditionsV2"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "TRAVEL_ARRANGER"
            ]
          },
          "email": {
            "type": "string"
          },
          "reservationId": {
            "type": "string"
          },
          "selectedTravelCompanions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_TicketConditionsV2"
            }
          },
          "expiryDateTimeUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The profile information of the customer for whom the search is done."
      },
      "Equipment_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "acvCode": {
            "type": "string"
          },
          "bus": {
            "type": "boolean"
          },
          "limousine": {
            "type": "boolean"
          },
          "train": {
            "type": "boolean"
          },
          "aircraft": {
            "type": "boolean"
          }
        }
      },
      "FareBranchIdentifier_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "segmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV2"
            }
          },
          "pricing": {
            "$ref": "#/components/schemas/Pricing_TicketConditionsV2"
          },
          "fareOrigin": {
            "type": "string"
          },
          "fareDestination": {
            "type": "string"
          },
          "farePaxTypeCode": {
            "type": "string"
          },
          "fareCarrier": {
            "type": "string"
          },
          "fareTariff": {
            "type": "string"
          },
          "fareRule": {
            "type": "string"
          },
          "fareTypeCode": {
            "type": "string"
          },
          "pricingProgramCode": {
            "type": "string"
          }
        }
      },
      "FareInformationByPassengerBoolean_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "FareInformationByPassengerListOptionProduct_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV2"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV2"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            }
          }
        }
      },
      "FareInformationByPassengerString_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "FareInformationByPassengerZapOff_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV2"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV2"
            }
          }
        }
      },
      "Fare_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "fareDetails": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV2"
            }
          }
        }
      },
      "FlightCode_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "marketingCarrier": {
            "$ref": "#/components/schemas/MarketingCarrier_TicketConditionsV2"
          },
          "flightNumber": {
            "type": "string"
          },
          "operationalSuffix": {
            "type": "string"
          },
          "wholeFlightCode": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          }
        }
      },
      "FlyingBlueCard_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "cin": {
            "type": "integer",
            "format": "int64"
          },
          "milesBalance": {
            "type": "integer",
            "format": "int64"
          },
          "tierLevelLabel": {
            "type": "string"
          },
          "tierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "tierAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TierAttribute_TicketConditionsV2"
            }
          },
          "warning": {
            "$ref": "#/components/schemas/Warning_TicketConditionsV2"
          }
        }
      },
      "MarketingCarrier_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "MilesAndCashPricing_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "cashPricing": {
            "$ref": "#/components/schemas/CashPricing_TicketConditionsV2"
          },
          "milesPricing": {
            "$ref": "#/components/schemas/MilesPricing_TicketConditionsV2"
          },
          "monetaryPercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MilesPricing_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV2"
            },
            "writeOnly": true
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV2"
            }
          },
          "basePrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          }
        }
      },
      "OperatingFlightCode_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_TicketConditionsV2"
          },
          "carrierCode": {
            "type": "string"
          },
          "flightNumber": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          },
          "operatingFlightNumber": {
            "type": "string"
          }
        }
      },
      "OptionProduct_TicketConditionsV2": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "rfisc": {
            "type": "string"
          },
          "groupCode": {
            "type": "string"
          },
          "subGroupCode": {
            "type": "string"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "initialPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "bundleCode": {
            "type": "string"
          },
          "subCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Organization_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User_TicketConditionsV2"
            }
          }
        }
      },
      "PassengerList_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV2"
            }
          },
          "primaryPassenger": {
            "$ref": "#/components/schemas/Passenger_TicketConditionsV2"
          },
          "adultOnly": {
            "type": "boolean"
          },
          "passengersByPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV2"
              }
            }
          },
          "orderedPassengerWithSpecificIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV2"
            }
          },
          "highestTierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "primaryPassengerTypeCode": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "passengerTypeCodesSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "atLeastOnePrimaryPassenger": {
            "type": "boolean"
          }
        },
        "description": "The list of passengers on the product."
      },
      "PassengerWithSpecificIds_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "umOptional": {
            "type": "boolean"
          },
          "umQuota": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "corporateAccountReference": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV2"
          },
          "subscriberContract": {
            "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV2"
          },
          "amadeusTatooRef": {
            "type": "integer",
            "format": "int32"
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          },
          "fareInformativePricingId": {
            "type": "integer",
            "format": "int32"
          },
          "tierLevelCodeAsString": {
            "type": "string"
          }
        }
      },
      "PossibleTraveler_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          },
          "paxType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "selectedForTravel": {
            "type": "boolean"
          }
        }
      },
      "Pricing_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "pricingOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MilesAndCashPricing_TicketConditionsV2"
            }
          }
        }
      },
      "ProductConnectionIdentifier_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV2"
          },
          "zapOffByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerZapOff_TicketConditionsV2"
          },
          "corporateByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerBoolean_TicketConditionsV2"
          },
          "fareBranchIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareBranchIdentifier_TicketConditionsV2"
            }
          },
          "productSegmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV2"
            }
          },
          "bundleCode": {
            "type": "string"
          },
          "fareFamily": {
            "type": "string"
          },
          "ticketDesignatorByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV2"
          },
          "cabinClass": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV2"
          },
          "fareBasis": {
            "type": "string"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "psisortedList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV2"
            }
          },
          "lowestClassProductSegmentIdentifier": {
            "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV2"
          },
          "operatingCarriers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The identifiers of the connections of the flight product."
      },
      "ProductSegmentIdentifier_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV2"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV2"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "arrivalDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_TicketConditionsV2"
          },
          "operatingFlightCode": {
            "$ref": "#/components/schemas/OperatingFlightCode_TicketConditionsV2"
          },
          "bookingClass": {
            "type": "string"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_TicketConditionsV2"
          },
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV2"
          },
          "cabin": {
            "type": "string"
          },
          "optionProductListByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerListOptionProduct_TicketConditionsV2"
          },
          "haulType": {
            "type": "string",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "privateFare": {
            "type": "boolean"
          }
        }
      },
      "RawPrice_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "fare": {
            "$ref": "#/components/schemas/Fare_TicketConditionsV2"
          },
          "tax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "penalty": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "tripPlannerBookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "options": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax_TicketConditionsV2"
            }
          },
          "nonRefundableTax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          },
          "total": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          }
        }
      },
      "ReservationUser_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "pnrId": {
            "type": "string"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV2"
          }
        }
      },
      "Stopover_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      },
      "SubscriberContract_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "contractNumber": {
            "type": "string"
          },
          "contractType": {
            "type": "string"
          },
          "productType": {
            "type": "string"
          },
          "productSubType": {
            "type": "string"
          },
          "companyCode": {
            "type": "string"
          },
          "contractStatus": {
            "type": "string"
          },
          "validityStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "validityEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "iataCode": {
            "type": "string"
          },
          "passengerTypeCodeMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "CEV",
                "CDT",
                "CFM",
                "CCH"
              ]
            }
          }
        }
      },
      "Tax_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "nature": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV2"
          }
        }
      },
      "TicketConditionsSearchCriteria_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "productConnectionIdentifiers": {
            "type": "array",
            "description": "The identifiers of the connections of the flight product.",
            "items": {
              "$ref": "#/components/schemas/ProductConnectionIdentifier_TicketConditionsV2"
            }
          },
          "fareFamilies": {
            "type": "array",
            "description": "The fareFamilies applying to the different connections.",
            "items": {
              "$ref": "#/components/schemas/FareFamily_TicketConditionsV2"
            }
          },
          "passengerList": {
            "$ref": "#/components/schemas/PassengerList_TicketConditionsV2"
          },
          "customerProfile": {
            "$ref": "#/components/schemas/CustomerProfile_TicketConditionsV2"
          },
          "bookingFlow": {
            "type": "string",
            "description": "The booking flow used when searching the product.",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "AGENT_BASED_PRIVATE_FARES",
              "STAFF"
            ]
          },
          "subFlow": {
            "type": "string",
            "description": "The sub flow used when searching the product.",
            "enum": [
              "BOOKING",
              "REBOOKING",
              "UPGRADE"
            ]
          },
          "accountCode": {
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "fareOption": {
            "type": "string",
            "description": "The fare Option applying.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "SUBSCRIBER_ABONNE",
              "SUBSCRIBER_WEEKEND",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          }
        },
        "description": "Represents the search criteria to obtain the ticket-conditions of a flight product."
      },
      "TierAttribute_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "TravelCompanion_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "format": "int32"
          },
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        }
      },
      "User_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uccrId": {
            "type": "string"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV2"
          }
        }
      },
      "Warning_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ZapOff_TicketConditionsV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "amountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "AMOUNT"
            ]
          },
          "ticketDesignatorModifier": {
            "type": "string"
          }
        }
      },
      "Carrier_FlightDetailsV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FlightDetailsV2"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "ConnectionResponse_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FlightDetailsV2"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_FlightDetailsV2"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV2"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_FlightDetailsV2"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "DateInterval_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection. It depends on the dateInterval asked in request."
      },
      "EquipmentType_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV2"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FlightCharacteristic_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightDetailsResponse_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ConnectionResponse_FlightDetailsV2"
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_FlightDetailsV2"
            }
          }
        },
        "description": "Represents the flight details response."
      },
      "FlightOnTime_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "Link_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationSpecificRemark_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV2"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_FlightDetailsV2"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_FlightDetailsV2"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_FlightDetailsV2"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV2"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_FlightDetailsV2"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "RatingCategory_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_FlightDetailsV2"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV2"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SegmentResponse_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV2"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_FlightDetailsV2"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV2"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_FlightDetailsV2"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FlightDetailsV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FlightDetailsV2"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_FlightDetailsV2": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FlightDetailsV2"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV2"
          }
        },
        "description": "Represents a station stopover."
      },
      "Stopover_FlightDetailsV2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "SelfConnectFlightProduct_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_UpsellOfferV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV1"
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the flight product based on its fareFamily and price.",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of product connections.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductConnection_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a self-connect flight product offer. It contains all the data related to the fare."
      },
      "SelfConnectItinerary_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "selfConnectOffers": {
            "type": "array",
            "description": "The list of possible flight offers for this itinerary.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectFlightProduct_UpsellOfferV1"
            }
          },
          "connections": {
            "type": "array",
            "description": "The list of connections constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/ConnectionResponse_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a self connect flight itinerary."
      },
      "SelfConnectPrice_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "displayPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers and based on the consumer need (could be rounded up for instance).",
            "example": 125
          },
          "totalPrice": {
            "type": "number",
            "description": "The total price for the product. Computed for all the passengers.",
            "example": 124.98
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the fee. Three letter currency code according to ISO 4217.",
            "example": "EUR"
          },
          "displayType": {
            "type": "string",
            "description": "The type of price displayed. Indicates what is included in the price displayed (only the fare, or also the fees and taxes).",
            "example": "FARE",
            "enum": [
              "FARE",
              "FEE",
              "TAX",
              "FARE_MILES"
            ]
          }
        },
        "description": "Represents a price."
      },
      "SelfConnectProductConnection_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "The list of segments making part of the connection.",
            "items": {
              "$ref": "#/components/schemas/SelfConnectProductSegment_UpsellOfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin.",
            "example": "Econmy"
          },
          "price": {
            "$ref": "#/components/schemas/SelfConnectPrice_UpsellOfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "Represents the connection of a self-connect flight product."
      },
      "SelfConnectProductSegment_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "cabin": {
            "$ref": "#/components/schemas/Cabin_UpsellOfferV1"
          },
          "sellingClass": {
            "$ref": "#/components/schemas/SellingClass_UpsellOfferV1"
          },
          "products": {
            "type": "array",
            "description": "The list of products (eg: Extra legroom seat) the passenger will have access to on this segment.",
            "items": {
              "$ref": "#/components/schemas/Product_UpsellOfferV1"
            }
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment.",
            "example": "Econmy"
          }
        },
        "description": "Represents the segment in a connection of a self-connect flight product."
      },
      "UpsellOffersSelfConnectResponse_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "itineraries": {
            "type": "array",
            "description": "Represents an abstract self connect offer response",
            "items": {
              "$ref": "#/components/schemas/SelfConnectItinerary_UpsellOfferV1"
            }
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_UpsellOfferV1"
          },
          "warnings": {
            "type": "array",
            "description": "The descriptors of the warning.",
            "items": {
              "$ref": "#/components/schemas/AbnormalResponseDescriptor_UpsellOfferV1"
            }
          },
          "searchMetadata": {
            "$ref": "#/components/schemas/SearchMetadata_UpsellOfferV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_UpsellOfferV1"
            }
          }
        },
        "description": "Represents a self-connect upsell offers response."
      },
      "BaggageAllowance_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The quantity of baggages allowed.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Represents the possible types of baggage allowance quantities.",
            "enum": [
              "PIECES",
              "WEIGHT"
            ]
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV1"
          },
          "detailsText": {
            "type": "string",
            "description": "The details text describing the baggage allowance."
          },
          "handBaggageDetailsText": {
            "type": "string",
            "description": "The details text describing the hand baggage allowance."
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the baggage allowances."
          }
        },
        "description": "Represents a baggage allowance."
      },
      "CommercialText_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "relevance": {
            "type": "integer",
            "description": "The relevance of the commercial text. Can be null.",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "description": "The details text.",
            "example": "Commercial text"
          }
        },
        "description": "Represents a commercial text related to a ticket condition."
      },
      "ConditionWrapper_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "ConditionWrapper_TicketConditionsV1": {
            "type": "object",
            "properties": {
              "detailsText": {
                "type": "string"
              },
              "commercialText": {
                "$ref": "#/components/schemas/CommercialText_TicketConditionsV1"
              },
              "fee": {
                "$ref": "#/components/schemas/Fee_TicketConditionsV1"
              }
            },
            "description": "Represents a ticket condition."
          }
        }
      },
      "DateIntervalView_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The beginning of the interval.",
            "format": "date",
            "example": 1571788800000
          },
          "to": {
            "type": "string",
            "description": "The end of the interval.",
            "format": "date",
            "example": 1593475200000
          }
        },
        "description": "Represents a date interval to be used for the output."
      },
      "Disclaimer_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "FareFamily_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the fare family.",
            "example": "STANDARD"
          },
          "bundleCode": {
            "type": "string",
            "description": "The bundle code of the fare family.",
            "example": "STDE"
          },
          "hierarchy": {
            "type": "integer",
            "description": "The hierarchy of the fare family, indicating its order among other fareFamilies. Higher fareFamilies (eg: business flex) have lower hierarchy number.",
            "format": "int32",
            "example": 7000
          },
          "title": {
            "type": "string",
            "description": "The title of the fare family.",
            "example": "Standard Plus"
          },
          "commercialDescription": {
            "type": "string",
            "description": "The commercial description of the fare family.",
            "example": "Standard Plus"
          }
        },
        "description": "Represents a family of fares grouped according to specific airline criteria, based on the services and conditions/benefits of the airfare. "
      },
      "Fee_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the fee.",
            "example": "EUR"
          }
        },
        "description": "Represents a fee."
      },
      "FlyingBlueAdvantages_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "extraBagQuantity": {
            "type": "integer",
            "description": "The extra number of bags the user is allowed to have.",
            "format": "int32"
          },
          "skyPriority": {
            "type": "boolean",
            "description": "A flag indicating whether the user is granted the skyPriority benefit or not."
          }
        },
        "description": "The advantages accorded to a FlyingBlue user due to his tier level."
      },
      "FlyingBlue_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "earned": {
            "type": "integer",
            "description": "The amount of miles earned if the offer is purchased.",
            "format": "int64"
          },
          "detailsText": {
            "type": "string",
            "description": "The label accompanying the amount of miles earned."
          },
          "qualifyingPoints": {
            "type": "integer",
            "description": "The amount of qualifying points (xp) earned if the offer is purchased.",
            "format": "int64"
          },
          "ultimateQualifyingPoints": {
            "type": "integer",
            "description": "The amount of ultimate qualifying points (uxp) earned if the offer is purchased.",
            "format": "int64"
          },
          "detailsTextQualPoints": {
            "type": "string",
            "description": "The label accompanying the amount of XPs and UXPs earned."
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_TicketConditionsV1"
          },
          "flyingBlueAdvantages": {
            "$ref": "#/components/schemas/FlyingBlueAdvantages_TicketConditionsV1"
          },
          "conditionTitleLabel": {
            "type": "string",
            "description": "The title designating the flying blue advantages."
          }
        },
        "description": "The flyingBlue conditions applicable to a FlyingBlue passenger on a flight offer.",
        "nullable": true
      },
      "Link_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Money_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "writeOnly": true
          }
        },
        "description": "The amount of the fee.",
        "example": 15
      },
      "PassengerTicketConditionsWrapper_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "description": "The id of the passenger.",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AdvancePurchaseCondition"
                },
                {
                  "$ref": "#/components/schemas/BlueBizCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelCovidCondition"
                },
                {
                  "$ref": "#/components/schemas/CancelMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/CarrierFeesCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChangeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/ChildrenDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/DedicatedOverheadBinSpaceCondition"
                },
                {
                  "$ref": "#/components/schemas/DeplaneQuicklyCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXPMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/FlyingBlueMilesXpCondition"
                },
                {
                  "$ref": "#/components/schemas/FreeSeatSelectionCondition"
                },
                {
                  "$ref": "#/components/schemas/GoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/HandBaggageAllowanceCondition"
                },
                {
                  "$ref": "#/components/schemas/IATACondition"
                },
                {
                  "$ref": "#/components/schemas/InfantDiscountCondition"
                },
                {
                  "$ref": "#/components/schemas/LoungeMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/MandatoryUMCondition"
                },
                {
                  "$ref": "#/components/schemas/MaximumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/MinimumStayCondition"
                },
                {
                  "$ref": "#/components/schemas/NoShowCondition"
                },
                {
                  "$ref": "#/components/schemas/ProductConditions"
                },
                {
                  "$ref": "#/components/schemas/SeniorCardCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityCondition"
                },
                {
                  "$ref": "#/components/schemas/SkyPriorityMilesUpgradeCondition"
                },
                {
                  "$ref": "#/components/schemas/StudentCardCondition"
                },
                {
                  "$ref": "#/components/schemas/YouthCardCondition"
                }
              ]
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV1"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV1"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV1"
          },
          "travelClassText": {
            "type": "string",
            "writeOnly": true
          },
          "tripText": {
            "type": "string",
            "writeOnly": true
          }
        },
        "description": "Represents the ticket-conditions for a given passenger."
      },
      "Passenger_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id identifying the passenger uniquely on the flight.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "typeWithoutCard": {
            "type": "string",
            "description": "The different types of passengers.",
            "enum": [
              "ADT",
              "CHD",
              "INF",
              "C14",
              "YTH",
              "YCD",
              "STU",
              "B12",
              "B13",
              "B14",
              "B15",
              "UNN"
            ]
          },
          "availableCard": {
            "type": "string",
            "description": "The discount card associated with the passenger.",
            "enum": [
              "SENIOR",
              "YOUTH"
            ]
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the passenger.",
            "format": "date"
          },
          "primaryPassenger": {
            "type": "boolean",
            "description": "A flag indicating whether the passenger is considered to be the primary one (i.e. the passenger considered when computing some information like the price, fare benefits etc."
          }
        },
        "description": "The passenger of a flight."
      },
      "TicketConditionsConnection_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "The list of ticket-conditions applying.",
            "items": {
              "$ref": "#/components/schemas/ConditionWrapper_TicketConditionsV1"
            }
          },
          "fareFamily": {
            "$ref": "#/components/schemas/FareFamily_TicketConditionsV1"
          },
          "baggageAllowance": {
            "$ref": "#/components/schemas/BaggageAllowance_TicketConditionsV1"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV1"
          },
          "travelClassText": {
            "type": "string",
            "description": "The text describing the travel class information.",
            "example": "You will be travelling in D Class with fare basis D3FFWFR."
          },
          "travelDateIntervals": {
            "type": "array",
            "description": "Travel date interval describes the range of dates for the Connection that the conditions apply to.",
            "items": {
              "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV1"
            }
          },
          "conditionsPerPassenger": {
            "type": "array",
            "description": "The ticket-conditions per passenger.",
            "items": {
              "$ref": "#/components/schemas/PassengerTicketConditionsWrapper_TicketConditionsV1"
            }
          },
          "tripText": {
            "type": "string",
            "description": "A brief description of the trip.",
            "example": "Lisbon, Humberto Delgado Airport (LIS) to Milan, Malpensa Airport (MXP)"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV1"
            }
          }
        },
        "description": "Represents the ticket-conditions for a connection."
      },
      "TicketConditionsResponse_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "description": "List of passengers associated to the product (matching requested passenger list).",
            "items": {
              "$ref": "#/components/schemas/Passenger_TicketConditionsV1"
            }
          },
          "sameConditions": {
            "type": "boolean",
            "description": "Indicates whether the same conditions apply to all connections of the flight product."
          },
          "connections": {
            "type": "array",
            "description": "The ticket-conditions per connection of the product.",
            "items": {
              "$ref": "#/components/schemas/TicketConditionsConnection_TicketConditionsV1"
            }
          },
          "bookingDateInterval": {
            "$ref": "#/components/schemas/DateIntervalView_TicketConditionsV1"
          },
          "flyingBlue": {
            "$ref": "#/components/schemas/FlyingBlue_TicketConditionsV1"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_TicketConditionsV1"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_TicketConditionsV1"
            }
          }
        },
        "description": "Represents the ticket-conditions response."
      },
      "Area_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "countries": {
            "type": "array",
            "description": "The list of countries making part of the area.",
            "items": {
              "$ref": "#/components/schemas/Country_ReferenceDataV1"
            }
          }
        },
        "description": "Represents an area of the world."
      },
      "City_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "state": {
            "$ref": "#/components/schemas/State_ReferenceDataV1"
          },
          "stopovers": {
            "type": "array",
            "description": "List of available stopover in the city.",
            "items": {
              "$ref": "#/components/schemas/Stopover_ReferenceDataV1"
            }
          }
        },
        "description": "Represents a city."
      },
      "CountrySettings_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "maximumNumberOfSeats": {
            "type": "integer",
            "description": "The maximum number of seats that can be booked at once. Note that e.g. infants do not have their own seat.",
            "format": "int32",
            "example": 9
          },
          "minimumNumberOfAdults": {
            "type": "integer",
            "description": "The minimum number of adults per booking.",
            "format": "int32",
            "example": 1
          },
          "splitPrice": {
            "type": "boolean",
            "description": "A flag indicating whether the prices should be split per bound, or the total prices.",
            "example": true
          },
          "defaultLocation": {
            "$ref": "#/components/schemas/Location_ReferenceDataV1"
          },
          "originsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available origins for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV1"
            }
          },
          "destinationsWithType": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available destinations for the country.",
            "example": [
              {
                "code": "BBA",
                "type": "AIRPORT"
              },
              {
                "code": "YOW",
                "type": "CITY"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Location_ReferenceDataV1"
            }
          },
          "origins": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available origins for the country.",
            "example": [
              "BBA",
              "YOW",
              "JRO",
              "SCV"
            ],
            "items": {
              "type": "string",
              "description": "The available origins for the country.",
              "example": "[\"BBA\",\"YOW\",\"JRO\",\"SCV\"]"
            }
          },
          "destinations": {
            "uniqueItems": true,
            "type": "array",
            "description": "The available destinations for the country.",
            "example": [
              "BBA",
              "YOW",
              "JRO",
              "SCV"
            ],
            "items": {
              "type": "string",
              "description": "The available destinations for the country.",
              "example": "[\"BBA\",\"YOW\",\"JRO\",\"SCV\"]"
            }
          },
          "highlightedOrigins": {
            "type": "array",
            "description": "The highlighted origins for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV1"
            }
          },
          "highlightedDestinations": {
            "type": "array",
            "description": "The highlighted destinations for the country.",
            "items": {
              "$ref": "#/components/schemas/HighlightedLocation_ReferenceDataV1"
            }
          },
          "passengerTypes": {
            "type": "array",
            "description": "The passenger types accepted for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataPassengerType_ReferenceDataV1"
            }
          },
          "areas": {
            "type": "array",
            "description": "The details of the world areas and the countries, cities, airports/stopovers they contain.",
            "items": {
              "$ref": "#/components/schemas/Area_ReferenceDataV1"
            }
          },
          "defaultAirport": {
            "type": "string",
            "description": "The default stopover for the country.",
            "example": "CDG"
          },
          "commercialCabins": {
            "type": "array",
            "description": "The available commercial cabins for the country.",
            "items": {
              "$ref": "#/components/schemas/RefDataEnumOutputCommercialCabinType_ReferenceDataV1"
            }
          }
        },
        "description": "Represents the settings defined for a country."
      },
      "Country_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "cities": {
            "type": "array",
            "description": "List of available cities in the country. Country contains either a list of states or a list of cities.",
            "items": {
              "$ref": "#/components/schemas/City_ReferenceDataV1"
            }
          }
        },
        "description": "Represents a country."
      },
      "Disclaimer_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "displayPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the price to display.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "totalPriceText": {
            "type": "string",
            "description": "The legal disclaimer linked to the total price.",
            "example": "All amounts are in EUR. Taxes and surcharges are included. No booking fee is applicable, but a payment surcharge may apply. Prices shown may vary depending on fare availability."
          },
          "fareMilesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the fare in miles.",
            "example": "* Please note: airport taxes and security charges are not covered by your Miles and must be paid separately. The same applies for carrier-imposed surcharges. For flights within Europe operated by Air France, KLM, HOP! and Joon, no additional carrier-imposed surcharges apply. The exact cost will be shown in the trip overview after you have selected your flight."
          },
          "handBaggageText": {
            "type": "string",
            "description": "The legal disclaimer linked to the hand baggages.",
            "example": "* Applies to flights operated by KLM and Air France."
          },
          "flexibilityText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the flight.",
            "example": "** Refundable in form of a voucher if you cancel before the 1st flight in your trip. Voucher is valid for 1 year from the date of issue, non-refundable and non-transferable."
          },
          "optionalUMText": {
            "type": "string",
            "description": "The legal disclaimer linked to the flexibility conditions related to the optional Unaccompanied Minors.",
            "example": "The Kids Solo service will be automatically added to your booking at the Options step. Its price is not included in the fares below."
          },
          "infantAttributesSpecificitiesText": {
            "type": "string",
            "description": "The legal disclaimer linked to the specificities related to the infants.",
            "example": "Baggage allowance and other fare conditions may vary for infant passengers. Please check applicable conditions."
          }
        },
        "description": "The texts to be shown as legal disclaimers regarding fare, tax, fee, baggages etc."
      },
      "HighlightedLocation_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location.",
            "example": "NCE"
          },
          "type": {
            "type": "string",
            "description": "Represents the different types of highlighted locations.",
            "example": "AIRPORT",
            "enum": [
              "CITY",
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION"
            ]
          },
          "relevance": {
            "type": "integer",
            "description": "The relevance of the location.",
            "format": "int32",
            "example": 3
          }
        },
        "description": "Represents a location to be highlighted due to it's importance over the others."
      },
      "Location_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the location",
            "example": "AMS"
          },
          "type": {
            "type": "string",
            "description": "The type of the location",
            "example": "AIRPORT"
          },
          "toOffer": {
            "type": "boolean",
            "description": "A flag to indicate if a location should be used for offer search."
          }
        },
        "description": "Represents a location for reference data",
        "example": [
          {
            "code": "BBA",
            "type": "AIRPORT"
          },
          {
            "code": "YOW",
            "type": "CITY"
          }
        ]
      },
      "RebookingDetails_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "changeAllowedForOriginDestination": {
            "type": "boolean",
            "description": "A flag indicating whether the change of origin/destination is allowed when rebooking."
          }
        },
        "description": "Represents the reference data related to the rebooking."
      },
      "RefDataEnumOutputCommercialCabinType_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          }
        },
        "description": "Generic response type for the /reference-data endpoint."
      },
      "RefDataPassengerType_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The different types of passengers.",
            "example": "ADT"
          },
          "label": {
            "type": "string",
            "description": "Label of an element.",
            "example": "Adult"
          },
          "minAge": {
            "type": "integer",
            "description": "The minimum age for a passenger of this type.",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "The maximum age for a passenger of this type.",
            "format": "int32"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The recommended display order if the type should be displayed in a list.",
            "format": "int32"
          },
          "adult": {
            "type": "boolean"
          }
        },
        "description": "Represents a passenger type in the reference data."
      },
      "ReferenceDataResponse_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "Market code.",
            "example": "FR"
          },
          "countries": {
            "type": "array",
            "description": "List of available countries of sales in the market.",
            "items": {
              "$ref": "#/components/schemas/CountrySettings_ReferenceDataV1"
            }
          },
          "rebookingDetails": {
            "$ref": "#/components/schemas/RebookingDetails_ReferenceDataV1"
          },
          "groupLink": {
            "type": "string",
            "description": "Group link returned for the requested language-market."
          },
          "minDepartureDate": {
            "type": "string",
            "description": "Earliest possible departure date, if applicable.",
            "format": "date-time"
          },
          "maxDepartureDate": {
            "type": "string",
            "description": "Latest possible departure date, if applicable.",
            "format": "date-time"
          },
          "disclaimer": {
            "$ref": "#/components/schemas/Disclaimer_ReferenceDataV1"
          }
        },
        "description": "Response of the /reference-data endpoint."
      },
      "State_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "name": {
            "type": "string",
            "description": "The name associated to the location. The name is in the language specified in ContentLanguage header.",
            "example": "Paris"
          }
        },
        "description": "Represents a state."
      },
      "Stopover_ReferenceDataV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying a location.",
            "example": "PAR"
          },
          "label": {
            "type": "string",
            "description": "The label associated to the location. The label is in the language specified in ContentLanguage header.",
            "example": "Paris"
          },
          "phoneticLabel": {
            "type": "string",
            "description": "The phonetic label associated to the location. The phonetic label is the pronunciation of the label on Pinyin.",
            "example": "Bali"
          },
          "type": {
            "type": "string",
            "description": "The type of the stopover.",
            "example": "AIRPORT"
          }
        },
        "description": "Represents a stopover in the reference data."
      },
      "AircraftOwner_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "freeText": {
            "type": "string"
          },
          "codeLabel": {
            "type": "string"
          }
        }
      },
      "CashPricing_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FULL",
              "ADJUSTMENT"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_TicketConditionsV1"
          },
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV1"
            },
            "writeOnly": true
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "dynamicPenaltyWaived": {
            "type": "boolean"
          },
          "flexiblePenaltyWaived": {
            "type": "boolean"
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawPrice_TicketConditionsV1"
            }
          },
          "price": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV1"
          },
          "basePrice": {
            "$ref": "#/components/schemas/RawPrice_TicketConditionsV1"
          }
        }
      },
      "CorporateContract_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "uccrId": {
            "type": "string"
          },
          "corporateName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "oin": {
            "type": "string"
          },
          "publishedContractId": {
            "type": "integer",
            "format": "int64"
          },
          "accountCode": {
            "type": "string"
          },
          "maxNumberOfPaxPerBooking": {
            "type": "integer",
            "format": "int32"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization_TicketConditionsV1"
            }
          },
          "isAbleToBookForOthers": {
            "type": "boolean",
            "writeOnly": true
          },
          "corporateContractStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "INCOMPLETE"
            ]
          },
          "ableToBookForOthers": {
            "type": "boolean"
          }
        }
      },
      "Currency_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "CustomerProfile_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "resourceId": {
            "type": "string"
          },
          "corporateAccountKey": {
            "type": "integer",
            "format": "int32"
          },
          "subscriberContractKey": {
            "type": "integer",
            "format": "int32"
          },
          "corporateContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateContract_TicketConditionsV1"
            }
          },
          "subscriberContracts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV1"
            }
          },
          "possibleTravelersFromProfile": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PossibleTraveler_TicketConditionsV1"
            }
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV1"
          },
          "reservationUsersByPnrId": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReservationUser_TicketConditionsV1"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "DEFAULT",
              "TRAVEL_ARRANGER"
            ]
          },
          "email": {
            "type": "string"
          },
          "reservationId": {
            "type": "string"
          },
          "selectedTravelCompanions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TravelCompanion_TicketConditionsV1"
            }
          },
          "expiryDateTimeUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The profile information of the customer for whom the search is done."
      },
      "Equipment_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "acvCode": {
            "type": "string"
          },
          "bus": {
            "type": "boolean"
          },
          "limousine": {
            "type": "boolean"
          },
          "train": {
            "type": "boolean"
          },
          "aircraft": {
            "type": "boolean"
          }
        }
      },
      "FareBranchIdentifier_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "segmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV1"
            }
          },
          "pricing": {
            "$ref": "#/components/schemas/Pricing_TicketConditionsV1"
          },
          "fareOrigin": {
            "type": "string"
          },
          "fareDestination": {
            "type": "string"
          },
          "farePaxTypeCode": {
            "type": "string"
          },
          "fareCarrier": {
            "type": "string"
          },
          "fareTariff": {
            "type": "string"
          },
          "fareRule": {
            "type": "string"
          },
          "fareTypeCode": {
            "type": "string"
          },
          "pricingProgramCode": {
            "type": "string"
          }
        }
      },
      "FareInformationByPassengerBoolean_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "FareInformationByPassengerListOptionProduct_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV1"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OptionProduct_TicketConditionsV1"
                  },
                  {
                    "$ref": "#/components/schemas/SAFBundle"
                  }
                ]
              }
            }
          }
        }
      },
      "FareInformationByPassengerString_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "FareInformationByPassengerZapOff_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fareInformation": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV1"
            },
            "writeOnly": true
          },
          "dataByPassenger": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ZapOff_TicketConditionsV1"
            }
          }
        }
      },
      "Fare_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "fareDetails": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV1"
            }
          }
        }
      },
      "FlightCode_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "marketingCarrier": {
            "$ref": "#/components/schemas/MarketingCarrier_TicketConditionsV1"
          },
          "flightNumber": {
            "type": "string"
          },
          "operationalSuffix": {
            "type": "string"
          },
          "wholeFlightCode": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          }
        }
      },
      "FlyingBlueCard_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "cin": {
            "type": "integer",
            "format": "int64"
          },
          "milesBalance": {
            "type": "integer",
            "format": "int64"
          },
          "tierLevelLabel": {
            "type": "string"
          },
          "tierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "tierAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TierAttribute_TicketConditionsV1"
            }
          },
          "warning": {
            "$ref": "#/components/schemas/Warning_TicketConditionsV1"
          }
        }
      },
      "MarketingCarrier_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "MilesAndCashPricing_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "cashPricing": {
            "$ref": "#/components/schemas/CashPricing_TicketConditionsV1"
          },
          "milesPricing": {
            "$ref": "#/components/schemas/MilesPricing_TicketConditionsV1"
          },
          "monetaryPercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MilesPricing_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "pricesPerPassengerType": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV1"
            },
            "writeOnly": true
          },
          "pricesPerPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Money_TicketConditionsV1"
            }
          },
          "basePrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          }
        }
      },
      "OperatingFlightCode_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "aircraftOwner": {
            "$ref": "#/components/schemas/AircraftOwner_TicketConditionsV1"
          },
          "carrierCode": {
            "type": "string"
          },
          "flightNumber": {
            "type": "string"
          },
          "flightNumberWithoutLeadingZeroes": {
            "type": "string"
          },
          "operatingFlightNumber": {
            "type": "string"
          }
        }
      },
      "OptionProduct_TicketConditionsV1": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string"
          },
          "rfisc": {
            "type": "string"
          },
          "groupCode": {
            "type": "string"
          },
          "subGroupCode": {
            "type": "string"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "initialPrice": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "bundleCode": {
            "type": "string"
          },
          "subCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Organization_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User_TicketConditionsV1"
            }
          }
        }
      },
      "PassengerList_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "passengers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV1"
            }
          },
          "primaryPassenger": {
            "$ref": "#/components/schemas/Passenger_TicketConditionsV1"
          },
          "adultOnly": {
            "type": "boolean"
          },
          "passengersByPassengerTypeCode": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV1"
              }
            }
          },
          "orderedPassengerWithSpecificIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassengerWithSpecificIds_TicketConditionsV1"
            }
          },
          "highestTierLevelCode": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "R",
              "M"
            ]
          },
          "primaryPassengerTypeCode": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "passengerTypeCodesSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "atLeastOnePrimaryPassenger": {
            "type": "boolean"
          }
        },
        "description": "The list of passengers on the product."
      },
      "PassengerWithSpecificIds_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "umOptional": {
            "type": "boolean"
          },
          "umQuota": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "corporateAccountReference": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV1"
          },
          "subscriberContract": {
            "$ref": "#/components/schemas/SubscriberContract_TicketConditionsV1"
          },
          "amadeusTatooRef": {
            "type": "integer",
            "format": "int32"
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          },
          "fareInformativePricingId": {
            "type": "integer",
            "format": "int32"
          },
          "tierLevelCodeAsString": {
            "type": "string"
          }
        }
      },
      "PossibleTraveler_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          },
          "paxType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "selectedForTravel": {
            "type": "boolean"
          }
        }
      },
      "Pricing_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "pricingOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MilesAndCashPricing_TicketConditionsV1"
            }
          }
        }
      },
      "ProductConnectionIdentifier_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV1"
          },
          "zapOffByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerZapOff_TicketConditionsV1"
          },
          "corporateByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerBoolean_TicketConditionsV1"
          },
          "fareBranchIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FareBranchIdentifier_TicketConditionsV1"
            }
          },
          "productSegmentIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV1"
            }
          },
          "bundleCode": {
            "type": "string"
          },
          "fareFamily": {
            "type": "string"
          },
          "ticketDesignatorByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV1"
          },
          "cabinClass": {
            "type": "string",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV1"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV1"
          },
          "fareBasis": {
            "type": "string"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "departureDate": {
            "type": "string",
            "format": "date"
          },
          "psisortedList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV1"
            }
          },
          "lowestClassProductSegmentIdentifier": {
            "$ref": "#/components/schemas/ProductSegmentIdentifier_TicketConditionsV1"
          },
          "operatingCarriers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The identifiers of the connections of the flight product."
      },
      "ProductSegmentIdentifier_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "origin": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV1"
          },
          "destination": {
            "$ref": "#/components/schemas/Stopover_TicketConditionsV1"
          },
          "departureDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "arrivalDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "flightCode": {
            "$ref": "#/components/schemas/FlightCode_TicketConditionsV1"
          },
          "operatingFlightCode": {
            "$ref": "#/components/schemas/OperatingFlightCode_TicketConditionsV1"
          },
          "bookingClass": {
            "type": "string"
          },
          "dateVariation": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment_TicketConditionsV1"
          },
          "fareBasisByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerString_TicketConditionsV1"
          },
          "cabin": {
            "type": "string"
          },
          "optionProductListByPassenger": {
            "$ref": "#/components/schemas/FareInformationByPassengerListOptionProduct_TicketConditionsV1"
          },
          "haulType": {
            "type": "string",
            "enum": [
              "LH",
              "CIO",
              "MH",
              "SH"
            ]
          },
          "privateFare": {
            "type": "boolean"
          }
        }
      },
      "RawPrice_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "fare": {
            "$ref": "#/components/schemas/Fare_TicketConditionsV1"
          },
          "tax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "penalty": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "bookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "tripPlannerBookingFee": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "options": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax_TicketConditionsV1"
            }
          },
          "nonRefundableTax": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          },
          "total": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          }
        }
      },
      "ReservationUser_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "pnrId": {
            "type": "string"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV1"
          }
        }
      },
      "Stopover_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      },
      "SubscriberContract_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "contractNumber": {
            "type": "string"
          },
          "contractType": {
            "type": "string"
          },
          "productType": {
            "type": "string"
          },
          "productSubType": {
            "type": "string"
          },
          "companyCode": {
            "type": "string"
          },
          "contractStatus": {
            "type": "string"
          },
          "validityStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "validityEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "iataCode": {
            "type": "string"
          },
          "passengerTypeCodeMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "CEV",
                "CDT",
                "CFM",
                "CCH"
              ]
            }
          }
        }
      },
      "Tax_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "nature": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Money_TicketConditionsV1"
          }
        }
      },
      "TicketConditionsSearchCriteria_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "productConnectionIdentifiers": {
            "type": "array",
            "description": "The identifiers of the connections of the flight product.",
            "items": {
              "$ref": "#/components/schemas/ProductConnectionIdentifier_TicketConditionsV1"
            }
          },
          "fareFamilies": {
            "type": "array",
            "description": "The fareFamilies applying to the different connections.",
            "items": {
              "$ref": "#/components/schemas/FareFamily_TicketConditionsV1"
            }
          },
          "passengerList": {
            "$ref": "#/components/schemas/PassengerList_TicketConditionsV1"
          },
          "customerProfile": {
            "$ref": "#/components/schemas/CustomerProfile_TicketConditionsV1"
          },
          "bookingFlow": {
            "type": "string",
            "description": "The booking flow used when searching the product.",
            "enum": [
              "REWARD",
              "CORPORATE",
              "LEISURE",
              "AGENT_BASED_PRIVATE_FARES",
              "STAFF"
            ]
          },
          "subFlow": {
            "type": "string",
            "description": "The sub flow used when searching the product.",
            "enum": [
              "BOOKING",
              "REBOOKING",
              "UPGRADE"
            ]
          },
          "accountCode": {
            "type": "string",
            "description": "The account code.",
            "example": "EXP123"
          },
          "fareOption": {
            "type": "string",
            "description": "The fare Option applying.",
            "enum": [
              "CORSICA",
              "FAMILY",
              "FLEXIBLE",
              "SUBSCRIBER_ABONNE",
              "SUBSCRIBER_WEEKEND",
              "UM_OPTIONAL",
              "UM_MANDATORY"
            ]
          },
          "officeId": {
            "type": "string",
            "description": "An id identifying the initiator of the request. An office ID can for example identify an office (eg: airlines, travel agencies, hotel proividers etc.), an agent, a terminal.\nIt is built based on a hierarchical structure constituted of a location code, a corporate Id (identifying a group office) and an office code.\nDepending on the ID provided, specific processes might occur and dedicated data structures might be used.",
            "example": "EX4MPL3ID"
          }
        },
        "description": "Represents the search criteria to obtain the ticket-conditions of a flight product."
      },
      "TierAttribute_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "TravelCompanion_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "passengerId": {
            "type": "integer",
            "format": "int32"
          },
          "travelerKey": {
            "type": "integer",
            "format": "int32"
          },
          "travelerSource": {
            "type": "string",
            "enum": [
              "PROFILE",
              "CORPORATE"
            ]
          }
        }
      },
      "User_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uccrId": {
            "type": "string"
          },
          "passengerTypeCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "gin": {
            "type": "integer",
            "format": "int64"
          },
          "flyingBlueCard": {
            "$ref": "#/components/schemas/FlyingBlueCard_TicketConditionsV1"
          }
        }
      },
      "Warning_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ZapOff_TicketConditionsV1": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "amountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "AMOUNT"
            ]
          },
          "ticketDesignatorModifier": {
            "type": "string"
          }
        }
      },
      "Carrier_FlightDetailsV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the carrier.",
            "example": "WA"
          },
          "name": {
            "type": "string",
            "description": "The name of the carrier.",
            "example": "Klm Cityhopper"
          },
          "aircraftOwner": {
            "type": "string",
            "description": "The aircraft owner.",
            "example": "KLM CITYHOPPER"
          }
        },
        "description": "Represents a carrier."
      },
      "City_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/State_FlightDetailsV1"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "ConnectionResponse_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "dateInterval": {
            "$ref": "#/components/schemas/DateInterval_FlightDetailsV1"
          },
          "duration": {
            "type": "integer",
            "description": "The duration in minutes of the trip.",
            "format": "int32"
          },
          "flightCharacteristics": {
            "type": "array",
            "description": "The list of specific characteristics linked to the flight (example: CO2 compensation).",
            "items": {
              "$ref": "#/components/schemas/FlightCharacteristic_FlightDetailsV1"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV1"
            }
          },
          "segments": {
            "type": "array",
            "description": "The list of segments constituting the connection.",
            "items": {
              "$ref": "#/components/schemas/SegmentResponse_FlightDetailsV1"
            }
          }
        },
        "description": "Represents the connection of an itinerary. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "DateInterval_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Date interval describing the range of dates used when retrieving the fares related to this connection. It depends on the dateInterval asked in request."
      },
      "EquipmentType_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the equipment.",
            "example": "73H"
          },
          "name": {
            "type": "string",
            "description": "The name of the equipment.",
            "example": "Boeing 737-800"
          },
          "equipInformationText": {
            "type": "string",
            "description": "An optional informative text about the equipment. Usually returned in case of specific equipments like trains, bus or limousines..",
            "example": "Please note: you will travel by bus for this part of the journey."
          },
          "acvCode": {
            "type": "string",
            "description": "The ACV code of the equipment.",
            "example": "73F"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV1"
            }
          }
        },
        "description": "Represents a type of equipment and the data related to it."
      },
      "FlightCharacteristic_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The codes of the possible flight characteristics.",
            "enum": [
              "CO2_COMPENSATION",
              "TRAVEL_CORRIDOR"
            ]
          },
          "label": {
            "type": "string",
            "description": "The label describing the characteristic. Translated in the language as specified in ContentLanguage header."
          }
        },
        "description": "Represents a specific characteristic of the flight (example: CO2 compensation)."
      },
      "FlightDetailsResponse_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/ConnectionResponse_FlightDetailsV1"
          },
          "locationSpecificRemarks": {
            "type": "array",
            "description": "A list of remarks specific to the locations constituting the itinerary.",
            "items": {
              "$ref": "#/components/schemas/LocationSpecificRemark_FlightDetailsV1"
            }
          }
        },
        "description": "Represents the flight details response."
      },
      "FlightOnTime_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "referenceDate": {
            "type": "string",
            "description": "The date of reference.",
            "format": "date"
          },
          "cancellationPercentage": {
            "type": "integer",
            "description": "The percentage of cancellation.",
            "format": "int32"
          },
          "halfHourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than half an hour.",
            "format": "int32"
          },
          "hourDelayPercentage": {
            "type": "integer",
            "description": "The percentage of flights having a delay of less than an hour.",
            "format": "int32"
          }
        },
        "description": "Represents statistics about the on-time departure of flights. This information is specifically required in point of sale Brazil."
      },
      "Link_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "deprecation": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocationSpecificRemark_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "remarkCode": {
            "type": "string",
            "description": "The code associated with the remark.",
            "nullable": true,
            "example": "AF_US_VISA"
          },
          "remarkText": {
            "type": "string",
            "description": "The label of the remark translated in the language specified in Content-Language header.",
            "example": "You must obtain authorization online for all travels to, from, or through the United States. This measure applies to residents of all countries in the Visa Waiver Program (VWP)."
          }
        },
        "description": "Represents a remark specific to the locations constituting an itinerary."
      },
      "MarketingFlightResponse_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "A four digit number representing the number of the flight.",
            "example": "3295"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV1"
          },
          "suffix": {
            "type": "string",
            "description": "A suffix to be appended at the end of the flight number, for example when a flight is canceled and rescheduled.",
            "example": "A"
          },
          "operatingFlight": {
            "$ref": "#/components/schemas/OperatingFlight_FlightDetailsV1"
          },
          "flightOnTime": {
            "$ref": "#/components/schemas/FlightOnTime_FlightDetailsV1"
          }
        },
        "description": "The marketing flight."
      },
      "OperatingFlight_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "equipmentType": {
            "$ref": "#/components/schemas/EquipmentType_FlightDetailsV1"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier_FlightDetailsV1"
          },
          "ratingStatistics": {
            "$ref": "#/components/schemas/RatingStatistics_FlightDetailsV1"
          }
        },
        "description": "The operating flight, i.e. the flight actually carrying the passengers and operated by the operating airline/carrier."
      },
      "RatingCategory_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "The value of the rating value of the (eg: 1, 2, 3, 4, or 5 for a 5-stars rating).",
            "format": "int32",
            "example": 5
          },
          "count": {
            "type": "integer",
            "description": "The number of customers who gave this rating.",
            "format": "int32",
            "example": 42
          }
        },
        "description": "The rating category. There is one category per possible rating value (5 categories, from 1 to 5 for a 5-stars rating)."
      },
      "RatingStatistics_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "ratingCategories": {
            "type": "array",
            "description": "The amount of ratings per level. Starts with the 5 stars.",
            "items": {
              "$ref": "#/components/schemas/RatingCategory_FlightDetailsV1"
            }
          },
          "numberOfRatings": {
            "type": "integer",
            "description": "The total amount of ratings.",
            "format": "int32"
          },
          "averageRating": {
            "type": "number",
            "description": "The average rating given by the former passengers.",
            "format": "double"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link_FlightDetailsV1"
            }
          }
        },
        "description": "The rating given by former customers to a flight."
      },
      "SegmentResponse_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "arrivalDateTime": {
            "type": "string",
            "description": "The arrival date and time of the segment.",
            "format": "date-time"
          },
          "departureDateTime": {
            "type": "string",
            "description": "The departure date and time of the segment.",
            "format": "date-time"
          },
          "destination": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV1"
          },
          "marketingFlight": {
            "$ref": "#/components/schemas/MarketingFlightResponse_FlightDetailsV1"
          },
          "origin": {
            "$ref": "#/components/schemas/StopoverStation_FlightDetailsV1"
          },
          "stopsAt": {
            "type": "array",
            "description": "The list of technical stops occurring on the segment. These stops are usually for refuelling purpose and passengers usually do not disembark the plane (as opposed to transfers).",
            "items": {
              "$ref": "#/components/schemas/StopoverStation_FlightDetailsV1"
            }
          },
          "stopInformationText": {
            "type": "string",
            "description": "The label linked to the technical stop. This message is translated.",
            "example": "Your Muscat - Amsterdam trip includes a stop in Dammam / Dhahran, Saudi Arabia. Please check the entry requirements for this country."
          },
          "transferTime": {
            "type": "integer",
            "description": "The transfer time between the arrival of this segment and the departure of the next segment, can be null if there is no next segment.",
            "format": "int32",
            "nullable": true
          },
          "transferLabel": {
            "type": "string",
            "description": "The label linked to the transfer. This message is translated.",
            "example": "Your trip includes a transfer in Paris. Please note that you must collect any checked baggage from Paris Orly Airport before proceeding to Paris Charles de Gaulle Airport."
          },
          "highestPriority": {
            "type": "boolean",
            "description": "A flag indicating if this segment is the one of higher priority, in regard to its haul type."
          },
          "dateVariation": {
            "type": "integer",
            "description": "The number of days between the dates of departure and arrival of the segment.",
            "format": "int32"
          },
          "flightDuration": {
            "type": "integer",
            "description": "The duration of the flight in minutes on this segment.",
            "format": "int32"
          },
          "overnightLabel": {
            "type": "string",
            "description": "The label accompanying the overnight flag. The label is translated.",
            "example": "Your Copenhagen - Lisbon trip includes a stop in Amsterdam which may require an overnight stay at your own expense. Please check the entry requirements for this country."
          },
          "commercialCabin": {
            "type": "string",
            "description": "The commercial cabin represents the different qualities of accommodation available on the flight, higher classes being more comfortable and typically more expensive. It usually corresponds to different sections in the aircraft (first class at the front of the plane).",
            "example": "ECONOMY",
            "enum": [
              "ECONOMY",
              "PREMIUM",
              "BUSINESS",
              "FIRST"
            ]
          },
          "commercialCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from an airline point of view.",
            "example": "Economy"
          },
          "operatingCabinLabel": {
            "type": "string",
            "description": "The label describing the commercial cabin applicable on this segment from the point of view of the operating carrier (example for a bus: the commercial cabin may be described as economy, whereas the operating cabin may be \"Main cabin\").",
            "example": "Main Cabin"
          }
        },
        "description": "Represents the segment of a connection. It focuses only on the geographical and temporal data of the trip and does not contain fare or price related information."
      },
      "State_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "StationCity_FlightDetailsV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "code": {
            "$ref": "#/components/schemas/City_FlightDetailsV1"
          }
        },
        "description": "Represents a station (city, stopover etc.) that can be used in an itinerary."
      },
      "StopoverStation_FlightDetailsV1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the station.",
            "example": "Amsterdam Schiphol Airport"
          },
          "city": {
            "$ref": "#/components/schemas/StationCity_FlightDetailsV1"
          },
          "code": {
            "$ref": "#/components/schemas/Stopover_FlightDetailsV1"
          }
        },
        "description": "Represents a station stopover."
      },
      "Stopover_FlightDetailsV1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STOPOVER",
              "CITY",
              "COUNTRY",
              "REGION",
              "WORLD",
              "STATE"
            ]
          },
          "name": {
            "type": "string"
          },
          "stopoverType": {
            "type": "string",
            "enum": [
              "AIRPORT",
              "BUS_STATION",
              "HELIPORT",
              "RAILWAY_STATION",
              "FERRY_STATION",
              "OFFLINE_POINT",
              "PORT",
              "SEA_PLANE_BASE",
              "MILITARY_BASE",
              "LIMOUSINE",
              "COLUMBUS_METROPOLITAN_AIRPORT"
            ]
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "zoneID": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "description": "The location code of the station.",
        "example": "AMS"
      },
      "MasheryResourceSupport": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "ProductCondition_UpsellOfferV1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the product.",
            "example": "SeatProduct"
          },
          "sameForAllSegments": {
            "type": "boolean",
            "description": "A flag indicating if the product bought applies to all segments of the connection.",
            "example": true
          },
          "productWarningForAllSegmentsText": {
            "type": "string",
            "description": "A warning text to display in case the product is not included on all segments.",
            "example": "On Nice to Paris no specific seat product is included."
          },
          "highestPrioritySegment": {
            "type": "boolean",
            "description": "A flag indicating if the product is included on the highest priority segment."
          },
          "highestPrioritySegmentProduct": {
            "type": "string",
            "writeOnly": true
          },
          "highestPrioritySegmentProductText": {
            "type": "string",
            "writeOnly": true
          },
          "product": {
            "type": "string",
            "description": "The code of the product.",
            "example": "0B5_CH_EK"
          },
          "productText": {
            "type": "string",
            "description": "The text describing the product.",
            "example": "Seat Choice Category AF"
          },
          "commercialText": {
            "$ref": "#/components/schemas/CommercialText_UpsellOfferV2"
          },
          "detailsText": {
            "type": "string"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee_UpsellOfferV2"
          }
        },
        "description": "Represents the condition related to a bought product."
      }
    }
  }
}